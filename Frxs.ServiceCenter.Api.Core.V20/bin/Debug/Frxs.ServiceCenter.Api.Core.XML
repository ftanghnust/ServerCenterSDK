<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Frxs.ServiceCenter.Api.Core</name>
    </assembly>
    <members>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionConfigCollection">
            <summary>
            接口配置表，此配置表为一个只读表
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IActionConfigCollection">
            <summary>
            接口配置表接口，请注意实现类里获取接口配置对象，都需要实现为拷贝，不能引用
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionConfigCollection.Register(Frxs.ServiceCenter.Api.Core.ActionConfigItem)">
            <summary>
            添加一个接口配置，此配置为系统框架级别全局配置，可以多次调用，但是后注册的会覆盖掉前面注册的属性，但是系统缓存只会保存一份配置文件
            </summary>
            <param name="value">接口配置对象</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionConfigCollection.Register(System.String,Frxs.ServiceCenter.Api.Core.ActionConfigItem)">
            <summary>
            添加一个接口配置，此配置为单一接口全局配置，可以多次调用，但是后注册的会覆盖掉前面注册的属性，但是系统缓存只会保存一份配置文件
            </summary>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="value">接口配置对象</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionConfigCollection.Register(System.String,System.String,Frxs.ServiceCenter.Api.Core.ActionConfigItem)">
            <summary>
            添加一个接口配置，此接口只对特定版本起作用，会覆盖掉未指定版本号的配置，可以多次调用，但是后注册的会覆盖掉前面注册的属性，但是系统缓存只会保存一份配置文件
            </summary>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0</param>
            <param name="value">接口配置对象</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionConfigCollection.GetConfigs">
            <summary>
            返回所有的配置信息，此配置信息获取的是全新的（即原始配置文件的一个拷贝集合）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionConfigCollection.Clear">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionConfigCollection.Item(System.String,System.String)">
            <summary>
            在不存在键的时候，不抛出异常，而直接返回null
            此索引器返回的是一个全新的配置对象，而不是一个引用配置表里的对象；目的防止程序运行时调用者意外的修改原始配置
            </summary>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本</param>
            <returns>返回接口配置对象，配置表里不存在的情况下会返回null</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionConfigCollection.Item(System.String)">
            <summary>
            重写索引器，在不存在键的时候，不抛出异常，而直接返回null
            此索引器返回的是一个全新的配置对象，而不是一个引用配置表里的对象；目的防止程序运行时调用者意外的修改原始配置
            </summary>
            <param name="actionName">接口名称</param>
            <returns>在配置表不存在的情况下会返回null</returns>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionConfigCollection._itemActionKey">
            <summary>
            接口配置配置键，接口名称+版本号
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionConfigCollection._sysActionKey">
            <summary>
            系统框架级别全局配置键
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionConfigCollection.GlobalActionConfig">
            <summary>
            兜底配置，即在配置，特性配置，都未找到的情况下获取此配置
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollection.#ctor">
            <summary>
            忽略键大小写
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollection.Register(System.String,Frxs.ServiceCenter.Api.Core.ActionConfigItem)">
            <summary>
            添加一个接口配置，此配置为全局
            </summary>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="value">接口配置对象</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollection.Register(System.String,System.String,Frxs.ServiceCenter.Api.Core.ActionConfigItem)">
            <summary>
            添加一个接口配置，此接口只对特定版本起作用
            </summary>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0</param>
            <param name="value">接口配置对象</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollection.Register(Frxs.ServiceCenter.Api.Core.ActionConfigItem)">
            <summary>
            添加一个接口配置，此配置为系统框架级别全局配置（定义了此配置，将会覆盖掉系统框架配置）
            </summary>
            <param name="value">接口配置对象</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollection.OverrideActionConfig(Frxs.ServiceCenter.Api.Core.ActionConfigItem,Frxs.ServiceCenter.Api.Core.ActionConfigItem)">
            <summary>
            重写基础接口配置信息
            </summary>
            <param name="baseConfig">基础配置</param>
            <param name="overrideConfig">重写后的配置</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollection.GetConfigs">
            <summary>
             返回所有的配置信息，此配置信息获取的是全新的（即原始配置文件的一个拷贝集合）
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigCollection.Item(System.String)">
            <summary>
            重写索引器，在不存在键的时候，不抛出异常，而直接返回null
            此索引器返回的是一个全新的配置对象，而不是一个引用配置表里的对象；目的防止程序运行时调用者意外的修改原始配置
            </summary>
            <param name="actionName">接口名称</param>
            <returns>在配置表不存在的情况下会返回null</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigCollection.Item(System.String,System.String)">
            <summary>
            在不存在键的时候，不抛出异常，而直接返回null
            此索引器返回的是一个全新的配置对象，而不是一个引用配置表里的对象；目的防止程序运行时调用者意外的修改原始配置
            </summary>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本</param>
            <returns>返回接口配置对象</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ApiConfigManager">
            <summary>
            系统接口配置表，初次加载的时候进行初始化
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiConfigManager.Instance">
            <summary>
            用于保存接口配置
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiConfigManager.Configs">
            <summary>
            返回接口配置表
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiConfigManager.GlobalActionConfig">
            <summary>
            全局接口兜底配置
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionFilterExtensions">
            <summary>
            过滤器接口扩展
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionFilterExtensions.AsActionFilterWrapper(Frxs.ServiceCenter.Api.Core.IActionFilter)">
            <summary>
            将过滤器转换成内部过滤器包装类
            </summary>
            <param name="actionFilter">接口过滤器</param>
            <returns>返回过滤器包装类</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionFilterWrapper">
            <summary>
            过滤器对象包装器，此包装器主要用户过滤器执行顺序封装
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionFilterWrapper.#ctor(Frxs.ServiceCenter.Api.Core.IActionFilter)">
            <summary>
            在构造函数里进行各种过滤器的排序值生成
            </summary>
            <param name="actionFilter">过滤器</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionFilterWrapper.Order">
            <summary>
            优先级排序，优先级越高，越先执行，默认值：0
            过滤器优先级
            3 全局注册的过滤器
            2 接口自身实现的过滤器
            1 接口上附加的特性过滤器
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionFilterWrapper.InternalOrder">
            <summary>
            内部排序;在执行拦截的时候，注意下
            1.拦截接口执行方法前，多个拦截器执行顺序为：InternalOrder,Order高低来排序执行
            2.拦截直接执行方法后，多个拦截器执行顺序为：InternalOrder,Order低到高来执行
            即全局拦截器执行优先于特性定义的拦截器，但是执行后执行顺序却是相反的
            在内部，这个字段将会被赋值，全局拦截器设置为int.MaxValue，自定义的接口特性设置为int.MinValue
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionFilterWrapper.ActionFilter">
            <summary>
            过滤器实例
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.ApiDescriptorAction">
            <summary>
            接口描述对象获取
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionBase`2">
            <summary>
            核心类，接口action抽象类；所有外部实现的接口都需要继承此类
            注意：上送参数和下送数据不支持字典对象数据类型，能够用简易数据类型表达的，尽量用简易数据类型
            </summary>
            <typeparam name="TRequestDto">
            客户端上传Data参数JSON反序列化后对应的对象，此对象必须是继承于RequestDtoBase类的一个实体类
            命名约定规则为：接口类名+RequestDto。如果需要校验客户端UserId和UserName是
            否提交，实现类里请继承接口：IRequiredUserIdAndUserName，这样系统框架会在执行前先校验参数的
            准确性，数据约束规则完全兼容命名空间System.ComponentModel.DataAnnotations下是所有特性。可
            以方便的在上送参数对象属性上定义特性的方式来进行数据验证
            </typeparam>
            <typeparam name="TResponseDto">
            输出ActionResult.Data对象，就可以是任意的输出DTO类型，没有对此类型进行泛型约束
            如果此泛型类型指定为：NullResponseDto，系统自动生成SDK开发包的时候，将不会生成返回输出类
            注意:尽量不要将此类型定义成object类型，要不框架无法自动生成SDK开发包（客户端需要手工进行处理）
            集合类型请尽量使用List数据类型方便系统框架自动完成SDK输出（注意：不支持字典，字典可以使用集合来替代）
            </typeparam>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IAction">
            <summary>
            所有接口实现需要继承此接口
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IAction.Executing">
            <summary>
            开始执行接口Execute()前，先执行下框架内部定义的一些判断
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IAction.Execute">
            <summary>
            业务逻辑真正执行的地方
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IAction.RequestContext">
            <summary>
            当前请求action访问上下文信息(框架自动赋值，实现类里可以直接使用)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IAction.ActionDescriptor">
            <summary>
            当前请求的action描述信息(框架自动赋值，实现类里可以直接使用)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IAction.RequestDto">
            <summary>
            上送的参数对象（框架自动赋值，实现类里可以直接使用）;此对象是实现了IRequestDto接口的传输对象
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IActionFilter">
            <summary>
            接口执行过滤器接口
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionFilter.OnActionExecuting(Frxs.ServiceCenter.Api.Core.ActionExecutingContext)">
            <summary>
            执行方法前；在适当时候进行接口拦截
            </summary>
            <param name="actionExecutingContext">执行上下文</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionFilter.OnActionExecuted(Frxs.ServiceCenter.Api.Core.ActionExecutedContext)">
            <summary>
            执行方法后;可以修改接口执行结果
            </summary>
            <param name="actionExecutedContext">执行上下文</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.#ctor">
            <summary>
            默认构造一个空的记录器，并且初始化一个空的日志记录器和一个空的缓存器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.ValidRequestDto">
            <summary>
            校验上送的参数是否正确（默认会校验是否为null）；失败会直接抛出异常，系统框架会自动捕捉到此异常
            此方法在框架执行action.Executing()方法里会自动进行调用，如果需要改变上送参数对象数据校验，请在重写类里重写此方法即可，但是一般情况下无需重写
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.GetRequestCacheKey(System.String)">
            <summary>
            获取当前请求获取缓存键信息，方便重写实现类里直接使用
            只要接口名称和提交的数据包不变，生成的那么缓存键就不会变化，因此实现针对不同接口和不同请求数据包进行缓存
            具体计算方式为：ActionName + "." + subCacheKey + "." + Units.MD5(Data + Format).ToUpper();
            </summary>
            <param name="subCacheKey">同一操作上下文，有可能需要不同的子缓存键；可以增加子缓存键，防止冲突</param>
            <returns>返回本次请求缓存键</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.ExceptionActionResult(System.String)">
            <summary>
            框架异常错误的ActionResult对象
            对象默认的参数为： Flag = ActionResultFlag.EXCEPTION
            </summary>
            <param name="info">异常消息</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.ErrorActionResult(System.String)">
            <summary>
            直接返回错误的ActionResult对象（此方法仅仅是为了实现类里方便调用返回）
            对象默认参数为：Flag = ActionResultFlag.FAIL
            </summary>
            <param name="info">输出的错误消息</param>
            <returns>直接返回一个Flag = ActionResultFlag.FAIL的接口返回值对象</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.ErrorActionResult(System.String,`1)">
            <summary>
            直接返回错误的ActionResult对象（此方法仅仅是为了实现类里方便调用返回）
            </summary>
            <param name="info">输出的错误消息</param>
            <param name="data">返回的一些数据(会被序列化成JSON或者XML格式输出给客户端)</param>
            <returns>直接返回一个Flag = ActionResultFlag.FAIL的接口返回值对象</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.ArgumentNullErrorActionResult(System.String)">
            <summary>
            请求参数未提交错误ActionResult对象（此方法仅仅是为了方便实现类里方便调用返回）
            </summary>
            <param name="argumentName">参数名称</param>
            <returns>返回一个现实错误的ActionResult对象</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.SuccessActionResult">
            <summary>
            此方法仅仅用于返回一个不带任何返回值的ActionResult对象
            对象默认参数为：Flag = ActionResultFlag.SUCCESS, Info = "OK"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.SuccessActionResult(`1)">
            <summary>
            此方法用于返回一个成功的消息ActionResult对象
            对象默认参数为：Flag = ActionResultFlag.SUCCESS, Info = "OK"
            </summary>
            <param name="data">需要返回给客户端的对象，会格式化成XML或者JSON</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.SuccessActionResult(System.String,`1)">
            <summary>
            此方法用于返回一个成功的消息ActionResult对象
            对象默认参数为：Flag = ActionResultFlag.SUCCESS
            </summary>
            <param name="info">成功消息说明</param>
            <param name="data">需要返回给客户端的对象，会格式化成XML或者JSON</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.Frxs#ServiceCenter#Api#Core#IAction#Executing">
            <summary>
            显式实现下接口，防止子类里出现，调用的时候出现意外
            开始执行接口自定义的业务逻辑前，先执行下框架内部定义的一些判断
            此方法在内部调用过来受保护的ValidRequestDto()方法，用于校验上送参数对象的正确性；
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.Frxs#ServiceCenter#Api#Core#IAction#Execute">
            <summary>
            显式实现接口，此接口仅仅只调用泛型版本的方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.Execute">
            <summary>
             泛型执行接口，系统框架执行的时候会自动调用此方法
             此方法必须在具体接口实现类里重写
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.OnActionExecuting(Frxs.ServiceCenter.Api.Core.ActionExecutingContext)">
            <summary>
            执行：Execute() 方法前执行
            </summary>
            <param name="actionExecutingContext">
            拦截器执行上下文，接口执行前拦截器，如果ActionExecutingContext.Result属性不为null，
            则代表拦截成功(如要需要进行拦截，请在方法体内将ActionExecutingContext.Result属性赋值即可)，不会继续执行Execute()方法
            保存默认值null，则代表不拦截，继续后续的流程执行
            </param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.Frxs#ServiceCenter#Api#Core#IActionFilter#OnActionExecuting(Frxs.ServiceCenter.Api.Core.ActionExecutingContext)">
            <summary>
            显式实现下执行前触发的事件，方便以后扩展（系统框架里做一些事情）
            </summary>
            <param name="actionExecutingContext">拦截器执行上下文</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.OnActionExecuted(Frxs.ServiceCenter.Api.Core.ActionExecutedContext)">
            <summary>
            执行：Execute() 方法后执行
            </summary>
            <param name="actionExecutedContext">拦截器执行上下文</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.Frxs#ServiceCenter#Api#Core#IActionFilter#OnActionExecuted(Frxs.ServiceCenter.Api.Core.ActionExecutedContext)">
            <summary>
            显式实现下执行后触发的事件，方便以后扩展（系统框架里做一些事情）
            </summary>
            <param name="actionExecutedContext">拦截器执行上下文</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.Dispose">
            <summary>
            基类默认实现下IDispose
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionBase`2.Dispose(System.Boolean)">
            <summary>
            具体接口实现类可以重写此方法，系统框架在执行完接口后，会自动调用此方法
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionBase`2.Logger">
            <summary>
            用于记录日志，系统默认使用了空记录日志，如果需要使用其他日志记录器，比如将日志记录到数据库或者其他存储介质
            请在外部实现ILogger接口，然后注入覆盖系统默认的记录器
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionBase`2.CacheManager">
            <summary>
            API框架提供的缓存接口，具体实现请在外部实现具体的缓存实现(这里系统框架未实现任何缓存);
            在进行具体的使用过程中，由于有可能会缓存键会引起冲突，建议缓存键使用this.GetType().FullName加具体缓存键来实现键的冲突或者在外部定义好预定义的键，供具体实现类里调用
            由于接口层并不知道数据库的实体对象变化，因此建议在接口层使用缓存一般是在预知变化不会太频繁的情况下使用，其他情况下慎用；或者在实体增加，修改，删除的时候，全部做缓存设置，删除操作
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionBase`2.RequestContext">
            <summary>
            当前action请求上下文信息(系统框架会自动赋值)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionBase`2.ActionDescriptor">
            <summary>
            当前action请求描述信息(系统框架会自动赋值)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionBase`2.ActionDocResourceManager">
            <summary>
            获取接口描述管理器
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionBase`2.Frxs#ServiceCenter#Api#Core#IAction#RequestDto">
            <summary>
            上送的参数（此参数系统在参加action实例的时候，会自动根据上送的参数进行绑定赋值）
            此属性与强类型的RequestDto属性数据保持一致
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionBase`2.RequestDto">
            <summary>
            上送的参数（此参数系统在参加action实例的时候，会自动根据上送的参数进行绑定赋值）
            注意：当上送的JSON格式不正确的时候，系统框架会自动抛出异常，无需处理；因此此属性一定有返回值
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionBase`2.L">
            <summary>
            语言资源文件的读取；内部使用XML资源文件；
            参数1为资源文件的键，自定义的语言资源包请使用接口的ActionName来作为节点名称，此委托会自动使用接口名称来构造键；KEY只要输入对应接口语言文件key节点名称即可
            参数2为在资源文件找不到的情况下，默认显示的信息；
            返回值为读取到的键值信息；
            资源文件的格式为：请参见：Host/Config/LanguageResource.xml
            调用如：this.L("Exist_S","删除 {0} 出错，当前状态为：{1}" , "001", "已确定")
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Actions.ApiDescriptorAction._actionSelector">
            <summary>
            接口查找器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.ApiDescriptorAction.#ctor(Frxs.ServiceCenter.Api.Core.IActionSelector)">
            <summary>
            
            </summary>
            <param name="actionSelector">接口查找器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.ApiDescriptorAction.Execute">
            <summary>
            执行业务逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.ApiDescriptorAction.ApiDescriptorActionRequestDto">
            <summary>
            上送的参数对象
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RequestDtoBase">
            <summary>
            请求参数传输对象抽象基类，当前操作接口的用户id和用户名称；是的实现类无需重复定义
            在具体的请求实现类里，针对http请求特殊性（全部数据都是按照字符串提交的），因此定义
            数据类型的时候，接口上送参数也尽量定义成简易的数据类型（含复杂对象的属性）
            （string,int,long,enum,decimal,list,数组）
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IRequestDto">
            <summary>
            客户端提交上来的反序列化后对应的实体类接口
            此接口仅仅是空接口，方便系统框架自动化
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IRequestDto.UserId">
            <summary>
            当前操作用户ID
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IRequestDto.UserName">
            <summary>
            当前操作用户名称
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IRequestDtoValidatable">
            <summary>
            校验DTO参数是否合法（业务合法），如果上送的参数对象实现了此接口，系统框架会自动进行校验
            使用原则：如果是通用的数据校验比如，字符串长度，最小，最大值等，可以使用特性校验System.ComponentModel.DataAnnotations下的特性标签；
            此接口在复杂业务数据正确性校验下使用
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IRequestDtoValidatable.BeforeValid">
            <summary>
            此方法也许在执行Valid（）方法先，执行下数据的处理，比如设置默认值操作等
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IRequestDtoValidatable.Valid">
            <summary>
            验证方法;如果验证不通过返回错误集合，如果验证通过了，返回一个空的集合
            </summary>
            <returns>返回校验后的错误集合;如果通过验证，则返回一个空的列表集合</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequestDtoBase.BeforeValid">
            <summary>
            此方法也许在执行Valid()方法前执行(即在此操作的时候，所有的验证特性还未曾生效)，让上送参数对象
            有机会处理下自己的数据，比如设置默认值操作等 比如：当前属性UserName为空的时候，可以在重写方法
            里设置：this.UserName = "system" 给予默认值(目的是为了在添加数据的时候，给予一个默认值等...)
            当然，这里的作用远不止上面的，这里可以将上送参数，在创建接口实例前进行保存，然后保存到当前运行上下文
            可以在注入的时候，使用上送的值
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequestDtoBase.Valid">
            <summary>
            默认实现下自定义参数业务准确性校验，具体实现类里需要可以重写此方法
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestDtoBase.UserId">
            <summary>
            当前请求操作用户ID，此属性应该改成string类型，因为并不一定所有业务类型用户ID都是数值型
            (设计失误，下一版(V30)本里会改过来)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestDtoBase.UserName">
            <summary>
            当前请求操作用户名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestDtoBase.L">
            <summary>
            语言包访问入口
            调用如：this.L("Exist_S","删除 {0} 出错，当前状态为：{1}" , "001", "已确定")
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Actions.ApiDescriptorAction.ApiDescriptorActionRequestDto.ActionName">
            <summary>
            接口名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Actions.ApiDescriptorAction.ApiDescriptorActionRequestDto.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.ApiDescriptorAction.ApiDescriptorActionResponseDto">
            <summary>
            下送的数据
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Actions.ApiDescriptorAction.ApiDescriptorActionResponseDto.ActionDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.ApiResetAction">
            <summary>
            重启服务器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.ApiResetAction.Execute">
            <summary>
            执行业务逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.ClearCacheAction">
            <summary>
            清掉所有系统缓存
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.ClearCacheAction.Execute">
            <summary>
            执行业务逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.IndexAction">
            <summary>
            框架系统首页
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Actions.IndexAction._actionSelector">
            <summary>
            接口查找器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.IndexAction.#ctor(Frxs.ServiceCenter.Api.Core.IActionSelector)">
            <summary>
            
            </summary>
            <param name="actionSelector">接口查找器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.IndexAction.Execute">
            <summary>
            执行业务逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.IndexAction.IndexActionRequestDto">
            <summary>
            上送的参数对象
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.IndexAction.IndexActionRequestDto.Valid">
            <summary>
            自定义校验上送参数是否正确
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.IndexAction.IndexActionResponseDto">
            <summary>
            下送的数据
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Actions.IndexAction.IndexActionResponseDto.ApiPluginDescriptors">
            <summary>
            接口插件
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Actions.IndexAction.IndexActionResponseDto.ActionDescriptors">
            <summary>
            接口描述对象
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.KeepAliveAction">
            <summary>
            提供作业任务访问，保持站点活跃
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.KeepAliveAction.Execute">
            <summary>
            执行业务逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.KeepAliveAction.KeepAliveActionRequestDto">
            <summary>
            上送的参数对象
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.KeepAliveAction.KeepAliveActionRequestDto.Valid">
            <summary>
            自定义校验上送参数是否正确
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ApiApplication">
            <summary>
            系统初始化入口
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiApplication.DefaultApiConfig">
            <summary>
            系统框架默认的配置文件地址
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiApplication.Initialize(System.String)">
            <summary>
            初始化，初始化的时候做了如下事情(请注意必须顺序，全局配置必须在其他前面，业务注册服务需要依赖配置)
            1.先初始化外部配置文件(如果指定了apiConfigPhysicalFilePath参数，否则会自动搜索根目录下面的~/ApiConfig.cs文件)
            2.注册系统所有服务
            3.MVC创建Controller容器更改
            </summary>
            <param name="apiConfigPhysicalFilePath">配置文件物理路径(或者以~/开头的虚拟路径)，如果不配置此路径将不会进行外部配置注册</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptor">
            <summary>
            插件描述对象
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase">
            <summary>
            接口创建描述基类
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IApiPluginDescriptor">
            <summary>
            用于描述API扩展工具，方便框架搜索并且显示已经加载的扩展工具
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IApiPluginDescriptor.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IApiPluginDescriptor.IndexUrl">
            <summary>
            如果含有首页界面，首页访问地址是多少
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IApiPluginDescriptor.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IApiPluginDescriptor.Logo">
            <summary>
            LOGO，URL地址
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IApiPluginDescriptor.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IApiPluginDescriptor.Description">
            <summary>
            插件描述
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IApiPluginDescriptor.ReferencedAssemblies">
            <summary>
            获取依赖项
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.AssemblySkipPattern">
            <summary>
            过滤掉一些系统自带的dll
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.LogoUrl">
            <summary>
            插件默认的LOGO地址
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.ProjectDescriptionFileName">
            <summary>
            组件描述说明文件
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.DefaultLogo">
            <summary>
            系统默认的插件logo
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase._resourceFinderManager">
            <summary>
            资源查找器
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.LogoFileExtensions">
            <summary>
            插件LOGO合法的图片后缀集
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase._currenAssembly">
            <summary>
            当前插件所属程序集
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase._currentAssemblyName">
            <summary>
            当前插件程序集命名空间
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.#ctor(Frxs.ServiceCenter.Api.Core.IResourceFinderManager)">
            <summary>
            
            </summary>
            <param name="resourceFinderManager">资源查找器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.FilterAssemblies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            过滤一些系统级别的程序集
            </summary>
            <param name="referencedAssemblies">插件引用的程序集</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.DisplayName">
            <summary>
            插件名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.IndexUrl">
            <summary>
            插件首页地址;默认为空
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.Version">
            <summary>
            插件版本，默认直接获取当前插件程序集版本
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.Logo">
            <summary>
            插件LOGO;采取约定方式，默认会搜索DLL内嵌资源，根目录Logo.jpg,Logo.gif,Logo.Png和Resource/(Logo.jpg,Logo.gif,Logo.Png)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.Author">
            <summary>
            插件作者，默认为string.Empty
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.Description">
            <summary>
            创建描述，使用约定方式，每个插件的根目录放置ProjectDescription.txt或者Resource/ProjectDescription.txt文件，系统框架自动回搜索读取此说明文件
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptorBase.ReferencedAssemblies">
            <summary>
            创建依赖那些程序集，如果不存在则返回一个空的集合
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptor.#ctor(Frxs.ServiceCenter.Api.Core.IResourceFinderManager)">
            <summary>
            
            </summary>
            <param name="resourceFinderManager"></param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptor.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiPluginDescriptor.Author">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionGroupAttribute">
            <summary>
            分组信息；相同的一组接口可以定义到一起，方便归类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionGroupAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="groupName">分组名称</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionGroupAttribute.GroupName">
            <summary>
            分组名称
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ResponseFormatAttribute">
            <summary>
            允许输出的格式
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionRequestValidatorAttribute">
            <summary>
            用于校验接口定义的特性，此接口会在获取到接口实例后，进行校验
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionRequestValidatorAttribute.ValidForRequest(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            获取到校验结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ResponseFormatAttribute.#ctor(Frxs.ServiceCenter.Api.Core.ResponseFormat)">
            <summary>
            
            </summary>
            <param name="responseFormat">VIEW/XML/JSON</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ResponseFormatAttribute.ValidForRequest(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ResponseFormatAttribute.ResponseFormat">
            <summary>
            允许输出的格式
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.HttpContentType">
            <summary>
            获取文件对应的httpcontent类型
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.HttpContentType._httpContentTypeMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpContentType.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpContentType.GetContentType(System.String)">
            <summary>
            
            </summary>
            <param name="fileExtension">根据扩展名称获取文件的httpContentType类型</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ConfigurationSectionNameAttribute">
            <summary>
            用户指定ConfigurationSection节点配置名称映射
            用于继承ConfigurationSectionHandlerBase了类的实现具体配置实现
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ConfigurationSectionNameAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="sectionName">Web.config节点configuration.configSections.section名称</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ConfigurationSectionNameAttribute.SectionName">
            <summary>
            Web.config节点configuration.configSections.section名称
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.UnloadCachekeysAttribute">
            <summary>
            完成 Action.Execute() 操作后，移除指定的缓存键
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.UnloadCachekeysAttribute.#ctor(System.String[])">
            <summary>
            移除指定匹配模式的缓存键
            </summary>
            <param name="unloadPrefixCacheKeys">待移除的缓存键（注意此键会采取正则的方式进行匹配，如果愿意，完全可以使用正则表达式）</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.UnloadCachekeysAttribute.UnloadCacheKeys">
            <summary>
            待移除的缓存键（匹配键）
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.AuthenticationManager">
            <summary>
            权限校验管理器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AuthenticationManager.Valid(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            针对允许匿名和非匿名进行判断，如果接口允许匿名访问，接口将不走IAuthentication接口流程，直接返回校验成功；
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionDescriptor">接口描述对象</param>
            <returns>身份信息验证是否通过，通过返回：true，失败返回:false</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions">
            <summary>
            接口配置表扩展
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.Register(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.Object)">
            <summary>
            添加一个接口配置，此配置为系统框架级别全局配置，可以多次调用，但是后注册的会覆盖掉前面注册的属性
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="anonymousObjectActionConfigItemValue">接口配置对象，匿名类型，只要属性名称和ActionConfigItem一致既可</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.Register(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.Object)">
            <summary>
            添加一个接口配置，此配置为单一接口全局配置，可以多次调用，但是后注册的会覆盖掉前面注册的属性
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="anonymousObjectActionConfigItemValue">>接口配置对象，匿名类型，只要属性名称和ActionConfigItem一致既可</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.Register(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String,System.Object)">
            <summary>
            添加一个接口配置，此接口只对特定版本起作用，会覆盖掉未指定版本号的配置，可以多次调用，但是后注册的会覆盖掉前面注册的属性
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0</param>
            <param name="anonymousObjectActionConfigItemValue">>接口配置对象，匿名类型，只要属性名称和ActionConfigItem一致既可</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.Obsolete(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String[])">
            <summary>
            注销一个接口
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionNames">接口名称，大小写不敏感</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.Obsolete(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String)">
            <summary>
            注销接口
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.Route(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String)">
            <summary>
            接口的特性路由
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="url">特性路由，不能含有{}字符</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.ObsoleteSystemActions(Frxs.ServiceCenter.Api.Core.IActionConfigCollection)">
            <summary>
            禁用所有的系统框架接口
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.RequireHttps(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String)">
            <summary>
            接口需要安全连接 https
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.RequireHttps(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String)">
            <summary>
            接口需要安全连接 https
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.Cache(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.Int32)">
            <summary>
            接口设置缓存
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="cacheTime">缓存时间</param>
        </member>
        <!-- 对于成员“M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.Cache(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.Cache(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            接口设置缓存
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0，如果不指定接口请配置为null</param>
            <param name="cachePrefix">缓存KEY前缀</param>
            <param name="cacheTime">缓存时间</param>
            <param name="ignoreUserIdAndUserName">生成的缓存键是否忽略掉操作用户信息</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.UnloadCache(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String,System.String[])">
            <summary>
            在操作结束后会自动移除缓存键
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0，如果不指定接口请配置为null</param>
            <param name="cachePrefixs">缓存KEY前缀</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.EnableRecordApiLog(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String)">
            <summary>
            记录接口日志
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.EnableRecordApiLog(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String)">
            <summary>
            记录接口日志
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.RequiredUserIdAndUserName(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String)">
            <summary>
            需要校验用户ID和用户名称是否提交
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.RequiredUserIdAndUserName(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String)">
            <summary>
            需要校验用户ID和用户名称是否提交
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.DataSignatureTransmission(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String)">
            <summary>
            需要走加密传输流程
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.DataSignatureTransmission(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String)">
            <summary>
            需要走加密传输流程
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.AllowAnonymous(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String)">
            <summary>
            允许匿名访问，即：不走授权接口校验流程
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.AllowAnonymous(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String)">
            <summary>
            允许匿名访问，即：不走授权接口校验流程
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.DisablePackageSdk(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String)">
            <summary>
            不打包到SDK
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.DisablePackageSdk(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String)">
            <summary>
            不打包到SDK
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="version">接口版本，接口版本格式为：1.0</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionConfigCollectionExtensions.Group(Frxs.ServiceCenter.Api.Core.IActionConfigCollection,System.String,System.String)">
            <summary>
            设置接口分组
            </summary>
            <param name="actionConfigCollection">接口配置表对象</param>
            <param name="actionName">接口名称，大小写不敏感</param>
            <param name="groupName">分组名称</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionContext">
            <summary>
            当前请求接口执行上下文（执行前，执行后）
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionContext.#ctor(Frxs.ServiceCenter.Api.Core.IAction,Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.ActionDescriptor,System.Object)">
            <summary>
            默认构造函数
            </summary>
            <param name="action">当前请求接口实例</param>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionDescriptor">当前接口描述对象</param>
            <param name="requestDto">当前接口上送业务参数对象</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionContext.Action">
            <summary>
            当前请求接口实例
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionContext.RequestContext">
            <summary>
            当前请求上下文（虽然IAction接口里存在此接口，这里的RequestContext是为了外部访问方便）
            此对象与当前属性Action.RequestContext对象指向同一个内存地址
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionContext.ActionDescriptor">
            <summary>
            当前请求的action描述信息,此属性与Action.ActionDescriptor指向统一内存地址
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionContext.RequestDto">
            <summary>
            当前请求接口上送的参数对象（框架自动赋值，实现类里可以直接使用）;此对象是实现了IRequestDto接口的传输对象
            此对象与当前属性Action.RequestDto对象指向同一个内存地址
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionContext.Result">
            <summary>
            执行返回结果，
            注意：在执行前，如果在定义了返回值，那么结果后续操作将会被拦截掉，不会被执行，如果返回值不为null，那么将会对请求进行拦截
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionExecutedContext">
            <summary>
            接口执行后，接口执行器上下文
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionExecutedContext.#ctor(Frxs.ServiceCenter.Api.Core.IAction,Frxs.ServiceCenter.Api.Core.ActionResult)">
            <summary>
            初始化当前上下文对象
            </summary>
            <param name="action">接口实例</param>
            <param name="actionResult">接口执行Execute()方法后返回的执行结果</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionExecutingContext">
            <summary>
            接口执行前，接口执行器上下文
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionExecutingContext.#ctor(Frxs.ServiceCenter.Api.Core.IAction)">
            <summary>
            初始化当前上下文对象
            </summary>
            <param name="action">接口实例</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.GlobalActionFiltersCollection">
            <summary>
            接口过滤器集合配置表
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IGlobalActionFiltersCollection">
            <summary>
            全局接口过滤器集合接口
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IGlobalActionFiltersCollection.Add(Frxs.ServiceCenter.Api.Core.IActionFilter[])">
            <summary>
            添加一个全局接口过滤器
            </summary>
            <param name="actionFilters">过滤器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IGlobalActionFiltersCollection.Clear">
            <summary>
            清空所有过滤器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IGlobalActionFiltersCollection.Remove(Frxs.ServiceCenter.Api.Core.IActionFilter)">
            <summary>
            移除特定对象的第一个匹配项。
            </summary>
            <param name="item">继承自ActionFilterBaseAttribute的过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IGlobalActionFiltersCollection.GetActionFilters">
            <summary>
            获取所有的全局结果过滤器
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IGlobalActionFiltersCollection.Count">
            <summary>
            全局接口过滤器数
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.GlobalActionFiltersCollection.Add(Frxs.ServiceCenter.Api.Core.IActionFilter[])">
            <summary>
            添加一个新的全局拦截器到管理器里面
            </summary>
            <param name="actionFilters">全局拦截器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.GlobalActionFiltersCollection.GetActionFilters">
            <summary>
            获取所有的全局拦截器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Caching.Impl.PerRequestCacheManager">
            <summary>
            Represents a manager for caching during an HTTP request (short term caching)
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ICacheManager">
            <summary>
            系统框架缓存器接口；在实际使用中请引入：ICacheManager.Extensions扩展来进行使用
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ICacheManager.Get``1(System.String)">
            <summary>
            根据缓存键获取缓存实体对象
            </summary>
            <typeparam name="T">明确的缓存对象</typeparam>
            <param name="key">缓存键</param>
            <returns>指定缓存类型的对象</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ICacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存；注意这里设置缓存，是否先删除缓存还是不删除已有缓存；请在具体实现里做
            </summary>
            <param name="key">缓存键</param>
            <param name="data">缓存数据</param>
            <param name="cacheTime">缓存过期时间,单位为分钟</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ICacheManager.IsSet(System.String)">
            <summary>
            根据缓存键判断是否已经有缓存
            </summary>
            <param name="key">缓存键</param>
            <returns>Result</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ICacheManager.Remove(System.String)">
            <summary>
            根据缓存键删除对应缓存
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ICacheManager.RemoveByPattern(System.String)">
            <summary>
            根据正则表达式来删除缓存
            </summary>
            <param name="pattern">正则表达式匹配模式</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ICacheManager.Clear">
            <summary>
            清空全部的缓存键
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Caching.Impl.PerRequestCacheManager._httpContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.PerRequestCacheManager.#ctor(System.Web.HttpContextBase)">
            <summary>
            Ctor
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.PerRequestCacheManager.GetItems">
            <summary>
            Creates a new instance of the NopRequestCache class
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.PerRequestCacheManager.Get``1(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.PerRequestCacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            Adds the specified key and object to the cache.
            </summary>
            <param name="key">key</param>
            <param name="data">Data</param>
            <param name="cacheTime">Cache time</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.PerRequestCacheManager.IsSet(System.String)">
            <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
            <param name="key">key</param>
            <returns>Result</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.PerRequestCacheManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the cache
            </summary>
            <param name="key">/key</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.PerRequestCacheManager.RemoveByPattern(System.String)">
            <summary>
            Removes items by pattern
            </summary>
            <param name="pattern">pattern</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.PerRequestCacheManager.Clear">
            <summary>
            Clear all cache data
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.WriteLockDisposable">
            <summary>
            实现写锁
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.WriteLockDisposable._readerWriterLocker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.WriteLockDisposable.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="rwLock"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.WriteLockDisposable.System#IDisposable#Dispose">
            <summary>
            释放写锁
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.CompareType">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.CompareType.GreaterThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.CompareType.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.CompareType.LessThanOrEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.CompareType.GreaterThanOrEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.AbstractCompareAttribute">
            <summary>
            比较特性抽象基类
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AbstractCompareAttribute.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="value">属性值必须大于此值</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AbstractCompareAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            确定对象的指定值是否有效
            </summary>
            <param name="value">要验证的对象的值</param>
            <param name="validationContext">描述执行验证检查的上下文</param>
            <returns>如果指定的值有效，则为 true；否则，为 false。</returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AbstractCompareAttribute.Value">
            <summary>
            设置的值，只要是实现了 IComparable 接口即可
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AbstractCompareAttribute.CompareType">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.GreaterThanOrEqualAttribute">
            <summary>
            大于等于指定值
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.GreaterThanOrEqualAttribute.#ctor(System.Object)">
            <summary>
            设置的值，只要是实现了 IComparable 接口即可
            </summary>
            <param name="value">属性值必须大于此值</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.GreaterThanOrEqualAttribute.CompareType">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.LessThanOrEqualAttribute">
            <summary>
            小于等于指定值
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.LessThanOrEqualAttribute.#ctor(System.Object)">
            <summary>
            设置的值，只要是实现了 IComparable 接口即可
            </summary>
            <param name="value">属性值必须小于此值</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.LessThanOrEqualAttribute.CompareType">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.LessThanAttribute">
            <summary>
            小于指定值
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.LessThanAttribute.#ctor(System.Object)">
            <summary>
            设置的值，只要是实现了 IComparable 接口即可
            </summary>
            <param name="value">属性值必须小于此值</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.LessThanAttribute.CompareType">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.GreaterThanAttribute">
            <summary>
            大于指定值
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.GreaterThanAttribute.#ctor(System.Object)">
            <summary>
            设置的值，只要是实现了 IComparable 接口即可
            </summary>
            <param name="value">属性值必须大于此值</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.GreaterThanAttribute.CompareType">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.InAttribute">
            <summary>
            输入的值必须包含在指定的范围值域内
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.InAttribute.#ctor(System.Object[])">
            <summary>
            
            </summary>
            <param name="values">值域范围，比如：[1,2,3,4]或者["z","x","Y"]</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.InAttribute.IsValid(System.Object)">
            <summary>
            确定对象的指定值是否有效
            </summary>
            <param name="value">要验证的对象的值</param>
            <returns></returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.InAttribute.Values">
            <summary>
            值域范围
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.NotEmptyAttribute">
            <summary>
            集合元素不能为空(即：元素必须大于1个)
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.NotEmptyAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            确定对象的指定值是否有效
            </summary>
            <param name="value">要验证的对象的值</param>
            <param name="validationContext">描述执行验证检查的上下文</param>
            <returns>如果指定的值有效，则为 true；否则，为 false。</returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.NotEqualAttribute">
            <summary>
            比较指定属性值，检测是否与当前属性相等
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.NotEqualAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="memberToCompare">待比对的属性名称</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.NotEqualAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            确定对象的指定值是否有效
            </summary>
            <param name="value">要验证的对象的值</param>
            <param name="validationContext">描述执行验证检查的上下文</param>
            <returns>如果指定的值有效，则为 true；否则，为 false。</returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.NotEqualAttribute.MemberToCompare">
            <summary>
            待比对的属性名称
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultJosnSerializer">
            <summary>
            默认的序列化反序列化实现(Newtonsoft.Json)
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IJosnSerializer">
            <summary>
            JSON序列化接口，交给外部调用系统去实现，解耦下框架直接依赖于某个组件
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IJosnSerializer.Deserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="value">JSON字符串</param>
            <param name="type">反序列的类型</param>
            <returns>返回对象，如果反序列失败，请返回null</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IJosnSerializer.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">待反序列化的类型</typeparam>
            <param name="value">JSON字符串</param>
            <returns>返回对象，如果反序列失败，请返回null</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IJosnSerializer.Serialize(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="value">待序列化的对象</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultJosnSerializer.Deserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="value">输入的JSON字符串</param>
            <param name="type">需要反序列化的类型</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultJosnSerializer.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">需要反序列化的类型</typeparam>
            <param name="value">输入的JSON字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultJosnSerializer.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="value">待序列化的对象</param>
            <returns>返回序列化后的JSON字符串</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultObjectMapper">
            <summary>
            系统框架自带的映射方式
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IObjectMapper">
            <summary>
            对象映射接口，方便后期对接口进行优化
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IObjectMapper.MapTo``1(System.Object,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            将匿名的所有对象映射到指定的对象；映射过程中，只要数据类型键可以相互转换，无需2个转换对象属性类型完全一致
            </summary>
            <typeparam name="T">指定需要转换的类型;实体对象必须带无参构造函数</typeparam>
            <param name="sourceObject">是否忽略属性名称大小写</param>
            <param name="ignoreCase">待转换类型anonymousObject=null的时候返回null，创建T类型的时候失败也会返回null，请注意转换结果null的判断</param>
            <param name="skipPropertyNames">跳过那些属性不赋值(此属性为T类型属性集合)</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultObjectMapper.GetPropertyNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            根据表达式树获取属性名称
            </summary>
            <typeparam name="T">输入的对象类型</typeparam>
            <param name="predicate">获取对象属性名称委托</param>
            <returns>返回输入的属性名称集合，未找到设置的属性名称，则返回空集合</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultObjectMapper.MapTo``1(System.Object,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            将匿名的所有对象映射到指定的对象；映射过程中，只要数据类型键可以相互转换，无需2个转换对象属性类型完全一致
            </summary>
            <typeparam name="T">指定需要转换的类型;实体对象必须带无参构造函数</typeparam>
            <param name="sourceObject">是否忽略属性名称大小写</param>
            <param name="ignoreCase">待转换类型anonymousObject=null的时候返回null，创建T类型的时候失败也会返回null，请注意转换结果null的判断</param>
            <param name="skipPropertyNames">跳过那些属性不赋值(此属性为T类型属性集合)</param>
            <example>
            <![CDATA[
            调用方式：
            new Models.Attribute().MapTo<Models.AppVersion>(skipPropertyNames: x => new { x.ID, x.CurVersion, x.DownUrl });
            或者
            new Models.Attribute().MapTo<Models.AppVersion>(skipPropertyNames: x => new object[]{ x.ID, x.CurVersion, x.DownUrl });
            ]]>
            </example>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Host.ApiControllerBase">
            <summary>
            控制器基类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ApiControllerBase.#ctor">
            <summary>
            初始化一下空日志接口，防止null错误
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Host.ApiControllerBase.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionResultPagerData`1">
            <summary>
            需要分页输出的地方（此类为建议类，实际使用中可以依据情况使用）
            此类没有定义成泛型类是让在数据组装数据的时候方便
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionResultPagerData`1.TotalRecords">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionResultPagerData`1.ItemList">
            <summary>
            输出的集合数据，此处对象必须为一个集合类型的对象，比如：数组,列表
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.ServerTimeGetAction">
            <summary>
            获取服务器时间；返回一个字符串时间数据，格式为：yyyy-MM-dd HH:mm:ss.fff
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.ServerTimeGetAction.Execute">
            <summary>
            执行业务逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.ServerTimeGetActionV10">
            <summary>
            获取服务器时间；返回一个字符串时间数据，格式为：yyyy-MM-dd HH:mm:ss.fff
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.ServerTimeGetActionV10.Execute">
            <summary>
            执行业务逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.ServerTimeGetActionV11">
            <summary>
            获取服务器时间；返回一个字符串时间数据，格式为：yyyy-MM-dd HH:mm:ss.fff
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.ServerTimeGetActionV11.Execute">
            <summary>
            执行业务逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ApiAccessRecordPublisher">
            <summary>
            API日志记录器发布者，给所有订阅者进行接口信息发布
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiAccessRecordPublisher.Publish(System.String,Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.ActionLifeTime)">
            <summary>
            发布日志访问消息；会逐个调用订阅者，进行发布
            </summary>
            <param name="actionResultString">执行结果的字符串</param>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionLifeTime">Action对象的执行时间对象</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ApiPluginManager">
            <summary>
            API接口扩展插件管理类
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiPluginManager.CachedApiPlugins">
            <summary>
            缓存所有扩展项目信息；
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiPluginManager.GetApiPlugins">
            <summary>
            获取插件
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ApiVersion">
            <summary>
            接口框架版本
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiVersion._version">
            <summary>
            当前框架版本
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiVersion.Version">
            <summary>
            获取当前程序集版本
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionDocResourceManager">
            <summary>
            接口描述文档对象
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionDocResourceManager._xmlDocMembers">
            <summary>
            用于保存DLL类，方法，属性注释文档信息，转化成字典方便后续快速获取摘要信息
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionDocResourceManager.#ctor(System.String[])">
            <summary>
            初始化一下接口描述文档
            </summary>
            <param name="actionDocResourcePaths">文档接口描述路径</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionDocResourceManager.Init(System.String[])">
            <summary>
            初始化接口描述文件
            </summary>
            <param name="actionDocResourcePaths">接口文件注释文档路径，绝对路径</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionDocResourceManager.GetDescription(System.String)">
            <summary>
            直接从XML文件里获取到描述信息
            </summary>
            <param name="typeFullName">属性或者对象类型全称</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionDocResourceManager.GetDescription(System.Type)">
            <summary>
            获取接口描述
            </summary>
            <param name="type">属性或者对象类型</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionDocResourceManager.GetDescriptionLines(System.String)">
            <summary>
            获取描述文档，输出行
            </summary>
            <param name="typeFullName">属性或者对象类型全称</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionDocResourceManager.GetDescriptionLines(System.Type)">
            <summary>
             获取描述文档，输出行
            </summary>
            <param name="type">属性或者对象类型</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDocResourceManager.Instance">
            <summary>
            获取文档描述对象
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.AuthenticationBaseAttribute">
            <summary>
            特定接口授权基类；需要实现接口自定义签名，授权校验的，请继承此类，重写IsValid方法即可；
            然后将自己实现的特性类，附加到接口类上面即可）
            * *****************************************************************************************
            为什么要定义此授权过滤器抽象基类，因为接口框架已经定义了一个IAuthentication授权接口，原因如下：
            1.IAuthentication授权接口是统一的授权检测，比如参数正确性，加密是否正确等，即全局的授权判断
            2.但是有些接口需要一个独自的授权判断，因此定义了一个授权基类来实现不同接口实现不同授权判断的情况
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IAuthentication">
            <summary>
            用于校验APPKEY身份，时间戳，上传数据签名，是否正确；具体实现交给外部去实现
            注意：此接口校验器为全局，如果想要定义单独接口授权校验器，请实现：ActionAuthenticationBaseAttribute抽象类
            注意此接口，注册为协作类型，即：多个注册实现授权器会按照优先级全部执行一次
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IAuthentication.Valid(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            验证身份是否通过；校验的时候请使用原始的请求参数，即：RequestContext.RawRequestParams参数进行校验
            </summary>
            <param name="requestContext">请求参数</param>
            <returns>校验成功返回true,失败返回false</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IAuthentication.Order">
            <summary>
            用于排序优先级，越高越先执行;但是全局实现的接口肯定优先于特性接口
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AuthenticationBaseAttribute.Valid(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            默认实现全部返回true，继承类需要重写此方法，用于实际的业务逻辑授权判断
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <returns>true/false</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.AuthenticationBaseAttribute.Order">
            <summary>
            优先级，越高越先执行判断;默认0
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionRequestValidatorResult">
            <summary>
            接口合法性调用校验结果对象
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionRequestValidatorResult.#ctor(Frxs.ServiceCenter.Api.Core.ActionResult,System.Boolean)">
            <summary>
            初始化接口合法性对象
            </summary>
            <param name="actionResult">接口返回对象</param>
            <param name="isValid">是否验证成功</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionRequestValidatorResult.Success">
            <summary>
            表示成功
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionRequestValidatorResult.ActionResult">
            <summary>
            返回的ActionResult对象，成功或者失败都会返回
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionRequestValidatorResult.IsValid">
            <summary>
            接口调用合法性调用是否通过
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.AllowAnonymousAttribute">
            <summary>
            是否允许匿名访问，添加了此特性的接口类，将【不会校验全局，即实现了IAuthentication全局接口校验】，
            但是如果接口指定了单独的特性校验（即继承了AuthenticationBaseAttribute特性的校验类），特性校验器会起作用进行校验
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ApiPrefixAttribute">
            <summary>
            程序集里的接口统一加前缀
            如果接口所在的程序集里含有此特性标签，框架在加载接口的时候，会统一加上前缀
            此特性只能添加于：AssemblyInfo.cs文件
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiPrefixAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="prefix">接口前缀，如：Erp.Product</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiPrefixAttribute.Prefix">
            <summary>
            统一前缀名称，如：Erp.Product
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DisableDataSignatureTransmissionAttribute">
            <summary>
            禁止进行加解密传输，加上此特性后，接口将不会走IApiSecurity接口流程
            上送数据和下送数据都直接走原始方式
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DisablePackageSdkAttribute">
            <summary>
            禁止打包成SDK访问;当接口加上此特性后，自动打包SDK的时候，将不会打包
            一般在开发接口插件的时候可以使用此特性来包装不会将插件接口打包
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.EnableRecordApiLogAttribute">
            <summary>
            接口是否允许记录访问日志，如果设置为false，实现第三方日志的接口将无法记录此接口访问的记录
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.EnableRecordApiLogAttribute.#ctor(System.Boolean)">
            <summary>
            接口是否允许记录访问
            </summary>
            <param name="enableRecordApiLog">默认true（第三方实现日志记录记录接口日志）</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.EnableRecordApiLogAttribute.EnableRecordApiLog">
            <summary>
            接口是否允许记录访问
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.BinarySerialization">
            <summary>
            Contains helper functions for serialization and deserialization of data items (e.g.cached items)
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.BinarySerialization.Serialize(System.Action{System.IO.BinaryWriter})">
            <summary>
            A helper method to serialize objects with BinaryWriter. Creates a memory stream 
            and a BinaryWriter on it, and invokes the callback specified.
            </summary>
            <param name="serialize">Serialization delegate</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.BinarySerialization.Deserialize``1(System.Byte[],System.Func{System.IO.BinaryReader,``0})">
            <summary>
            A helper method to deserialize objects with BinaryWriter. Creates a memory stream 
            and a BinaryReader on it, and invokes the callback specified.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="input">input</param>
            <param name="deserialize">Deserialization delegate</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RandomHelper">
            <summary>
            根据帮助类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RandomHelper.GenerateRandomDigitCode(System.Int32)">
            <summary>
            获取指定长度的随机数字字符串;适用环境：比如在需要生成手机验证码等需要随机数字字符串的地方；长度无限制
            </summary>
            <param name="length">数字字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RandomHelper.GenerateRandomInteger(System.Int32,System.Int32)">
            <summary>
            获取一个随机数字
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.HostHelper">
            <summary>
            主机帮助
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HostHelper.GetBinDirectory">
            <summary>
            获取当前运行环境的bin文件夹物理路径
            </summary>
            <returns>获取当前运行环境的bin文件夹物理路径，如："c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HostHelper.MapPath(System.String)">
            <summary>
            映射虚拟路径到实际物理路径
            </summary>
            <param name="path">虚拟路径，如： "~/bin"</param>
            <returns>返回物理路径，如： "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HostHelper.TryWriteWebConfig">
            <summary>
            尝试重写下web.config时间，用于重启应用程序域
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HostHelper.TryWriteGlobalAsax">
            <summary>
            尝试重写下Global.asax时间，用于重启应用程序域
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.UserIdentity">
            <summary>
            当前调用接口的用户信息
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.UserIdentity.UserId">
            <summary>
            当前请求操作用户ID
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.UserIdentity.UserName">
            <summary>
            当前请求操作用户名称
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.NotNullAttribute">
            <summary>
            可为空的值类型，或者object不能为null，如果需要使字符串类型不为null，请使用RequiredAttribute特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.NotNullAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.NotNullAttribute.IsValid(System.Object)">
            <summary>
            确定对象的指定值是否有效
            </summary>
            <param name="value">要验证的对象的值</param>
            <returns>如果指定的值有效，则为 true；否则，为 false。</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionRequestValidatorManager">
            <summary>
            默认的请求验证器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionRequestValidatorManager.Valid(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            校验action定义的一些拦截设置
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultApiSecurity">
            <summary>
            系统框架默认的安全接口，此接口什么都没有做，直接原路返回，即上送参数解密，下送参数解密；
            具体实现类可以继承此类，对上送参数解密，下送数据加密，已经数据签名进行校验等
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IApiSecurity">
            <summary>
            接口上送参数，下送数据加密解密接口；在实现类里请不要抛出任何异常
            注意：此接口为单一注册接口，最后注册的实现会覆盖掉前面注册的实现
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IApiSecurity.RequestParamsDecrypt(Frxs.ServiceCenter.Api.Core.RequestParams)">
            <summary>
            上送的参数对象进行解密，具体根据对那部分进行解密，需要在实际项目里进行双方约定
            </summary>
            <param name="rawRequestParams">上送参数对象</param>
            <returns>解密后的数据对象</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IApiSecurity.ResponseEncrypt(Frxs.ServiceCenter.Api.Core.RequestParams,System.String)">
            <summary>
            下送数据加密方法
            </summary>
            <param name="decryptedRequestParams">
            解密后的上送参数对象，
            为什么要定义此解密后的参数原因：由于有可能会根据不同的AppKey生成不同的加密解密方式，
            因此需要将上送的参数对象传入，用于差异化加密</param>
            <param name="actionResultString">下送的JSON或者XML或者View数据加密</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultApiSecurity.GetSignRequestParamsString(Frxs.ServiceCenter.Api.Core.RequestParams)">
            <summary>
            获取待签名的键值对，为空或者为null的属性不会添加到字典表，已经安装key键进行排序(a-z)
            </summary>
            <param name="rawRequestParams">请求的原始上送参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultApiSecurity.GetAppSecret(System.String)">
            <summary>
            根据APPKEY获取到数据签名密钥
            </summary>
            <param name="appKey"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultApiSecurity.RequestParamsDecrypt(Frxs.ServiceCenter.Api.Core.RequestParams)">
            <summary>
            直接返回上送data数据
            </summary>
            <param name="rawRequestParams">上送参数对象</param>
            <returns>返回解密对象结果</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultApiSecurity.ResponseEncrypt(Frxs.ServiceCenter.Api.Core.RequestParams,System.String)">
            <summary>
            直接返回下送数据
            </summary>
            <param name="actionResultString">actionResult对象格式化字符串</param>
            <param name="decryptedRequestParams">解密后的上送参数对象</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ApiSecurityManager">
            <summary>
            接口上送，下送参数加解密管理器
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ApiSecurityManager._apiSecurity">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiSecurityManager.#ctor(Frxs.ServiceCenter.Api.Core.IApiSecurity)">
            <summary>
            
            </summary>
            <param name="apiSecurity">加解密接口</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiSecurityManager.RequestParamsDecrypt(Frxs.ServiceCenter.Api.Core.RequestParams,Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            如果接口设置为不走解密流程，即配置了DisableDataSignatureTransmissionAttribute特性或者将接口描述
            对象属性DataSignatureTransmission=false情况下，将直接返回原始的上送请求参数(即返回解密的参数对象与原始上送的参数对象完全一致)；
            默认情况下将走IApiSecurity接口处理流程
            </summary>
            <param name="rawRequestParams">原始的上送参数对象</param>
            <param name="actionDescriptor">接口描述对象</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiSecurityManager.ResponseEncrypt(Frxs.ServiceCenter.Api.Core.RequestParams,Frxs.ServiceCenter.Api.Core.IActionDescriptor,System.String)">
            <summary>
            接口如果设置不走加密流程，下送数据将直接返回
            </summary>
            <param name="actionResultString">actionResult对象格式化字符串</param>
            <param name="decryptedRequestParams">解密后的上送参数对象</param>
            <param name="actionDescriptor">接口描述对象</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultRequestParamsBinder">
            <summary>
            上送参数对象绑定器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IRequestParamsBinder">
            <summary>
            上送参数对象绑定器接口
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IRequestParamsBinder.GetRequestParams">
            <summary>
            获取上送的参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.DefaultRequestParamsBinder._valueProviderManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultRequestParamsBinder.#ctor(Frxs.ServiceCenter.Api.Core.IValueProvidersManager)">
            <summary>
            
            </summary>
            <param name="valueProviderManager">值提供器管理器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultRequestParamsBinder.GetRequestParams">
            <summary>
            获取接口框架上送参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Host.ActionRequestHanderActionResult">
            <summary>
            重写一个ActionResult实现，用于处理请求
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Host.ActionRequestHanderActionResult._actionHandler">
            <summary>
            API接口入口委托
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ActionRequestHanderActionResult.#ctor(System.Action,Frxs.ServiceCenter.Api.Core.ILogger)">
            <summary>
            初始化一个处理委托，用户后续的ExecuteResult执行
            </summary>
            <param name="actionHandler">接口请求处理类</param>
            <param name="logger">日志记录器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ActionRequestHanderActionResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            将执行的输出交给MVC的Executeresult去执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Host.ActionRequestHanderActionResult.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Host.KeepAliveTask">
            <summary>
            保持站点激活作业任务
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ITask">
            <summary>
            外部作业任务都需要实现此类
            注意外部的实现类里不能注入：
            HttpContextBase,HttpRequestBase，
            HttpResponseBase，
            HttpServerUtilityBase，
            HttpSessionStateBase；因为在新开的线程里无法使用http管道
            其他的IOC容器里的注入类都可以
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITask.Execute(Frxs.ServiceCenter.Api.Core.TaskExecuteContext)">
            <summary>
            执行作业任务
            </summary>
            <param name="taskExecuteContext">执行作业任务上下文</param>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Host.KeepAliveTask._logger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.KeepAliveTask.#ctor(Frxs.ServiceCenter.Api.Core.ILogger,Frxs.ServiceCenter.Api.Core.SystemOptions)">
            <summary>
            
            </summary>
            <param name="logger">日志接口</param>
            <param name="systemOptions">系统配置</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.KeepAliveTask.Execute(Frxs.ServiceCenter.Api.Core.TaskExecuteContext)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IActionRequestHander">
            <summary>
            接口请求入口处理类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionRequestHander.Execute">
            <summary>
            执行接口处理
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IAsyncAction">
            <summary>
            异步接口
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Infrastructure.DefaultMachineNameProvider">
            <summary>
            系统框架默认的运行实例名称获取器实现
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IMachineNameProvider">
            <summary>
            获取当前运行实例信息
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IMachineNameProvider.GetMachineName">
            <summary>
            获取应用程序运行的实例名称
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Infrastructure.DefaultMachineNameProvider.webFram">
            <summary>
            同一IIS站点启动了多个工作线程，那么相当于不同的服务器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Infrastructure.DefaultMachineNameProvider.GetMachineName">
            <summary>
            获取当前应用实例的机器名称
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IStartUp">
            <summary>
            用于系统初始化，此接口会在系统启动的时候自动进行初始化，全局只会执行一次
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IStartUp.Init">
            <summary>
            需要在系统启动的时候初始化方法，启动时会自动执行此方法
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.MediaTypeFormatterMappingManager">
            <summary>
            根据请求获取最格式的输出
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.MediaTypeFormatterMappingManager.mineTypeMapping">
            <summary>
            用于内容协商
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.MediaTypeFormatterMappingManager._requestContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.MediaTypeFormatterMappingManager.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.MediaTypeFormatterMappingManager.#ctor(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            
            </summary>
            <param name="requestContext">当前请求上下文</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.MediaTypeFormatterMappingManager.GetResponseFormat">
            <summary>
            获取输出格式化器
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.MediaTypeFormatterMappingManager.MediaTypeHeaderValue">
            <summary>
            接收的类型对象
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.MediaTypeFormatterMappingManager.MediaTypeHeaderValue.MineType">
            <summary>
            mine类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.MediaTypeFormatterMappingManager.MediaTypeHeaderValue.Q">
            <summary>
            类型的权重0-1之间
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IRequestDtoValidator">
            <summary>
            上送对象RequestDto对象验证接口，注意此接口为多实现协作接口
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IRequestDtoValidator.Valid(Frxs.ServiceCenter.Api.Core.RequestDtoBase,Frxs.ServiceCenter.Api.Core.ActionDescriptor)">
            <summary>
            验证实体数据正确性，返回RequestDtoValidatorResult对象
            </summary>
            <param name="requestDto">上送业务参数对象</param>
            <param name="actionDescriptor">当前接口描述</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IRequestDtoValidatorManager">
            <summary>
            系统RequestDto验证管理类，因为系统框架可能会注册多个验证实现
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IRequestDtoValidatorManager.Valid(Frxs.ServiceCenter.Api.Core.RequestDtoBase,Frxs.ServiceCenter.Api.Core.ActionDescriptor)">
            <summary>
            针对多个RequestDto校验器进行校验
            </summary>
            <param name="requestDto">上送业务参数对象</param>
            <param name="actionDescriptor">当前接口描述</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IRequestDtoValidatorManager.RequestDtoValidators">
            <summary>
            获取所有的RequestDto验证管理器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoValidatorManager">
            <summary>
            系统框架默认实现的验证器管理类
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoValidatorManager._requestDtoValidators">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoValidatorManager.#ctor(System.Collections.Generic.IEnumerable{Frxs.ServiceCenter.Api.Core.IRequestDtoValidator})">
            <summary>
            
            </summary>
            <param name="requestDtoValidators">系统框架注册的所有验证器，可以为null，为null表示满意校验器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoValidatorManager.Valid(Frxs.ServiceCenter.Api.Core.RequestDtoBase,Frxs.ServiceCenter.Api.Core.ActionDescriptor)">
            <summary>
            校验上送参数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoValidatorManager.RequestDtoValidators">
            <summary>
            获取所有的RequestDto验证管理器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RouteAttribute">
            <summary>
            Action接口特定的路由信息
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RouteAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="url">自定义接口特定的路由URL</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RouteAttribute.Url">
            <summary>
            自定义接口特定的路由URL
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ComplexObjPropertyTypeDescriptor">
            <summary>
            对象类型，属性描述对象
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ComplexObjPropertyTypeDescriptor.MemberName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ComplexObjPropertyTypeDescriptor.MemberType">
            <summary>
            属性值类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ComplexObjPropertyTypeDescriptor.DisplayType">
            <summary>
            属性类型对外展示的类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ComplexObjPropertyTypeDescriptor.Description">
            <summary>
            属性描述
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ComplexObjPropertyTypeDescriptor.IsRequire">
            <summary>
            是否是必填
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultValueItemConfig">
            <summary>
            演示数据配置信息
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultValueItemConfig.#ctor(System.Type,System.Object,System.String[])">
            <summary>
            
            </summary>
            <param name="propertyType">属性类型</param>
            <param name="value">默认演示值</param>
            <param name="propertyNames">那些属性名称可以使用</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultValueItemConfig.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultValueItemConfig.PropertyType">
            <summary>
            属性类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultValueItemConfig.PropertyNames">
            <summary>
            公用value值的属性名称，不区分大小写
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultValueItemConfig.Value">
            <summary>
            默认给予的演示值
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IApiDocBuilder">
            <summary>
            接口上送，下送数据仿真器接口
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IApiDocBuilder.CreateInstance(System.Type)">
            <summary>
            获取上送对象或者下送数据对象，并且已经将各个属性赋值（测试值）
            </summary>
            <param name="type">任意类型，一般为：RequestDtoType和ResponseDtoType类型</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.SdkCodeGeneratorBase">
            <summary>
            SDK生成器抽象基类
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.CodeGeneratorBase">
            <summary>
            代码生成器期基类；基础类命名规则：语言名称+SDKCodeGenerator方式，因为创建实例的工厂方法会搜索实现类名称来创建实例
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CodeGeneratorBase.IsCollection(System.Type)">
            <summary>
            <![CDATA[是否是集合类类型，如果类型包含下列类型即判断为集合类型：IEnumerable<>,ICollection<>,IList<>,List<>,Array]]>
            </summary>
            <param name="type">任意数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CodeGeneratorBase.IsPrimitive(System.Type)">
            <summary>
            是否是基元类型(此方法扩展了C#框架里在的基元类型判断，增加了一些类型，比如：datatime等，还包含了可空值类型)
            </summary>
            <param name="type">任意数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CodeGeneratorBase.IsComplexType(System.Type)">
            <summary>
            判断某个对象是否是复杂类，注意如果类型为集合类型，那么将会判断集合元素类型是否是复杂类型；如果集合元素不是复杂类型，那么返回的也是false
            </summary>
            <param name="type">任意类型</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CodeGeneratorBase.GetCollectionElementype(System.Type)">
            <summary>
            获取一个集合里的对象类型（这里的集合必须是泛型集合）
            </summary>
            <param name="type">
            <![CDATA[支持泛型集合类型：IEnumerable<>,ICollection<>,IList<>,List<>,Array]]>
            </param>
            <returns>如果非泛型集合类型，返回null</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CodeGeneratorBase.GetComplexObjTypes(System.Type,System.Collections.Generic.IList{System.Type})">
            <summary>
            获取自定义复杂类型里的所有复杂类（方便构造出来后进行内部类的输出）
            </summary>
            <param name="objType">任意对象</param>
            <param name="results">返回对象内部所有的复杂类（遍历整个对象树）</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CodeGeneratorBase.GetComplexObjPropertyTypeDescriptors(System.Type)">
            <summary>
            获取复杂类型对象属性描述集合
            </summary>
            <param name="type">复杂对象类型</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CodeGeneratorBase.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            基元类型数据赋值，判断可空类型
            </summary>
            <param name="property">对象属性</param>
            <param name="obj">对象</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CodeGeneratorBase.ConvertPropertyType(System.Type)">
            <summary>
            属性转换，此方法会调用CreateTypeMapping()抽象方法
            </summary>
            <param name="type">数据类型转换</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CodeGeneratorBase.CreateTypeMapping">
            <summary>
            创建类型转换映射表;针对C#属性，转换成对应的客户端语言类型
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.CodeGeneratorBase.ActionDocResourceManager">
            <summary>
            接口描述资源包
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SdkCodeGeneratorBase.GeneratorRequest(Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            获取上送参数客户端请求类
            </summary>
            <param name="actionDescriptor">接口描述对象</param>
            <returns>key：客户端请求调用类名称，也是生成文件的名称，value:源代码</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SdkCodeGeneratorBase.GeneratorResponse(Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            获取下送数据客户端输出类
            </summary>
            <param name="actionDescriptor">接口描述对象</param>
            <returns>key：客户端请求调用类名称，也是生成文件的名称，value:源代码</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SdkCodeGeneratorBase.Language">
            <summary>
            针对那种语言
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultIApiDocBuilder">
            <summary>
            接口默认提供的仿真数据提供器(具体业务请在外部继承此实现类，重写DefaultValueMapping()方法即可)
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultIApiDocBuilder.CreateTypeMapping">
            <summary>
            对外的数据类型显示映射
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultIApiDocBuilder.DefaultValueMapping">
            <summary>
            获取测试数据的映射（一般来说，需要进行数据仿真的话，只要重写此方法即可）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultIApiDocBuilder.GetDefaultValue(System.String,System.Type)">
            <summary>
            获取映射的默认值
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="type">基元类型</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultIApiDocBuilder.ComplexObjectSetDefaultValue(System.Object,System.Collections.Generic.Dictionary{System.Type,System.Object})">
            <summary>
            对指定对象属性进行赋值（测试值）
            </summary>
            <param name="obj">对象</param>
            <param name="complexObjs">对象属性里的所有复杂对象集合</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultIApiDocBuilder.CreateInstance(System.Type)">
            <summary>
            获取复杂类型实例（注意此类型不能含有任何构造函数，包括其属性里面的复杂属性）
            </summary>
            <param name="type">任意类型，一般为：RequestDtoType和ResponseDtoType类型</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.StartUpManager">
            <summary>
            系统启动项管理器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StartUpManager.Start(Frxs.ServiceCenter.Api.Core.ITypeFinder)">
            <summary>
            启动实现了IStartUp接口的所有类
            </summary>
            <param name="typeFinder">类型查找器</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultResourceFinderManager">
            <summary>
            资源查找器管理器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IResourceFinderManager">
            <summary>
            资源查找过滤器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IResourceFinderManager.GetResource(System.String)">
            <summary>
            获取资源
            </summary>
            <param name="resourceName">资源名称（部分路径或者全部路径，如：sys.png 或者 Frxs.ServiceCenter.Api.Core.Resource.sys.png）</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IResourceFinderManager.ResourceFinders">
            <summary>
            系统框架注册的所有资源查找器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultResourceFinderManager.#ctor(System.Collections.Generic.IEnumerable{Frxs.ServiceCenter.Api.Core.IResourceFinder},Frxs.ServiceCenter.Api.Core.ICacheManager)">
            <summary>
            构造函数
            </summary>
            <param name="resourceFinders">资源查找器</param>
            <param name="cacheManager">缓存器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultResourceFinderManager.GetResources(System.Collections.Generic.IEnumerable{Frxs.ServiceCenter.Api.Core.IResourceFinder})">
            <summary>
            获取所有资源查找器资源并集
            </summary>
            <param name="resourceFinders">资源查找器</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultResourceFinderManager.GetResource(System.String)">
            <summary>
            获取资源
            </summary>
            <param name="resourceName">资源名称(可以是包含部分或者全部资源名称)</param>
            <returns>返回资源字符串，如果是图片，则返回base64字符串，如果不存在则返回null</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultResourceFinderManager.ResourceFinders">
            <summary>
            系统框架注册的所有资源查找器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IValueProvidersManager">
            <summary>
            值提供器管理器；此过滤器将会将所有注册的值提供器进行管理
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IValueProvidersManager.GetAllKeys">
            <summary>
            获取所有的键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IValueProvidersManager.GetValue(System.String)">
            <summary>
            根据键，后去键所对应的值
            </summary>
            <param name="propertyName">键名称</param>
            <returns>如果键不存在就直接返回null</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IValueProvidersManager.ValueProviders">
            <summary>
            值提供器集合
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultValueProvidersManager">
            <summary>
            默认的值提供器管理器
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.DefaultValueProvidersManager._valueProviders">
            <summary>
            保存值提供器集合
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultValueProvidersManager.#ctor(System.Collections.Generic.IEnumerable{Frxs.ServiceCenter.Api.Core.IValueProvider})">
            <summary>
            使用值提供器集合来构造一个值提供器管理器
            </summary>
            <param name="valueProviders">值提供器集合</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultValueProvidersManager.GetAllKeys">
            <summary>
            获取所有值提供器的键
            </summary>
            <returns>返回邮件值提供器的键集合</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultValueProvidersManager.GetValue(System.String)">
            <summary>
            根据键获取值提供器对应的值
            </summary>
            <param name="propertyName">键名称</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultValueProvidersManager.ValueProviders">
            <summary>
            获取所有注册的值提供器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Tasks.Impl.DefaultTaskSchedulerDistributedLocker">
            <summary>
            默认的分布式协调器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ITaskSchedulerDistributedLocker">
            <summary>
            此接口用于分布式作业任务锁接口，当我们将应用程序部署在多台机上
            或者IIS站点启动多进行工作模式的时候，我们需要一个机制，
            确认某些作业任务只工作在一台进程里，所以需要一个分布式锁来确认正常工作
            因此实现此类的外部保存环境必须能够被所有运行实例访问，不能放置于运行实例缓存里面等
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITaskSchedulerDistributedLocker.Get(System.String)">
            <summary>
            获取调度器分布式锁对象信息
            </summary>
            <param name="taskSchedulerName">作业任务调度器名称</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITaskSchedulerDistributedLocker.Lock(Frxs.ServiceCenter.Api.Core.TaskSchedulerDistributedLockerObject)">
            <summary>
            设置调度器分布式锁
            </summary>
            <param name="locker"></param>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Tasks.Impl.DefaultTaskSchedulerDistributedLocker.Key">
            <summary>
            用于保存分布式锁的key
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Tasks.Impl.DefaultTaskSchedulerDistributedLocker._cacheManager">
            <summary>
            缓存器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Tasks.Impl.DefaultTaskSchedulerDistributedLocker.#ctor(Frxs.ServiceCenter.Api.Core.ICacheManager)">
            <summary>
            默认使用缓存来保存锁定
            </summary>
            <param name="cacheManager">缓存器必须为单独的公共缓存服务器，不能使用单独的内存缓存器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Tasks.Impl.DefaultTaskSchedulerDistributedLocker.Get(System.String)">
            <summary>
            获取分布式作业任务锁
            </summary>
            <param name="taskSchedulerName">作业任务调度器名称</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Tasks.Impl.DefaultTaskSchedulerDistributedLocker.Lock(Frxs.ServiceCenter.Api.Core.TaskSchedulerDistributedLockerObject)">
            <summary>
            设置分布式作业任务锁
            </summary>
            <param name="locker"></param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.TaskSchedulerDistributedLockerObject">
            <summary>
            用于分布式锁
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskSchedulerDistributedLockerObject.TaskSchedulerName">
            <summary>
            作业任务调度器名称，全局唯一
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskSchedulerDistributedLockerObject.LeasedUntil">
            <summary>
            作业调度器再特定运行实例里运行的到期时间
            租约到期时间(默认时间为10分钟，具体实现请看：Task.cs类)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskSchedulerDistributedLockerObject.LeasedByMachineName">
            <summary>
            作业调度器再特东运行实例里运行的实例名称
            租约机器（在分布式执行的时候，因为每个IIS都会有一套还行任务，
            因此我们先签约第一个执行的机器来执行，其他分布式机器比较此租
            约机器名称来判断是否执行）
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ITaskSchedulerRegistar">
            <summary>
            此接口为作业任务调度器系统自动注册接口，系统框架会自动寻找实现此接口的所有类，然后进行注册
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITaskSchedulerRegistar.Register(Frxs.ServiceCenter.Api.Core.ITaskSchedulerCollection)">
            <summary>
            此方法实现模块注册，系统框架会自动调用此方法就行注册
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ITaskSchedulerRegistar.Order">
            <summary>
            优先级，优先级越高在执行的时候，会后注册，用于覆盖前面的注册（比如更新操作）
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.TaskExecuteContext">
            <summary>
            作业任务执行上下文
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskExecuteContext.TaskScheduler">
            <summary>
            当前作业任务依赖的调度器
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskExecuteContext.TaskThread">
            <summary>
            执行点作业任务的作业线程，可能为null，所以在作业任务实现类里使用需要先判断下是否未null
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.TaskSchedulerAttribute">
            <summary>
            作业任务调度器配置特性，作用于实现了ITask的具体作业任务
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskSchedulerAttribute.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name">调度器友好的名称(全局唯一)</param>
            <param name="seconds">多少秒执行一次</param>
            <param name="enabled">调度器是否启用</param>
            <param name="stopOnError">当遇到错误的时候，是否停止执行</param>
            <param name="runOnOneWebFarmInstance">在分布式站点中，确保一个作业任务只运行一个实例，防止并发重复作业</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskSchedulerAttribute.Name">
            <summary>
            调度器友好的名称(全局唯一)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskSchedulerAttribute.Seconds">
            <summary>
            多少秒执行一次
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskSchedulerAttribute.Enabled">
            <summary>
            调度器是否启用
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskSchedulerAttribute.StopOnError">
            <summary>
            当遇到错误的时候，是否停止执行
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskSchedulerAttribute.RunOnOneWebFarmInstance">
            <summary>
            在分布式站点中，确保一个作业任务只运行一个实例，防止并发重复作业
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.TaskSchedulerCollectionExtensions">
            <summary>
            作业任务调度器集合类扩展
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskSchedulerCollectionExtensions.Register(Frxs.ServiceCenter.Api.Core.ITaskSchedulerCollection,System.String,System.Type,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            注册一个作业任务调度器
            </summary>
            <param name="taskSchedulerCollection">调度器集合</param>
            <param name="name">调度名称</param>
            <param name="taskType">调度器关联的作业任务类型</param>
            <param name="seconds">间隔多少秒执行一次，默认30分钟</param>
            <param name="enabled">是否启用</param>
            <param name="stopOnError">遇到错误是否停止改作业任务</param>
            <param name="runOnOneWebFarmInstance">是否值运转在一个实例上</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskSchedulerCollectionExtensions.Register``1(Frxs.ServiceCenter.Api.Core.ITaskSchedulerCollection,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            注册一个作业任务调度器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="taskSchedulerCollection">调度器集合</param>
            <param name="name">调度名称</param>
            <param name="seconds">间隔多少秒执行一次，默认30分钟</param>
            <param name="enabled">是否启用</param>
            <param name="stopOnError">遇到错误是否停止改作业任务</param>
            <param name="runOnOneWebFarmInstance">是否值运转在一个实例上</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskSchedulerCollectionExtensions.Update(Frxs.ServiceCenter.Api.Core.ITaskSchedulerCollection,System.String,System.Type,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            更新作业任务调度器
            </summary>
            <param name="taskSchedulerCollection">调度器集合</param>
            <param name="name">调度器名称</param>
            <param name="taskType">调度器类型</param>
            <param name="seconds">执行间隔，单位：秒</param>
            <param name="enabled">是否启用</param>
            <param name="stopOnError">遇到错误是否停止改作业任务</param>
            <param name="runOnOneWebFarmInstance">是否值运转在一个实例上</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.TaskSchedulerManager">
            <summary>
            调度器管理器
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.TaskSchedulerManager.Instance">
            <summary>
            保存作业任务调度器
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskSchedulerManager.TaskSchedulers">
            <summary>
            获取调度器列表
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.TaskSchedulerCollection">
            <summary>
            作业任务调度器集合类
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ITaskSchedulerCollection">
            <summary>
            作业任务调度器集合类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITaskSchedulerCollection.Register(Frxs.ServiceCenter.Api.Core.TaskScheduler)">
            <summary>
            注册一个作业任务调度器，实现的时候，直接返回当前调度器集合，方便链式调用
            </summary>
            <param name="taskScheduler">调度器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITaskSchedulerCollection.Update(Frxs.ServiceCenter.Api.Core.TaskScheduler)">
            <summary>
            更新一个作业任务调度器
            </summary>
            <param name="taskScheduler"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITaskSchedulerCollection.Remove(System.String)">
            <summary>
            根据调度器名称删除调度器
            </summary>
            <param name="name">调度器名称</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITaskSchedulerCollection.Get(System.String)">
            <summary>
            获取作业任务调度器
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITaskSchedulerCollection.GetAll">
            <summary>
            获取所有的调度器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskSchedulerCollection.Get(System.String)">
            <summary>
            获取任务调度器
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskSchedulerCollection.GetAll">
            <summary>
            获取所有注册的任务调度器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskSchedulerCollection.Register(Frxs.ServiceCenter.Api.Core.TaskScheduler)">
            <summary>
            注册一个任务调度器
            </summary>
            <param name="taskScheduler"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskSchedulerCollection.Remove(System.String)">
            <summary>
            删除作业任务调度
            </summary>
            <param name="name">调度器名称</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskSchedulerCollection.Update(Frxs.ServiceCenter.Api.Core.TaskScheduler)">
            <summary>
            更新作业任务调度器
            </summary>
            <param name="taskScheduler"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskSchedulerCollection.IsRegisted(System.String)">
            <summary>
            检测任务调度器是否重复添加
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.TaskScheduler">
            <summary>
            调取器描述类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskScheduler.Equals(Frxs.ServiceCenter.Api.Core.TaskScheduler)">
            <summary>
            重写下相等判断
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskScheduler.CompareTo(System.Object)">
            <summary>
            比较两个指定的 TaskScheduler 对象，并返回一个指示二者在排序顺序中的相对位置的整数
            </summary>
            <param name="obj"></param>
            <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskScheduler.CompareTo(Frxs.ServiceCenter.Api.Core.TaskScheduler)">
            <summary>
            比较两个指定的 TaskScheduler 对象，并返回一个指示二者在排序顺序中的相对位置的整数。
            </summary>
            <param name="other"></param>
            <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskScheduler.Name">
            <summary>
            调度器友好的名称(全局唯一)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskScheduler.Seconds">
            <summary>
            多少秒执行一次
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskScheduler.TaskType">
            <summary>
            ITask作业任务的类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskScheduler.Enabled">
            <summary>
            调度器是否启用
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskScheduler.StopOnError">
            <summary>
            当遇到错误的时候，是否停止执行
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskScheduler.RunOnOneWebFarmInstance">
            <summary>
            在分布式站点中，确保一个作业任务只运行一个实例，防止并发重复作业
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Task">
            <summary>
            作业任务封装类
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Task._taskScheduler">
            <summary>
            作业任务调度器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Task.#ctor(Frxs.ServiceCenter.Api.Core.TaskScheduler)">
            <summary>
            Ctor for Task
            </summary>
            <param name="taskScheduler">作业任务调度器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Task.Execute(Frxs.ServiceCenter.Api.Core.TaskThread,System.Boolean,System.Boolean)">
            <summary>
            执行作业任务
            </summary>
            <param name="taskThread">当前作业任务工作线程</param>
            <param name="throwException">遇到错误是否直接抛出异常</param>
            <param name="dispose">执行完作业任务后，是否释放资源</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Task.IsRunning">
            <summary>
            当前作业任务是否正在执行中....
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Task.StopOnError">
            <summary>
            遇到错误是否定制作业任务执行
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Task.Name">
            <summary>
            获取作业任务名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Task.Enabled">
            <summary>
            获取当前任务是否允许运行
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Task.Seconds">
            <summary>
            多少秒执行一次
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Task.TaskType">
            <summary>
            ITask作业任务的类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Task.RunOnOneWebFarmInstance">
            <summary>
            在分布式站点中，确保一个作业任务只运行一个实例，防止并发重复作业
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Task.LeasedUntil">
            <summary>
            作业调度器再特定运行实例里运行的到期时间
            租约到期时间(一般默认租约到期时间为30天)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Task.LeasedByMachineName">
            <summary>
            作业调度器再特东运行实例里运行的实例名称
            租约机器（在分布式执行的时候，因为每个IIS都会有一套还行任务，
            因此我们先签约第一个执行的机器来执行，其他分布式机器比较此租
            约机器名称来判断是否执行）
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.TaskThreadManager">
            <summary>
            作业任务管理器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskThreadManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskThreadManager.Initialize(Frxs.ServiceCenter.Api.Core.ITypeFinder)">
            <summary>
            初始化所有作业任务
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskThreadManager.Start">
            <summary>
            启动TaskManager
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskThreadManager.Stop">
            <summary>
            停止TaskManager
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskThreadManager.Instance">
            <summary>
            获取TaskManager实例
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskThreadManager.TaskThreads">
            <summary>
            获取所有的作业线程
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Host.TaskSchedulerRegistar">
            <summary>
            注册作业任务调度器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.TaskSchedulerRegistar.Register(Frxs.ServiceCenter.Api.Core.ITaskSchedulerCollection)">
            <summary>
            
            </summary>
            <param name="taskSchedulerCollection"></param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Host.TaskSchedulerRegistar.Order">
            <summary>
            默认最小，方便后面插件有机会修改
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.TaskThread">
            <summary>
            作业线程（每个线程可能包含多个作业任务）
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskThread.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskThread.Run">
            <summary>
            真正执行作业线程里的所有作业任务
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskThread.TimerHandler(System.Object)">
            <summary>
            timer每次触发的时候执行的委托方法
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskThread.Dispose">
            <summary>
            释放作业线程
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskThread.InitTimer">
            <summary>
            初始化作业线程（创建timer）
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TaskThread.AddTask(Frxs.ServiceCenter.Api.Core.Task)">
            <summary>
            添加一个封装后的作业任务到作业线程
            </summary>
            <param name="task">作业</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskThread.Seconds">
            <summary>
            作业执行间隔，单位：秒
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskThread.Started">
            <summary>
            作业线程启动时间，一旦启动器时间不会变化
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskThread.LastRuned">
            <summary>
            最后一次执行作业任务时间
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskThread.IsRunning">
            <summary>
            显示当前作业线程是否正在执行作业
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskThread.Tasks">
            <summary>
            获取所有作业任务列表（封装后的作业任务）
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskThread.Interval">
            <summary>
            执行作业任务间隔，单位：毫秒，内部使用
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.TaskThread.RunOnlyOnce">
            <summary>
            作业任务线程是否值运行一次，而不重复间隔执行
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ValueProviderBase">
            <summary>
            基于字符的值提供器基类
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IValueProvider">
            <summary>
            值提供器；此接口属于协作接口，即：多个注册的实现，会依次根据值提供器优先级来进行获取值
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IValueProvider.GetValue(System.String)">
            <summary>
            根据对象属性名称从值提供器里获取值(注意有可能会返回null，不存在值)
            </summary>
            <param name="propertyName">键名称，一般对应于绑定对象的属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IValueProvider.GetAllKeys">
            <summary>
            获取到所有的键信息
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IValueProvider.Order">
            <summary>
            值提供器优先级
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ValueProviderBase.GetValueDictionary">
            <summary>
            获取值字典信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ValueProviderBase.GetAllKeys">
            <summary>
            获取所有的键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ValueProviderBase.GetValue(System.String)">
            <summary>
            获取指定键对应的值
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ValueProviderBase.Order">
            <summary>
            值提供器优先级
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngine">
            <summary>
            系统框架视图引擎接口，注意此接口为多实现协作接口，即：外部多个实现系统框架都会认为合法，并且会依次循环所有实现
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngine.CompileByViewPath(System.String,Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection,System.Text.Encoding)">
            <summary>
            编译视图文件并执行视图
            </summary>
            <param name="viewPath">视图文件路径，请输入绝对路径比如：g:\\temp\t.aspx</param>
            <param name="parameters">视图定义的参数集合</param>
            <param name="encode">视图文件文件编码</param>
            <returns>返回视图执行结果字符串</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngine.CompileByViewSource(System.String,Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection,System.Text.Encoding)">
            <summary>
            编译视图文件并执行视图
            </summary>
            <param name="viewSource">视图文件源码</param>
            <param name="parameters">视图定义的参数集合</param>
            <param name="encode">视图文件文件编码</param>
            <returns>编译视图源代码，并将视图执行结果返回</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngine.SupportedExtension">
            <summary>
            支持的后缀，格式必须如：.cshtml或者.aspx或者 .xxx
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngineExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngineExtensions.CompileByViewPath(Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngine,System.String,Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection)">
            <summary>
            编译视图文件并执行视图，默认使用UTF-8编译
            </summary>
            <param name="apiViewEngine">接口框架视图引擎接口</param>
            <param name="viewPath">视图文件路径，请输入绝对路径比如：g:\\temp\t.aspx</param>
            <param name="parameters">视图定义的参数集合</param>
            <returns>返回视图执行结果字符串</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngineExtensions.CompileByViewPath(Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngine,System.String,Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameter[])">
            <summary>
            编译视图文件并执行视图，默认使用UTF-8编译
            </summary>
            <param name="apiViewEngine">接口框架视图引擎接口</param>
            <param name="viewPath">视图文件路径，请输入绝对路径比如：g:\\temp\t.aspx</param>
            <param name="parameters">视图定义的参数集合</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngineExtensions.CompileByViewSource(Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngine,System.String,Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection)">
            <summary>
            编译视图文件并执行视图，默认使用UTF-8编译
            </summary>
            <param name="apiViewEngine">接口框架视图引擎接口</param>
            <param name="viewSource">视图文件源码</param>
            <param name="parameters">视图定义的参数集合</param>
            <returns>编译视图源代码，并将视图执行结果返回</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngineExtensions.CompileByViewSource(Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngine,System.String,Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameter[])">
            <summary>
            编译视图文件并执行视图，默认使用UTF-8编译
            </summary>
            <param name="apiViewEngine">接口框架视图引擎接口</param>
            <param name="viewSource">视图文件源码</param>
            <param name="parameters">视图定义的参数集合</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.AssemblyResourceFinder">
            <summary>
            模块内嵌视图查找器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ResourceFinderBase">
            <summary>
            资源文件读取器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IResourceFinder">
            <summary>
            所有接口所在程序集视图文件查找器（注意此接口只找文本类型的，比如：js,css,aspx,asp,cshtml等）
            此接口属于协作接口，即：注册多个资源查找器系统会依次在各个查找器里进行资源查找
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IResourceFinder.GetResources">
            <summary>
            返回所有程序集内嵌资源信息；此方法的实现最好能够进行缓存机制，即第一次加载到时候描述所有程序集，后续直接从缓存里读取
            key:资源文件名称
            value:资源文件源代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IResourceFinder.GetResource(System.String)">
            <summary>
            获取到资源文件原始文本
            </summary>
            <param name="resourceViewFullPath">内嵌资源路径</param>
            <returns>内嵌资源原始文件(找不的将返回null，所以调用的时候需要注意下null情况)</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IResourceFinder.Order">
            <summary>
            优先级排序，数字越大，优先级越高
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ResourceFinderBase.GetResources">
            <summary>
            获取全部资源
            </summary>
            <returns>获取所有文本资源信息</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ResourceFinderBase.GetResource(System.String)">
            <summary>
            获取文本类型资源文件源码
            </summary>
            <param name="resourceFullPath">针对内嵌资源或者本地资源路径</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ResourceFinderBase.SupportedFileExtensions">
            <summary>
            读取内嵌资源，指定扩展名；系统框架默认读取：.aspx，.t ,系统框架不区分后缀大小写
            为了安全调用，此属性只能在重写类里重写（框架采取约定的方式）
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ResourceFinderBase.Order">
            <summary>
            优先级；默认int.Minvalue，最低
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.AssemblyResourceFinder.CachedManifestResourceNames">
            <summary>
            用于缓存所有程序集内嵌资源文件信息
            key:视图路径，value:视图源代码
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AssemblyResourceFinder.#ctor(Frxs.ServiceCenter.Api.Core.IActionSelector,Frxs.ServiceCenter.Api.Core.ICacheManager)">
            <summary>
            默认的内嵌视图查找器
            </summary>
            <param name="actionSelector">接口查找器</param>
            <param name="cacheManager">缓存器</param>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.AssemblyResourceFinder._supportedLogoImageExtensions">
            <summary>
            内嵌图片扩展名
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AssemblyResourceFinder.GetResources">
            <summary>
            获取所有程序集的内嵌视图文件；惰性加载，第一次获取的时候加载
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AssemblyResourceFinder.Frxs#ServiceCenter#Api#Core#IStartUp#Init">
            <summary>
            预热下，系统启动时候执行一次
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.AssemblyResourceFinder.SupportedFileExtensions">
            <summary>
            允许读取内嵌的图片信息
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ArrayExtensions">
            <summary>
            Array.Extensions
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ArrayExtensions.ArraysEquals``1(``0[],``0[])">
            <summary>
            比较2个数字是否相等
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="arr1">数组1</param>
            <param name="arr2">数组2</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.HttpResponseBaseExtensions">
            <summary>
            HttpResponseBase Extensions
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpResponseBaseExtensions.SetStatus(System.Web.HttpResponseBase,System.Net.HttpStatusCode)">
            <summary>
            直接设置返回消息状态码
            </summary>
            <param name="response">HttpResponseBase</param>
            <param name="httpStatusCode">http状态码</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpResponseBaseExtensions.SetStatus(System.Web.HttpResponseBase,System.Int32)">
            <summary>
            直接设置返回消息状态码
            </summary>
            <param name="response">HttpResponseBase</param>
            <param name="httpStatusCode">http状态码值</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpResponseBaseExtensions.WriteBinary(System.Web.HttpResponseBase,System.Byte[],System.String)">
            <summary>
            直接输出字节流给客户端
            </summary>
            <param name="response">HttpResponseBase</param>
            <param name="data"></param>
            <param name="mimeType">MimeType类型</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpResponseBaseExtensions.WriteBinary(System.Web.HttpResponseBase,System.Byte[])">
            <summary>
            直接输出字节流给客户端
            </summary>
            <param name="response">HttpResponseBase</param>
            <param name="data"></param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IDictionaryExtensions">
            <summary>
            IDictionary Extensions
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IDictionaryExtensions.Append``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            添加一个键值并且返回字段对象
            </summary>
            <typeparam name="TKey">键数据类型</typeparam>
            <typeparam name="TValue">值数据类型</typeparam>
            <param name="dict">字典对象</param>
            <param name="key">当前加入key键</param>
            <param name="value">当前加入的值</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IDictionaryExtensions.Append``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1}[])">
            <summary>
            添加一个键值并且返回字段对象
            </summary>
            <typeparam name="TKey">键数据类型</typeparam>
            <typeparam name="TValue">值数据类型</typeparam>
            <param name="dict">字典对象</param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IDictionaryExtensions.Append``2(System.Collections.Generic.IDictionary{``0,``1},System.Tuple{``0,``1}[])">
            <summary>
            添加一个键值并且返回字段对象
            </summary>
            <typeparam name="TKey">键数据类型</typeparam>
            <typeparam name="TValue">值数据类型</typeparam>
            <param name="dict">字典对象</param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IDictionaryExtensions.Append``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            添加一个键值并且返回字段对象
            </summary>
            <typeparam name="TKey">键数据类型</typeparam>
            <typeparam name="TValue">值数据类型</typeparam>
            <param name="dict">字典对象</param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IDictionaryExtensions.IsEmpty``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            判断一个字段对象是否为空，注意此扩展方法仅仅判断字段里是否为0个集合
            </summary>
            <param name="dict">字段对象</param>
            <returns>包含0个元素，返回true</returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException</exception>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IDictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            根据键获取字典值，如果指定的键不存在，就从后续的默认委托获取值
            </summary>
            <param name="dict">字典对象</param>
            <typeparam name="TKey">键数据类型</typeparam>
            <typeparam name="TValue">值数据类型</typeparam>
            <param name="key">键</param>
            <param name="default">返回默认值委托</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IListExtensions">
             <summary>
            List Extensions
             </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IListExtensions.Append``1(System.Collections.Generic.IList{``0},``0[])">
            <summary>
            添加一个新的对象到集合，并返回新的集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">当前集合</param>
            <param name="objs"></param>
            <returns>返回附加后的新集合</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IListExtensions.Append``1(System.Collections.Generic.IList{``0},System.Func{``0})">
            <summary>
            添加一个新的对象到集合，并返回新的集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">当前集合</param>
            <param name="default">通过一个委托返回待添加的集合</param>
            <returns>返回附加后的新集合</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IListExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断集合是否为空（即包含0个元素）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns>包含0个元素，返回true</returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException</exception>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.TypeExtensions">
            <summary>
            类型扩展
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            判断一个类型是否是匿名类型
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.TypeExtensions.IsNullable(System.Type)">
            <summary>
            是否是可空类型
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Host.ApiController">
            <summary>
            API接口入口类
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Host.ApiController._actionRequestHander">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ApiController.#ctor(Frxs.ServiceCenter.Api.Core.IActionRequestHander)">
            <summary>
            API入口处理程序
            </summary>
            <param name="actionRequestHander">API入口处理程序</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ApiController.RequestHander">
            <summary>
            API接口处理入口
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ApiController.Index">
            <summary>
            提交首页，直接转到API处理入口 /index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ApiController.Help">
            <summary>
            接口帮助文档接口 /help
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ApiController.HelpXml">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ApiController.HelpJson">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ApiController.HelpView">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ApiController.Reset">
            <summary>
            重启框架系统，在浏览器里输入：/reset 即可
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ApiController.CacheClear">
            <summary>
            清除缓存，注意是系统框架生成的缓存键，即：缓存键带有：_SYS_
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Host.ResourceController">
            <summary>
            获取资源类（方便插件资源文件获取），插件view视图里获取资源文件可以直接使用此控制器
            比如，想获取插件本身自己内嵌的资源JS文件，直接使用下面方式既可以
            <![CDATA[
            <script type="text/javascript" src="/GetResource?resourceName=jquery-1.9.1.min.js"></script>
            <script type="text/javascript" src="/GetResource/jquery-1.9.1.min.js"></script>
            ]]>
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Host.ResourceController._resourceFinderManager">
            <summary>
            程序集内嵌资源查找器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ResourceController.#ctor(Frxs.ServiceCenter.Api.Core.IResourceFinderManager)">
            <summary>
            构造函数
            </summary>
            <param name="resourceFinderManager">资源查找管理器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.ResourceController.GetResource(System.String)">
            <summary>
            获取资源  /GetResource?resourceName=jquery-1.9.1.min.js 或者 /GetResource/jquery-1.9.1.min.js
            </summary>
            <param name="resourceName">资源名称，请注意此地方仅仅是判断资源名称和资源查找器里集合尾部相同的资源；</param>
            <returns>返回指定内嵌资源文件文本</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Host.RouteProvider">
            <summary>
            路由注册，系统框架会自动注册此路由
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IRouteProvider">
            <summary>
            路由注册接口，API接口扩展如果需要注册路由，需要继承此注册类，系统框架在第一次启动时候自动进行注册
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IRouteProvider.RegisterRoutes(System.Web.Routing.RouteCollection)">
            <summary>
            注册路由
            </summary>
            <param name="routes">路由表</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IRouteProvider.Priority">
            <summary>
            优先级，优先级越高越先注册(这是由于MVC的路由框架决定的，
            因为一旦定义了多个路由，系统一旦找到了和URL匹配的路由规则，将会直接返回，而不会继续寻找后续的路由配置)
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Host.RouteProvider.RegisterRoutes(System.Web.Routing.RouteCollection)">
            <summary>
            注册接口路由设置
            </summary>
            <param name="routes"></param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Host.RouteProvider.Priority">
            <summary>
            优先级，将优先级改成最小，方便后续创建可以重写框架注册的路由
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RequestParamsDecryptResult">
            <summary>
            上送参数解密结果
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequestParamsDecryptResult.#ctor(System.Boolean,System.String,Frxs.ServiceCenter.Api.Core.RequestParams,Frxs.ServiceCenter.Api.Core.RequestParams)">
            <summary>
            构造函数里必须穿是否成功和解密后的字符串
            </summary>
            <param name="isSuccess">解密是否成功，解密失败返回false</param>
            <param name="message">解密是否成功消息</param>
            <param name="rawRequestParams">原始上送的参数对象</param>
            <param name="decryptedRequestParams">解密后的上送参数对象，解密后的上送参数对象，请new出一个新的上送参数对象</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestParamsDecryptResult.IsSuccess">
            <summary>
            解密是否成功
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestParamsDecryptResult.Message">
            <summary>
            解密成功或者失败返回的信息
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestParamsDecryptResult.RawRequestParams">
            <summary>
            原始上送请求参数对象
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestParamsDecryptResult.DecryptedRequestParams">
            <summary>
            解密后的上送参数对象
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IRequestDtoBinder">
            <summary>
            RequestDto参数获取绑定器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IRequestDtoBinder.Bind``1(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            绑定获取上送参数(强类型)
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionDescriptor">接口描述信息</param>
            <returns>返回上送参数data对应的RequestDto对象</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IRequestDtoBinder.Bind(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            绑定获取上送参数(弱类型)
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionDescriptor">接口描述信息</param>
            <returns>返回上送参数data对应的RequestDto对象</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ValueProviderExtensions">
            <summary>
            值提供器扩展类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ValueProviderExtensions.GetString(Frxs.ServiceCenter.Api.Core.IValueProvider,System.String,System.Func{System.String,System.String})">
            <summary>
            获取值提供器提供的值，转换成字符串
            </summary>
            <param name="valueProvider">值提供器</param>
            <param name="key">key</param>
            <param name="defaultFun">当key返回null的时候，返回默认的指定值，委托入参为：key值</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ILogger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILogger.IsEnabled(Frxs.ServiceCenter.Api.Core.LogLevel)">
            <summary>
            是否启用日志记录器(针对某一级别的)
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILogger.Log(Frxs.ServiceCenter.Api.Core.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            记录日志
            </summary>
            <param name="level">记录等级</param>
            <param name="exception">错误异常</param>
            <param name="format">格式化字符串，如：服务器错误{0}......</param>
            <param name="args">格式化字符参数值</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ILogger`1">
            <summary>
            泛型日志记录器，可以省略掉ILoggerFactory接口实现
            </summary>
            <typeparam name="TServiceType"></typeparam>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ILoggerExtensions">
            <summary>
            ILogger扩展类，方便日志的使用
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Debug(Frxs.ServiceCenter.Api.Core.ILogger,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Information(Frxs.ServiceCenter.Api.Core.ILogger,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Warning(Frxs.ServiceCenter.Api.Core.ILogger,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Error(Frxs.ServiceCenter.Api.Core.ILogger,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Fatal(Frxs.ServiceCenter.Api.Core.ILogger,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Debug(Frxs.ServiceCenter.Api.Core.ILogger,System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Information(Frxs.ServiceCenter.Api.Core.ILogger,System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Warning(Frxs.ServiceCenter.Api.Core.ILogger,System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Error(Frxs.ServiceCenter.Api.Core.ILogger,System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Error(Frxs.ServiceCenter.Api.Core.ILogger,System.Exception)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Fatal(Frxs.ServiceCenter.Api.Core.ILogger,System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Debug(Frxs.ServiceCenter.Api.Core.ILogger,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Information(Frxs.ServiceCenter.Api.Core.ILogger,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Warning(Frxs.ServiceCenter.Api.Core.ILogger,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Error(Frxs.ServiceCenter.Api.Core.ILogger,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Fatal(Frxs.ServiceCenter.Api.Core.ILogger,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Debug(Frxs.ServiceCenter.Api.Core.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Information(Frxs.ServiceCenter.Api.Core.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Warning(Frxs.ServiceCenter.Api.Core.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Error(Frxs.ServiceCenter.Api.Core.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.Fatal(Frxs.ServiceCenter.Api.Core.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerExtensions.FilteredLog(Frxs.ServiceCenter.Api.Core.ILogger,Frxs.ServiceCenter.Api.Core.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="level"></param>
            <param name="exception"></param>
            <param name="format"></param>
            <param name="objects"></param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ILoggerFactory">
            <summary>
            日志记录器创建工厂
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ILoggerFactory.CreateLogger(System.Type)">
            <summary>
            创建日志记录器
            </summary>
            <param name="type">任意的类型；不会影响到ILogger的创建；仅仅作为日志记录异常类</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.LogLevel">
            <summary>
            记录等级
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.LogLevel.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.LogLevel.Information">
            <summary>
            消息
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.LogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.LogLevel.Fatal">
            <summary>
            失败
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.NullLogger">
            <summary>
            默认的空的记录器
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.NullLogger._instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullLogger.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullLogger.IsEnabled(Frxs.ServiceCenter.Api.Core.LogLevel)">
            <summary>
            日志记录级别
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullLogger.Log(Frxs.ServiceCenter.Api.Core.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            输出日志
            </summary>
            <param name="level"></param>
            <param name="exception"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.NullLogger.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.NullLoggerFactory">
            <summary>
            空的默认日志创建工厂类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullLoggerFactory.CreateLogger(System.Type)">
            <summary>
            创建日志
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoBinder">
            <summary>
            默认的上送参数绑定器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoBinder.#ctor">
            <summary>
            默认的上送参数绑定器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoBinder.Bind``1(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            绑定获取上送参数对象
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionDescriptor">接口描述信息</param>
            <returns>获取成功就返回上送的对象</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoBinder.Bind(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            绑定上送参数与实体对象
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionDescriptor">接口描述信息</param>
            <returns>获取成功就返回上送的对象(弱类型)</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoBinder.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IMessage">
            <summary>
            系统框架消息队列接口
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IMessage.Send``1(System.String,``0)">
            <summary>
            发送消息到消息队列
            </summary>
            <param name="messageLable">消息队列消息标签</param>
            <param name="messageBody">消息主体</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.MessagePriority">
            <summary>
            消息优先级
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.MessagePriority.Highest">
            <summary>
            最高
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.MessagePriority.VeryHigh">
            <summary>
            非常高
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.MessagePriority.High">
            <summary>
            高
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.MessagePriority.AboveNormal">
            <summary>
            高于正常级别
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.MessagePriority.Normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.MessagePriority.Low">
            <summary>
            低
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.MessagePriority.VeryLow">
            <summary>
            非常低
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.MessagePriority.Lowest">
            <summary>
            最低
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.NullMessage">
            <summary>
            默认实现一个空的消息发送实现
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.NullMessage._instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullMessage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullMessage.Send``1(System.String,``0)">
            <summary>
            默认实现什么也不做
            </summary>
            <param name="messageLable"></param>
            <param name="messageBody"></param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.NullMessage.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.PageListRequestDto">
            <summary>
            列表页请求参数基类，基于列表页的请求DTO，请继承此基类（非强制性）
            此分页请求基类，默认上送的PageSize=10,PageIndex=1，在实现类里可以
            重写BeforeValid()方法来更改框架默认设置的值
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.PageListRequestDto.BeforeValid">
            <summary>
            给个机会在Valid()方法调用前，先整理下当前页码和页容量
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.PageListRequestDto.Valid">
            <summary>
            校验下参数是否正确
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.PageListRequestDto.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.PageListRequestDto.PageSize">
            <summary>
            页容量
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.PageListRequestDto.SortBy">
            <summary>
            排序字段
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RequestDtoValidatorResult">
            <summary>
            验证返回结果对象
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequestDtoValidatorResult.#ctor(System.Collections.Generic.IEnumerable{Frxs.ServiceCenter.Api.Core.RequestDtoValidatorResultError})">
            <summary>
            初始化验证结果对象
            </summary>
            <param name="errors">验证错误集合</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestDtoValidatorResult.Success">
            <summary>
            验证成功
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestDtoValidatorResult.Errors">
            <summary>
            错误信息集合;如果为没有错误，则返回一个空的错误信息集合
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestDtoValidatorResult.IsValid">
            <summary>
            是否验证成功
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Resource.CoreResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.Action_ActionNameIsNullOrString">
            <summary>
              Looks up a localized string similar to 未提供接口名称.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionBase_ArgumentNullErrorActionResult_Info">
            <summary>
              Looks up a localized string similar to 请求参数【{0}】未提交或未指定参数值.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionBase_GetRequestDto_DeserializeObject_Error">
            <summary>
              Looks up a localized string similar to 执行:{0}.GetRequestDto()方法错误，请检查客户端上送的JSON数据包格式是否正确(比如必须传入的参数未传入或者数据类型错误).
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionBase_RequestDto_Null">
            <summary>
              Looks up a localized string similar to 绑定上送业务参数失败，请检查上送Data参数JSON格式是否正确(1.JSON本身格式是否正确，2.参数的数据类型是否正确，3.请查看详细错误日志).
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionBase_RequiredUserIdAndUserName_Error">
            <summary>
              Looks up a localized string similar to 此次操作需要提交操作用户ID(UserId)和用户名(UserName)，请确保上传的参数包(Data)有UserId和UserName参数.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionBase_ValidUserIdAndUserNameFun_Null_Error">
            <summary>
              Looks up a localized string similar to ValidUserIdAndUserNameFun未定义.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionConfigCollection_Add_Exists">
            <summary>
              Looks up a localized string similar to 重复添加接口配置，接口名称：{0}.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionConfigCollection_Add_Version_NotNull">
            <summary>
              Looks up a localized string similar to 版本号不能为空.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionRequestHander_AppKeyAuthentication">
            <summary>
              Looks up a localized string similar to 全局(IAuthentication)校验未通过，系统拒绝访问.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionRequestHander_AppKeyAuthentication_Attribute">
            <summary>
              Looks up a localized string similar to 接口校验失败.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionRequestHander_NotFoundAction">
            <summary>
              Looks up a localized string similar to 未找到Action接口:{0}.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionRequestHander_WhiteIpRefuse">
            <summary>
              Looks up a localized string similar to 接口系统设置了白名单，但是您的IP地址【{0}】不在白名单之列，系统拒绝访问.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ActionRequestHanderActionResult_Error">
            <summary>
              Looks up a localized string similar to 接口出现异常：错误描述：{0}，详情：{1}.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.DECRYPT_REQUEST_FAIL">
            <summary>
              Looks up a localized string similar to 上送参数解密失败.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.DefaultActionActivator_TypeError">
            <summary>
              Looks up a localized string similar to 类型：{0}错误，ActionType必须继承ActionBase抽象类.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.DefaultActionFactory_ActionNameIsNullOrString">
            <summary>
              Looks up a localized string similar to 未提供接口名称.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.DefaultActionFactory_ActionNameNotFound">
            <summary>
              Looks up a localized string similar to 未找到Action接口:{0}.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.DefaultActionInvoker_ActionExecuteError">
            <summary>
              Looks up a localized string similar to 接口方法:{0} , 类型：{1}，执行Execute()方法错误，详细信息：{2}.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.DefaultActionSelector_FoundMoreThenOneActionName">
            <summary>
              Looks up a localized string similar to 加载接口错误，同名接口出现版本重复，请根据错误信息检查接口名称。接口名称：{0},接口类型：{1}，冲突接口类型：{2}，版本号：{3}.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.DefaultActionValidator_EnableAjaxRequest">
            <summary>
              Looks up a localized string similar to Action:{0},类型：{1},系统不允许Ajax请求.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.DefaultActionValidator_HttpMethod">
            <summary>
              Looks up a localized string similar to Action:{0}，类型：{1}，使用http请求方式错误，请使用：HTTP-{2}方式提交数据.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.DefaultActionValidator_IsObsolete">
            <summary>
              Looks up a localized string similar to Action:{0}，类型：{1}，已经被注销，无法继续提供接口服务.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.DefaultActionValidator_RequireHttps">
            <summary>
              Looks up a localized string similar to Action:{0}，类型：{1}，需要使用https连接进行请求.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ErrorAction_ErrInfo">
            <summary>
              Looks up a localized string similar to 错误消息：{0}，详细异常：{1}.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.GreaterThanAttribute_Error">
            <summary>
              Looks up a localized string similar to 属性值必须大于：{0}.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.GreaterThanOrEqualAttribute_Error">
            <summary>
              Looks up a localized string similar to 属性值必须大于等于：{0}.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.InAttribute_Error">
            <summary>
              Looks up a localized string similar to 值取值范围为:{0}.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.LessThanAttribute_Error">
            <summary>
              Looks up a localized string similar to 属性值必须小于：{0}.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.ResponseFormatAttribute_ResponseFormat_Error">
            <summary>
              Looks up a localized string similar to Action:{0}，类型：{1}，输出请求方式错误，请使用：{2}方式返回数据.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.RoutePublisher_ForbiddenCharacter">
            <summary>
              Looks up a localized string similar to 接口：{0} 特性路由不能包含{1}或者{2}字符.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.RoutePublisher_RouteAdded">
            <summary>
              Looks up a localized string similar to 已经添加了特性路由：{0}，当前接口：{1}({2})，冲突接口：{3}({4}).
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Resource.CoreResource.View_Not_Exists">
            <summary>
              Looks up a localized string similar to 未找到任何APi接口视图模板，已经搜索路径：{0}{1}.
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RoutePublisher">
            <summary>
            路由规则发布器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RoutePublisher.RegisterRoutes(Frxs.ServiceCenter.Api.Core.ITypeFinder,Frxs.ServiceCenter.Api.Core.IActionSelector,System.Web.Routing.RouteCollection)">
            <summary>
            批量注册所有实现IRouteProvider接口的路由规则
            </summary>
            <param name="typeFinder">类型查找器</param>
            <param name="actionSelector">接口查找器</param>
            <param name="routes">MVC全局静态路由表</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.AndroidSdkCodeGenerator">
            <summary>
            安卓客户端SDK开发包生成器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AndroidSdkCodeGenerator.CreateTypeMapping">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AndroidSdkCodeGenerator.GeneratorRequest(Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            
            </summary>
            <param name="actionDescriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AndroidSdkCodeGenerator.GeneratorResponse(Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            
            </summary>
            <param name="actionDescriptor"></param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.AndroidSdkCodeGenerator.Language">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultCodeGeneratorFactory">
            <summary>
            SDK代码输出器创建工厂
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ISdkCodeGeneratorFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ISdkCodeGeneratorFactory.Create(System.String)">
            <summary>
            创建客户端SDK输出器工厂
            </summary>
            <param name="language">语言(CSharp,JAVA,PHP,Android)</param>
            <returns></returns>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.DefaultCodeGeneratorFactory._typeFinder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultCodeGeneratorFactory.#ctor(Frxs.ServiceCenter.Api.Core.ITypeFinder)">
            <summary>
             SDK代码输出器创建工厂
            </summary>
            <param name="typeFinder">类型查找器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultCodeGeneratorFactory.Create(System.String)">
            <summary>
            创建SDK代码生成器实例
            </summary>
            <param name="language">语言(CSharp,JAVA,PHP,Android)</param>
            <returns>SDK输出器实例，如果未找到则返回null，注意调用的时候判断null情况</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.CSharpSdkCodeGenerator">
            <summary>
            C#客户端SDK生成器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CSharpSdkCodeGenerator.CreateTypeMapping">
            <summary>
            转换属性输出类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CSharpSdkCodeGenerator.CreateUsingBlock(Frxs.ServiceCenter.Api.Core.IActionDescriptor,System.Text.StringBuilder)">
            <summary>
            创建using代码块
            </summary>
            <param name="actionDescriptor">接口描述对象</param>
            <param name="codeBlockStringBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CSharpSdkCodeGenerator.GetActionName(Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            接口名称
            </summary>
            <param name="actionDescriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CSharpSdkCodeGenerator.GeneratorRequest(Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            生成C#请求对象类
            </summary>
            <param name="actionDescriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CSharpSdkCodeGenerator.GeneratorResponse(Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            生成C#返回对象类
            </summary>
            <param name="actionDescriptor"></param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.CSharpSdkCodeGenerator.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Base32">
            <summary>
              This class is based on the Base32 class from DC# 0.31
              All credits to Jonathan Bindel.</summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Base32.#ctor">
            <summary>
              Solo constructor is private to prevent external instantiation of this class</summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Base32.Encode(System.Byte[])">
            <summary>
              Encode a buffer using the default options</summary>
            <param name="bytes">
              The buffer (required).</param>
            <returns>
              An encoded string that holds the contents of the inputs</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Base32.Decode(System.String)">
            <summary>
              Decode a Base32 string into a byte array</summary>
            <param name="base32">
              The Base32 string (required)</param>
            <returns>
              The decoded byte array</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Base64">
            <summary>
            Base64加密解密
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Base64.Encrypt(System.String)">
            <summary>
            Base64加密；默认使用UTF-8编码
            </summary>
            <param name="input">需要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Base64.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <param name="encode">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Base64.Decrypt(System.String)">
            <summary>
            Base64解密；默认使用UTF-8解码
            </summary>
            <param name="input">需要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Base64.Decrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="input">需要解密的字符串</param>
            <param name="encode">字符的编码</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DES3">
            <summary>
            3DES加密解密类(编码使用UTF-8)
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.DES3.IV">
            <summary>
            加密矢量
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DES3.Encrypt(System.String,System.String)">
            <summary>
            3DES加密
            </summary>
            <param name="key">加密key(24字符)</param>
            <param name="content">待机密明文</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DES3.Decrypt(System.String,System.String)">
            <summary>
            3DES解密
            </summary>
            <param name="key">解密key（24字符）</param>
            <param name="encryptString">待解密密文</param>
            <returns>解密失败会返回null，调用请注意判断</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DES">
            <summary>
            DES加密解密类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DES.Encrypt(System.String,System.String)">
             <summary> 
             DES加密 
             </summary> 
            <param name="key">加密key(密钥为8位长度)</param>
             <param name="content"></param> 
             <returns></returns> 
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DES.Decrypt(System.String,System.String)">
            <summary> 
            DES解密 
            </summary> 
            <param name="key">解密key(密钥为8位长度)</param>
            <param name="encryptString">密文</param> 
            <returns></returns> 
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DynamicCompiledDependencyRegistarManager">
            <summary>
            动态编译外部实现IDynamicCompiledDependencyRegistar接口的文件，并且注册
            外部实现的类文件，请不要带有参数的构造函数
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DynamicCompiledDependencyRegistarManager.Registar(System.String)">
            <summary>
            动态编译外部类
            </summary>
            <param name="sourceFilePath">
            待动态编译的.net类库文件
            编译文件需要引用的dll名称（dll文件在host情况下，请放置于bin目录，其他防止于根目录即可）
            系统已经默认注册了当前程序域bin目录所在文件夹的所有dll
            </param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.EnumDescriptor">
            <summary>
            枚举描述对象
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.EnumDescriptor.Key">
            <summary>
            枚举数字值
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.EnumDescriptor.Value">
            <summary>
            枚举字字符串值
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.EnumDescriptor.Description">
            <summary>
            枚举描述对象（对应于枚举特性标签System.ComponentModel.Description）
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IActionDescriptor">
            <summary>
            获取接口描述信息
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.ActionName">
            <summary>
            接口名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.Cache">
            <summary>
            接口缓存特性
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.ActionType">
            <summary>
            接口类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.RequestDtoType">
            <summary>
            上送参数类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.ResponseDtoType">
            <summary>
            下送对象类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.AuthorName">
            <summary>
            接口作者
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.Description">
            <summary>
            接口描述
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.GroupName">
            <summary>
            接口分组名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.EnableAjaxRequest">
            <summary>
            接口是否允许AJAX访问
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.EnableRecordApiLog">
            <summary>
            是否允许记录此接口访问记录
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.CanPackageToSdk">
            <summary>
            是否允许打包到SDK
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.ActionFilters">
            <summary>
            接口筛选器集合
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.Authentications">
            <summary>
            获取接口授权，签名校验
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.Route">
            <summary>
            特性路由器
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.HttpMethod">
            <summary>
            允许请求接口类型；POST,GET
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.IsObsolete">
            <summary>
            接口是否过期
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.AllowAnonymous">
            <summary>
            是否不需要校验用户
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.RequiredUserIdAndUserName">
            <summary>
            是否需要校验上送的UserId和UserName
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.RequireHttps">
            <summary>
            是否需要https请求
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.Version">
            <summary>
            接口版本
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.DataSignatureTransmission">
            <summary>
            是否走IApiSecurity加解密流程
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IActionDescriptor.UnloadCacheKeys">
            <summary>
            自动移除的缓存匹配键
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IDynamicCompiledDependencyRegistar">
            <summary>
            动态编译外部的CS类接口，外部类不要包含在程序集里（属性设置成内容或者无）
            目的：有时候需要动态注册一些配置；有些配置比较复杂，需要使用动态的.NET代码，
            因此设计此接口，允许框架在加载的时候，动态生成程序集，加载实现此接口的类型，动态注册
            注意此接口，接口框架并不会自动搜索（因为实现此类的文件都是以文件的访问放置于服务器的，方便正式环境下手工修改配置）
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IDynamicCompiledDependencyRegistar.Register">
            <summary>
            动态注册一些配置操作
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Localizer">
            <summary>
            语言包读取委托
            </summary>
            <param name="resourceKey">语言包键(key)</param>
            <param name="defaultValue">指定语言包键不存在，返回默认值</param>
            <returns>返回指定键的语言包</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor">
            <summary>
            使用反射来获取action描述信息
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor._actionConfig">
            <summary>
            保存接口版本
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.#ctor(System.Type)">
            <summary>
            action描述信息
            </summary>
            <param name="actionType">实现IAction类型的类类型</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.GetCustomAttribute``1">
            <summary>
            获取指定的特性信息
            </summary>
            <typeparam name="T">继承自Attribute的类型</typeparam>
            <returns>获取指定类型的特性对象</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.GetCustomAttributes``1">
            <summary>
            获取实现了某个接口或者抽象类的所有特性类
            </summary>
            <typeparam name="T">查找继承与T的所有特性类</typeparam>
            <returns>找不指定类型，返回一个空的集合</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.ActionType">
            <summary>
            当前接口类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.RequestDtoType">
            <summary>
            上送参数对象类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.ResponseDtoType">
            <summary>
            下送数据对象类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.ActionFilters">
            <summary>
            获取定义在当前Action类型上面的所有AOP拦截特性集合
            </summary>
            <returns>返回接口定义的所有拦截器特性,可以多次定义拦截器</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.Authentications">
            <summary>
            获取单个接口授权，签名校验
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.HttpMethod">
            <summary>
            接口支持的http方式POST/GET；在为空的情况下，支持2种提交模式
            优先级为：0.外部自定义配置，1.接口自身配置，2.全局配置
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.RequireHttps">
            <summary>
            是否需要https安全连接
            优先级为：1.外部自定义配置，2.接口自身配置
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.IsObsolete">
            <summary>
            接口是否已经取消
            优先级为：1.外部自定义配置，2.接口自身配置
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.Version">
            <summary>
            当前接口版本
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.Description">
            <summary>
            接口描述信息
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.GroupName">
            <summary>
            分组名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.AuthorName">
            <summary>
            接口作者是谁
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.Cache">
            <summary>
            获取缓存特性,请注意null值判断
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.UnloadCacheKeys">
            <summary>
            待移除的缓存匹配键
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.RequiredUserIdAndUserName">
            <summary>
            是否需要判断当前操作用户ID和用户名是否未空
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.EnableAjaxRequest">
            <summary>
            是否允许AjaxRequest请求此接口
            优先级为：1.外部自定义配置，2.接口自身的EnableAjaxRequestAttribute标注，3.全局配置
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.EnableRecordApiLog">
            <summary>
            是否允许记录日志
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.CanPackageToSdk">
            <summary>
            是否允许打包到SDK
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.DataSignatureTransmission">
            <summary>
            是否走IApiSecurity加解密流程
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.AllowAnonymous">
            <summary>
            是否允许匿名访问
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.ActionName">
            <summary>
            如果接口定义了ActionNameAttribute特性安装特性指定的接口名称，否则安装类名称去掉Action结尾作为接口名称 
            注意：忽略大小写
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ReflectedActionDescriptor.Route">
            <summary>
            特性路由器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IActionDescriptorExtensions">
            <summary>
            返回类型的接口类型描述转
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionDescriptorExtensions.GetActionDescriptor(Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            获取actionDescriptor对象
            </summary>
            <param name="actionDescriptor"></param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionDescriptor">
            <summary>
            具体实现已移到ReflectedActionDescriptor类实现
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionDescriptor._actionFilterAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionDescriptor.#ctor(Frxs.ServiceCenter.Api.Core.IActionDescriptor)">
            <summary>
            接口描述对象
            </summary>
            <param name="actionDescriptor">接口描述对象</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionDescriptor.Equals(Frxs.ServiceCenter.Api.Core.ActionDescriptor)">
            <summary>
            重写接口是否相等(接口名称+接口版本一致就认定接口描述一致)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionDescriptor.ToString">
            <summary>
            重写下ToString()，返回定制的信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.ActionType">
            <summary>
            接口类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.RequestDtoType">
            <summary>
            上送参数类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.ResponseDtoType">
            <summary>
            下送数据对象类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.ActionFilters">
            <summary>
            接口定义的所有特性筛选器
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.Authentications">
            <summary>
            获取接口校验，签名
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.HttpMethod">
            <summary>
            允许的请求类型比如：POST,GET
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.RequireHttps">
            <summary>
            是否需要https请求
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.IsObsolete">
            <summary>
            接口是否过期或者取消
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.AllowAnonymous">
            <summary>
            是否无需校验身份
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.Version">
            <summary>
            接口版本
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.Description">
            <summary>
            接口描述
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.GroupName">
            <summary>
            分组名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.AuthorName">
            <summary>
            接口作者
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.Cache">
            <summary>
            接口缓存特性
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.Route">
            <summary>
            特性路由器
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.UnloadCacheKeys">
            <summary>
            待移除的缓存匹配键
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.RequiredUserIdAndUserName">
            <summary>
            是否需要校验上送的UserId和UserName
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.EnableAjaxRequest">
            <summary>
            是否允许AJAX请求
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.EnableRecordApiLog">
            <summary>
            是否允许记录日志
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.CanPackageToSdk">
            <summary>
            是否允许打包到SDK
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.DataSignatureTransmission">
            <summary>
            是否走IApiSecurity加解密流程
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionDescriptor.ActionName">
            <summary>
            接口名称
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionFilterBaseAttribute">
            <summary>
            IAction.Execute()方法执行前后自定义执行方法；所有自定义进行接口拦截的类，都需要继承此抽象基类，
            接口可以附加多个拦截器，按照定义的优先级先后顺序执行
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionFilterBaseAttribute.OnActionExecuting(Frxs.ServiceCenter.Api.Core.ActionExecutingContext)">
            <summary>
            执行方法前；在适当时候进行接口拦截
            </summary>
            <param name="actionExecutingContext">执行上下文</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionFilterBaseAttribute.OnActionExecuted(Frxs.ServiceCenter.Api.Core.ActionExecutedContext)">
            <summary>
            执行方法后;可以修改接口执行结果
            </summary>
            <param name="actionExecutedContext">执行上下文</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionFilterBaseAttribute.Order">
            <summary>
            执行优先级，数字越大优先级越高
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionLifeTime">
            <summary>
            接口执行的时间对象
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionLifeTime._startTime">
            <summary>
            当前请求上下文信息
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionLifeTime.#ctor(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            接口执行的时间对象，方便计算执行时间使用；会提取出RequestContext请求上下文当中的StartTime时间作为执行起始时间
            </summary>
            <param name="requestContext">当前请求上下文信息</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionLifeTime.#ctor(System.DateTime)">
            <summary>
            接口执行时间对象
            </summary>
            <param name="startTime">初始化开始时间</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionLifeTime.SetEndTime(System.DateTime)">
            <summary>
            设置结束时间
            </summary>
            <param name="endTime">结束时间</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionLifeTime.StartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionLifeTime.EndTime">
            <summary>
            结束时间，直接获取当前时间
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionLifeTime.UsedTotalMilliseconds">
            <summary>
            总共使用的毫秒数
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DllXmlDocAssembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DllXmlDocAssembly.Name">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DllXmlDoc">
            <summary>
            Dll注释XML文档根节点
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DllXmlDoc.Assembly">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DllXmlDoc.Members">
            <summary>
            类，方法，属性说明集合
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DllXmlDocMember">
            <summary>
            DLL注释文档Member集合对象
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DllXmlDocMember.Name">
            <summary>
            类，方法，属性类型名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DllXmlDocMember.Summary">
            <summary>
            注释信息
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DllXmlDocMember.Returns">
            <summary>
            返回值说明
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.AnonymousObjectExtensions">
            <summary>
            匿名对象扩展方法
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AnonymousObjectExtensions.GetAttributes(System.Object,System.Boolean,System.Boolean)">
            <summary>
            对象转化成字典类型 key:属性名称， val:属性值
            </summary>
            <param name="anonymousObject">任意对象</param>
            <param name="appendNullValueToDictionary">指示属性值为null是否添加到字典；默认true，将全部属性都添加到字典</param>
            <param name="appendEmptyValueToDictionary">指示字符串类型的属性，当字符串为空的时候，是否将属性加入到字典，默认为true，将全部属性加入到字典</param>
            <returns>返回一个字典，key值为对象属性名称，value为属性值，如果anonymousObject=null则返回一个空的字典</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AnonymousObjectExtensions.SerializeObjectToJosn(System.Object)">
            <summary>
            将任意对象转化成JSON字符串
            此方法未对循环依赖对象失败做处理；直接让其抛出异常，外部调用需要进行异常的捕捉
            </summary>
            <param name="anonymousObject">任意对象</param>
            <returns>格式化后的JSON字符串</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AnonymousObjectExtensions.CheckNullThrowArgumentNullException(System.Object,System.String)">
            <summary>
            检测对象是否未null，为null的话就直接抛出 ArgumentNullException 异常
            </summary>
            <param name="anonymousObject">所有对象</param>
            <param name="argumentName">参数名称</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AnonymousObjectExtensions.IsNull(System.Object)">
            <summary>
            对象是否未空
            </summary>
            <param name="anonymousObject">任意对象</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AnonymousObjectExtensions.NullBackDefault``1(System.Object,System.Func{``0})">
            <summary>
            如果对象为空，则返回默认指定的值，不为空返回本身
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonymousObject">任意对象</param>
            <param name="defaultFactoryFunc">当对象为空的时候，返回默认委托里的值</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AnonymousObjectExtensions.MapTo``1(System.Object,System.Boolean)">
            <summary>
            将匿名的所有对象映射到指定的对象；映射过程中，只要数据类型键可以相互转换，无需2个转换对象属性类型完全一致
            </summary>
            <typeparam name="T">指定需要转换的类型;实体对象必须带无参构造函数</typeparam>
            <param name="anonymousObject">所有的实体对象，包括匿名类型</param>
            <param name="ignoreCase">是否忽略属性名称大小写</param>
            <returns>待转换类型anonymousObject=null的时候返回null，创建T类型的时候失败也会返回null，请注意转换结果null的判断</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AnonymousObjectExtensions.MapToList``1(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            将匿名的所有对象映射到指定的对象集合
            </summary>
            <typeparam name="T">指定需要转换的类型;实体对象必须带无参构造函数</typeparam>
            <param name="anonymousObjects">待转换的对象集合</param>
            <param name="ignoreCase">是否忽略属性名称大小写</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AnonymousObjectExtensions.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            执行对象中的某个方法
            </summary>
            <param name="anonymousObject">任意对象</param>
            <param name="methodName">方法名称(注意区分大小写)</param>
            <param name="parameters">方法参数</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs">
            <summary>
            API访问记录器参数类
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.RequestStartTime">
            <summary>
            Action执行开始时间
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.RequestEndTime">
            <summary>
            Action执行结束时间，直接获取当前时间
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.RequestUsedTotalMilliseconds">
            <summary>
            Action执行总共使用的毫秒数
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.HttpMethod">
            <summary>
            客户端请求方式
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.Ip">
            <summary>
            客户端IP地址
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.RequestData">
            <summary>
            客户端请求参数包
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.ResponseData">
            <summary>
            服务器输出去数据包
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.ResponseFormat">
            <summary>
            输出格式xml/json/view
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.UserId">
            <summary>
            当前操作用户ID
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.UserName">
            <summary>
            当前操作用户名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.ActionDescriptor">
            <summary>
            当前操作接口描述
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs.RequestParams">
            <summary>
            上送的参数
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DllXmlDocMethodParam">
            <summary>
            方法参数对象说明
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DllXmlDocMethodParam.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionResultCacheAttribute">
            <summary>
            缓存特性；单位分钟，当接口使用此特性后，将会在入口进行缓存全局拦截ActionResult
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionResultCacheAttribute.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            缓存
            </summary>
            <param name="prefix">缓存前缀（一般管理一组相关联的缓存体系，方便联动删除）</param>
            <param name="cacheTime">缓存时间，单位：分钟，默认30天</param>
            <param name="ignoreUserIdAndUserName">
            根据上送参数对象生成缓存键的时候是否忽略上送用户ID和用户名称
            为什么要设置此开关，因为当同一业务的时候，如果客户端上送了用户ID和用户名称，那么针对同一接口将会生成2个缓存副本，
            这不是我们所期望的，我们期望同一业务的查询（上送参数一致），不同的人看到的都是相同的缓存
            默认是忽略掉当前操作用户业务参数
            </param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionResultCacheAttribute.#ctor(System.Int32)">
            <summary>
            缓存特性；单位分钟，当接口使用此特性后，将会在入口进行缓存全局拦截ActionResult
            请注意，添加修改接口不要设置缓存特性，要不Execute()方法将无法执行
            </summary>
            <param name="cacheTime">缓存时间，单位：分钟</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionResultCacheAttribute.CacheTime">
            <summary>
            缓存时间，单位：分钟
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionResultCacheAttribute.Prefix">
            <summary>
            缓存前缀，配合缓存接口：ICacheManager.RemoveByPattern(string pattern)方法使用
            也即一组相关的业务接口，可以定义相同的缓存前缀，这样在进行缓存操作的时候，可以批量同时移除相关业务缓存
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionResultCacheAttribute.IgnoreUserIdAndUserName">
            <summary>
            是否忽略上送业务参数里的用户身份信息（进行全局缓存，如果不忽略就是单独用户缓存）
            根据上送参数对象生成缓存键的时候是否忽略上送用户ID和用户名称
            为什么要设置此开关，因为当同一业务的时候，如果客户端上送了用户ID和用户名称，那么针对同一接口将会生成2个缓存副本，
            这不是我们所期望的，我们期望同一业务的查询（上送参数一致），不同的人看到的都是相同的缓存
            默认是忽略掉当前操作用户业务参数
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.AuthorAttribute">
            <summary>
            指示接口开发人员特性，方便框架自动生成文档显示说明
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AuthorAttribute.#ctor(System.String)">
            <summary>
            接口开发人员特性，增加此特性可以在文档生成的时候显示开发人员名称，便于查阅
            </summary>
            <param name="name">开发人员名称</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.AuthorAttribute.Name">
            <summary>
            开发人员名称
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionConfigItem">
            <summary>
            接口外部配置映射对象
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.CachePrefix">
            <summary>
            缓存键分组前缀(用于批量缓存清理)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.CacheTime">
            <summary>
            缓存时间,系统默认:0分钟
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.CacheKeyIgnoreUserIdAndUserName">
            <summary>
            缓存是否忽略掉点操作用户信息(系统默认:true)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.UnloadCacheKeys">
            <summary>
            需要卸载的缓存键(即接口执行完成后，会自动进行缓存键的清理，如果未配置则不清理)
            如缓存键安装正则匹配模式进行删除，即所有匹配成功的缓存键，都不会删除
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.RequireHttps">
            <summary>
            是否需要开启https连接才能请求
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.Obsolete">
            <summary>
            接口是否过期（下线，外部不能访问此即可，搜索接口的时候也会排除掉此接口）
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.EnableAjaxRequest">
            <summary>
            是否允许AJAX访问
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.HttpMethod">
            <summary>
            允许的请求访问方式，可以组合配置，如：HttpMethod.POST | HttpMethod.GET
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.AllowAnonymous">
            <summary>
            是否允许匿名访问（即全局身份校验对此接口不起作用）
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.EnableRecordApiLog">
            <summary>
            是否允许记录日志（记录器不记录此接口日志访问）
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.CanPackageToSdk">
            <summary>
            是否允许自动打包生成SDK访问类
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.RequiredUserIdAndUserName">
            <summary>
            是否需要上送userid和userName，设置为true系统将校验
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.DataSignatureTransmission">
            <summary>
            接口是否走IApiSecurity加解密流程；系统默认走加解密流程(true)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.GroupName">
            <summary>
            分组名称（方便接口归类显示）
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionConfigItem.RouteUrl">
            <summary>
            接口特性路由
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.CacheManagerExtensions">
            <summary>
            缓存扩展类
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.CacheManagerExtensions.SyncObject">
            <summary>
            Variable (lock) to support thread-safe
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CacheManagerExtensions.Get``1(Frxs.ServiceCenter.Api.Core.ICacheManager,System.String,System.Func{``0})">
            <summary>
            Get a cached item. If it's not in the cache yet, then load and cache it;
            the default cachetime is 30*24*60 minutes 30days
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="cacheManager">Cache manager</param>
            <param name="key">Cache key</param>
            <param name="acquire">Function to load item if it's not in the cache yet</param>
            <returns>Cached item</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CacheManagerExtensions.Get``1(Frxs.ServiceCenter.Api.Core.ICacheManager,System.String,System.Int32,System.Func{``0})">
            <summary>
            Get a cached item. If it's not in the cache yet, then load and cache it
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="cacheManager">Cache manager</param>
            <param name="key">Cache key</param>
            <param name="cacheTime">Cache time in minutes (0 - do not cache)</param>
            <param name="acquire">Function to load item if it's not in the cache yet</param>
            <returns>Cached item</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CacheManagerExtensions.GetList``1(Frxs.ServiceCenter.Api.Core.ICacheManager,System.String,System.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Get a cached item list. If it's not in the cache yet, then load and cache it;
            the default cachetime is 30*24*60 minutes
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="cacheManager">Cache manager</param>
            <param name="key">Cache Key</param>
            <param name="acquire">Function to load item list if it's not in the cache yet</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CacheManagerExtensions.GetList``1(Frxs.ServiceCenter.Api.Core.ICacheManager,System.String,System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Get a cached item list. If it's not in the cache yet, then load and cache it;
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="cacheManager">Cache manager</param>
            <param name="key">Cache Key</param>
            <param name="cacheTime">Cache time in minutes (0 - do not cache)</param>
            <param name="acquire">Function to load item if it's not in the cache yet</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.CacheManagerExtensions.Set(Frxs.ServiceCenter.Api.Core.ICacheManager,System.String,System.Object)">
            <summary>
            Set cache data；the default cachetime is 30*24*60 minutes
            </summary>
            <param name="cacheManager"></param>
            <param name="key">Cache Key</param>
            <param name="data">the data wait to Cached</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Caching.Impl.MemoryCacheManager">
            <summary>
            ASP.NET自带内存缓存器(系统框架自带的缓存器实现),注意使用内存缓存，需要T类型为可以序列化的类型；建议在实体类上面都加上可以序列化特性
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.MemoryCacheManager.Get``1(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.MemoryCacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            Adds the specified key and object to the cache.
            </summary>
            <param name="key">key</param>
            <param name="data">Data</param>
            <param name="cacheTime">Cache time</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.MemoryCacheManager.IsSet(System.String)">
            <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
            <param name="key">key</param>
            <returns>Result</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.MemoryCacheManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the cache
            </summary>
            <param name="key">/key</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.MemoryCacheManager.RemoveByPattern(System.String)">
            <summary>
            Removes items by pattern
            </summary>
            <param name="pattern">pattern</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.MemoryCacheManager.Clear">
            <summary>
            Clear all cache data
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Caching.Impl.MemoryCacheManager.Dispose">
            <summary>
            释放，直接释放掉所有的缓存键
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Caching.Impl.MemoryCacheManager.Cache">
            <summary>
            Cache object
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.NullCacheManager">
            <summary>
            Represents a NullCache (caches nothing)
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.NullCacheManager._instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullCacheManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullCacheManager.Get``1(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullCacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            Adds the specified key and object to the cache.
            </summary>
            <param name="key">key</param>
            <param name="data">Data</param>
            <param name="cacheTime">Cache time</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullCacheManager.IsSet(System.String)">
            <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
            <param name="key">key</param>
            <returns>Result</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullCacheManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the cache
            </summary>
            <param name="key">/key</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullCacheManager.RemoveByPattern(System.String)">
            <summary>
            Removes items by pattern
            </summary>
            <param name="pattern">pattern</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.NullCacheManager.Clear">
            <summary>
            Clear all cache data
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.NullCacheManager.Instance">
            <summary>
            返回空的缓存管理器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RequestParams">
            <summary>
            接口客户端提交的核心参数包
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestParams.AppKey">
            <summary>
            客户端ID：比如：20009等
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestParams.ActionName">
            <summary>
            从请求的信息里获取到请求的接口名称，比如：API.Help
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestParams.Format">
            <summary>
            客户端指定接口服务器返回数据的格式化方式 XML/JSON/VIEW
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestParams.Data">
            <summary>
            上传的JSON数据；就算是不需上送参数，也需要上送"{}"字符串
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestParams.TimeStamp">
            <summary>
            上传时间戳（服务器与服务端到时候进行时间比对）;格式为：yyyy/MM/dd HH:mm:ss
            应用场景：比如，一个接口如果不加这个时间戳的时候，只要有人截获了提交参数以及知道了URL
            那么截获访问消息的人，完全可以重复提交接口数据，这尤其在针对数据操作的时候，影响比较大，
            因此加上次时间戳，让调用客户端上送客户端时间，然后服务器比对时间戳与服务器时间，
            如果相差时间间隔比较大（比如1分钟），那么不允许提交
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestParams.Version">
            <summary>
            接口版本（在有多个接口名称一致的情况下；可以根据指定接口版本来选择特定的版本接口）
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestParams.Sign">
            <summary>
            客户端数据签名（具体的数据签名方式需要在实际业务场景里约定）
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.EnableAjaxRequestAttribute">
            <summary>
            标注接口是否允许Ajax形式访问，默认true
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.EnableAjaxRequestAttribute.#ctor(System.Boolean)">
            <summary>
            是否允许AJAX访问
            </summary>
            <param name="enableAjaxReques">默认true，允许访问</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.EnableAjaxRequestAttribute.ValidForRequest(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            校验是否有权限进行Ajax请求访问
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.EnableAjaxRequestAttribute.EnableAjaxRequest">
            <summary>
            是否允许Ajax访问
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.HttpRequestBaseExtensions">
            <summary>
            HttpRequest扩展类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpRequestBaseExtensions.IsAjaxRequest(System.Web.HttpRequestBase)">
            <summary>
            判断一个HttpRequest是否是AJAX请求
            </summary>
            <param name="request">当前httpRequest</param>
            <returns>返回是否是AJAX请求</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpRequestBaseExtensions.IsUrlLocalToHost(System.Web.HttpRequestBase,System.String)">
            <summary>
            将URL地址转换成本地地址
            </summary>
            <param name="request">当前httpRequest</param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpRequestBaseExtensions.GetClientIp(System.Web.HttpRequestBase)">
            <summary>
            获取客户端IP地址；如果都未找到就会返回string.empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpRequestBaseExtensions.LocalAddr(System.Web.HttpRequestBase)">
            <summary>
            获取服务器地址
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IRequiredUserIdAndUserName">
            <summary>
            RequestDto如果继承了此接口，那么就要校验请求包Data里是否包含了userId和UserName参数
            此接口仅仅是个空接口，仅做标识，用于框架判断上送参数用
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.LanguageResourceManager">
            <summary>
            ACTION自定义接口使用的语言包对象管理器
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.LanguageResourceManager._languageResourceKeyValues">
            <summary>
            用于缓存，忽略大小写
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.LanguageResourceManager.#ctor(System.String)">
            <summary>
            ACTION自定义接口使用的语言包对象管理器
            </summary>
            <param name="languageResourcePath">语言包路径</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.LanguageResourceManager.GetLanguageResource(System.String)">
            <summary>
            获取用户自定义的语言资源包
            </summary>
            <param name="languageResourcePath">语言资源包路径</param>
            <returns>获取xml语言包对象，当语言包路径不存在情况下，返回null</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.LanguageResourceManager.Init(Frxs.ServiceCenter.Api.Core.LanguageResource)">
            <summary>
            初始化语言包对象获取对应的字典
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.LanguageResourceManager.GetLanguageResourceValue(System.String,System.String)">
            <summary>
            完整的键值名称
            </summary>
            <param name="fullKey">资源键：完整的键名称，比如：Api.Core.System.ERR_01</param>
            <param name="defaultValue">资源文件不存在对应的键，就直接返回defaultValue</param>
            <returns>从字典里返回指定键的值，不存在就返回默认值defaultValue</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.LanguageResourceManager.Instance">
            <summary>
            获取接口语言包管理对象
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.LanguageResource">
            <summary>
            接口项目语言包序列化类
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.LanguageResource.Actions">
            <summary>
            所有的接口集合
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.LanguageResourceAction">
            <summary>
            语言包接口信息
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.LanguageResourceAction.Name">
            <summary>
            接口名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.LanguageResourceAction.Items">
            <summary>
            接口类里使用的语言包键值对信息
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.LanguageResourceActionItem">
            <summary>
            语言包键值对
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.LanguageResourceActionItem.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.LanguageResourceActionItem.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.LanguageResourceExtensions">
            <summary>
            语言包对象扩展类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.LanguageResourceExtensions.SerializerToXmlFile(Frxs.ServiceCenter.Api.Core.LanguageResource,System.String)">
            <summary>
            序列化成XML文件
            </summary>
            <param name="languageResource">本地语言资源包对象</param>
            <param name="xmlSavePath">保存成XML路径</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.LanguageResourceExtensions.SerializerToXmlStr(Frxs.ServiceCenter.Api.Core.LanguageResource,System.String)">
            <summary>
            序列化成XML字符串
            </summary>
            <param name="languageResource">本地语言资源包对象</param>
            <param name="en">编码 如GBK,UTF-8</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RequestDtoValidatorResultError">
            <summary>
            请求参数业务逻辑验证返回错误信息对象
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequestDtoValidatorResultError.#ctor(System.String,System.String)">
            <summary>
            请求参数业务逻辑验证返回错误信息对象
            </summary>
            <param name="memberName">参数名称</param>
            <param name="errorMessage">错误消息</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequestDtoValidatorResultError.#ctor(System.String)">
            <summary>
            默认错误信息为:参数错误
            </summary>
            <param name="memberName">参数名称</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestDtoValidatorResultError.MemberName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestDtoValidatorResultError.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RSA">
            <summary>
            RSA加密解密类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RSA.GenerateKeys">
            <summary>
            生成密钥对;
             array[0] 私钥
             array[1] 公钥
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RSA.Encrypt(System.String,System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="xmlPublicKey">公钥</param>
            <param name="content">待加密的数据</param>
            <returns>RSA公钥加密后的数据</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RSA.Decrypt(System.String,System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="xmlPrivateKey">私钥</param>
            <param name="strDecryptString">待解密的数据</param>
            <returns>解密后的结果</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.MD5">
            <summary>
            MD5数据签名
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.MD5.Encrypt(System.String)">
            <summary>
            MD5摘要签名
            </summary>
            <param name="content">待签名的文本</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.MD5.Encrypt(System.IO.Stream)">
            <summary>
            对数据流进行签名
            </summary>
            <param name="stream">待签名的数据流</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.SequentialGUID">
            <summary>
            有序GUID生成器；用于有可能需要排序保存的场景下使用
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SequentialGUID.UuidCreateSequential(System.Guid@)">
            <summary>
            导入系统提供输出有序GUID方法
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SequentialGUID.GenerateSequentialGuid">
            <summary>
            创建一个有序的GUID
            </summary>
            <returns>返回一个有序的GUID</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SequentialGUID.GenerateSequentialGuids(System.Int32)">
            <summary>
            获取一批有序GUID
            </summary>
            <param name="n">返回多少条有序GUID值</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Singleton">
            <summary>
            单例集合类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Singleton.#cctor">
            <summary>
            初始化一下静态字典
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Singleton.allSingletons">
            <summary>
            定义一个静态的全局字典
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Singleton.AllSingletons">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Singleton`1">
            <summary>
            泛型单列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Singleton`1._instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Singleton`1.Instance">
            <summary>
            获取单列
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.SingletonList`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SingletonList`1.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SingletonList`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.SingletonDictionary`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SingletonDictionary`2.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SingletonDictionary`2.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.SystemOptionsManager">
            <summary>
            框架系统初始化管理
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.SystemOptionsManager._systemOptions">
            <summary>
            静态系统设置，用于全局缓存
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SystemOptionsManager.Current">
            <summary>
            获取或者设置系统设置
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoValidator">
            <summary>
            系统框架默认RequestDto对象属性校验器，完全兼容：System.ComponentModel.DataAnnotations 命名空间特性验证
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultRequestDtoValidator.Valid(Frxs.ServiceCenter.Api.Core.RequestDtoBase,Frxs.ServiceCenter.Api.Core.ActionDescriptor)">
            <summary>
            验证实体数据正确性，返回RequestDtoValidatorResult对象
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewMediaTypeFormatter">
            <summary>
            IAction接口文档生成器；如果是第三方插件内嵌资源视图文件，
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IMediaTypeFormatter">
            <summary>
            所有格式化器必须继承此抽象类；具体实现类里只要重写方法SerializedActionresultToString()即可
            由于系统自带的XML格式化无法针对匿名对象实现格式化，所以需要在实现类里自己去使用递归方式去探测每一个属性对象，然后进行格式化
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IMediaTypeFormatter.SerializedActionResultToString(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.ActionResult)">
            <summary>
            对象资源格式化成字符串
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionResult">ActionResult对象</param>
            <returns>返回特定的ActionResult对象序列化字符串</returns>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewMediaTypeFormatter.ManifestResourceViewSearchPath">
            <summary>
            内嵌资源路径规则
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewMediaTypeFormatter._viewFinderManager">
            <summary>
            程序集内嵌资源实体查找器
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewMediaTypeFormatter.ViewLocationFormats">
            <summary>
            视图搜索路径地址：如：~/views/{0}.aspx
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewMediaTypeFormatter.Namespace">
            <summary>
            接口框架命名空间
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewMediaTypeFormatter.NewLine">
            <summary>
            换行符
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewMediaTypeFormatter.#ctor(Frxs.ServiceCenter.Api.Core.IResourceFinderManager,System.Collections.Generic.IEnumerable{Frxs.ServiceCenter.Api.Core.ViewEngine.IViewEngine})">
            <summary>
            初始化下默认的搜索地址
            </summary>
            <param name="viewFinderManager">资源查找器</param>
            <param name="apiViewEngines">视图引擎</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewMediaTypeFormatter.GetSearchedViewPath(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            返回待搜索列表
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <returns>返回当前接口需要搜索的资源</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewMediaTypeFormatter.GetViewSource(Frxs.ServiceCenter.Api.Core.RequestContext,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            根据上下文获取当前接口视图源代码
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="searchedViewPaths">待搜索的路径集合</param>
            <param name="supportedExtension">筛选出后缀，如：.cshtml</param>
            <returns>返回接口视图源文件；注意：在未找到对应实体源文件，会抛出异常</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewMediaTypeFormatter.SerializedActionResultToString(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.ActionResult)">
            <summary>
            搜索视图，读取视图，然后执行视图，返回执行后的视图内容
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionResult">IAction执行结果</param>
            <returns>返回格式化后的字符串</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.SeparatorStringParse">
            <summary>
            根据字符串或者匿名对象，获取名值对字典信息
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.SeparatorStringParse._attributes">
            <summary>
            保存字典信息
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SeparatorStringParse.#ctor(System.String)">
            <summary>
            字符串：UserId=986351;Account=dillys2013;Password=512FC49E43DE9209015318CE63B09A0A2184 拆分，改造成字典
            </summary>
            <param name="configString">输入字符串必须为，UserId=986351;Account=dillys2013;Password=512FC49E43DE9209015318CE63B09A0A2184</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SeparatorStringParse.Attributes">
            <summary>
            获取属性名值对
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ConfigurationSectionManager">
            <summary>
            自定义的web.config节点section信息
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ConfigurationSectionManager.GetSection(System.String)">
            <summary>
            自定义的web.config节点section信息
            </summary>
            <param name="sectionName">注意：区分大小写</param>
            <returns>请注意返回值有可能是null，外部调用需要注意判断</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ConfigurationSectionManager.GetSection``1(System.String)">
            <summary>
            根据Section节点名称，获取到对应配置XML文件对应的对象信息
            </summary>
            <typeparam name="T">配置对象信息</typeparam>
            <param name="sectionName">注意：区分大小写</param>
            <returns>返回配置文件节点对应的对象；有可能返回null，调用请注意判断</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ConfigurationSectionHandlerBase">
            <summary>
            所有自定义web.config文件section节点配置类，系统框架会在启动的时候会自动注册类实例到IOC容器里(外部系统无需进行注册)
            外部定义的时候，需要另外再定义个配置接口，让具体的节点处理类来实现配置接口，这样外部类可以直接使用配置接口即可，系统框架
            会自动对配置进行初始化传入
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ConfigurationSectionHandlerBase.GetNodeAttributes(System.Xml.XmlNode)">
            <summary>
            获取节点属性集合，注意键不会区分大小写
            </summary>
            <param name="node">当前node节点</param>
            <returns>返回的字典key键不区分大小写</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ConfigurationSectionHandlerBase.GetNodeAttribute(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            根据字典获取指定值
            </summary>
            <param name="nodeAttributes">数据字典</param>
            <param name="attributeName">key</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ConfigurationSectionHandlerBase.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            根据节点XML文件，创建出配置低、对象
            </summary>
            <param name="parent">当前节点对应的父节点对象</param>
            <param name="configContext">配置文件上下文</param>
            <param name="section">配置文件对应的节点XML文件</param>
            <returns>返回当前处理对象</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultActionInvoker">
            <summary>
            Action接口执行器（对Action接口进行代理封装），方便对action执行方法进行AOP横切
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IActionInvoker">
            <summary>
            Action接口执行器（Action代理封装），方便对action执行方法进行AOP横切
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionInvoker.Execute(Frxs.ServiceCenter.Api.Core.IAction)">
            <summary>
            Action执行器，通过当前action对象，调用IAction.Execute()方法进行接口执行
            </summary>
            <param name="action">IAction接口实例</param>
            <returns>ActionResult对象</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionInvoker.#ctor">
            <summary>
            默认Action激活器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionInvoker.Execute(Frxs.ServiceCenter.Api.Core.IAction)">
            <summary>
            此方法里进行更多的http条件判断
            </summary>
            <param name="action">实现IAction的实例</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultActionInvoker.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionNameAttribute">
            <summary>
            用于手工指定接口名称；如果接口类加上此特性，接口名称将会使用此特性指定的接口名称
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionNameAttribute.#ctor(System.String)">
            <summary>
            接口名称特性
            </summary>
            <param name="name">接口名称,客户端需要调用的接口名称，框架忽略大小写</param>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionNameAttribute.Name">
            <summary>
            接口名称
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionRequestHander">
            <summary>
            API接口入口类
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionRequestHander._mediaTypeFormatterFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionRequestHander.#ctor(Frxs.ServiceCenter.Api.Core.IMediaTypeFormatterFactory,Frxs.ServiceCenter.Api.Core.IActionSelector,Frxs.ServiceCenter.Api.Core.IActionFactory,Frxs.ServiceCenter.Api.Core.IActionInvoker,Frxs.ServiceCenter.Api.Core.IResponse,Frxs.ServiceCenter.Api.Core.IApiSecurity,Frxs.ServiceCenter.Api.Core.ICacheManager,System.Web.HttpContextBase,Frxs.ServiceCenter.Api.Core.IRequestParamsBinder,Frxs.ServiceCenter.Api.Core.IRequestDtoBinder)">
            <summary>
            
            </summary>
            <param name="mediaTypeFormatterFactory">格式化输出器</param>
            <param name="actionSelector">接口查找器</param>
            <param name="actionFactory">创建创建器</param>
            <param name="actionInvoker">接口执行器</param>
            <param name="response">接口输出器</param>
            <param name="apiSecurity">接口加密解密</param>
            <param name="cacheManager">缓存器</param>
            <param name="httpContext">当前http请求上下文</param>
            <param name="requestDtoBinder">业务参数绑定器</param>
            <param name="requestParamsBinder">上送参数绑定器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionRequestHander.Execute">
            <summary>
            API框架入口函数
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionResult`1">
            <summary>
            强类型的action执行返回数据，系统框架会直接以XML或者JSON序列化，输出给客户端
            </summary>
            <typeparam name="TResponseDto">输出的数据类型</typeparam>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionResult`1._cacheTime">
            <summary>
            用于保存创建此返回对象的时间
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionResult`1.#ctor">
            <summary>
            设置下默认的缓存时间，方便前端调式
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionResult`1.Flag">
            <summary>
            相关值：ActionResultFlag枚举
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionResult`1.FlagDescription">
            <summary>
            ActionResultFlag枚举，字符串形式
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionResult`1.CachedTime">
            <summary>
            ActionResult对象被创建的时间(也即当前ActionResult被实例化的时间)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionResult`1.Data">
            <summary>
            返回的待序列化的JSON对象数据
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ActionResult`1.Info">
            <summary>
            成功返回OK，失败返回错误消息
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionResult">
            <summary>
            系统默认object类型
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionResultExtensions">
            <summary>
            ActionResult扩展类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionResultExtensions.ToJson(Frxs.ServiceCenter.Api.Core.ActionResult)">
            <summary>
            序列化成JSON格式
            </summary>
            <param name="actionResult">ActionResult对象</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionResultExtensions.ToXml(Frxs.ServiceCenter.Api.Core.ActionResult,System.String)">
            <summary>
            默认使用UTF-8进行格式化
            </summary>
            <param name="actionResult">ActionResult对象</param>
            <param name="encode">字符编码;默认使用UTF-8</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionResultFlag">
            <summary>
            所有接口返回代码枚举
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionResultFlag.SUCCESS">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionResultFlag.FAIL">
            <summary>
            系统错误
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionResultFlag.ERR_SIGN">
            <summary>
            密钥验证失败
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionResultFlag.EXCEPTION">
            <summary>
            系统错误
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionResultFlag.TIMEOUT">
            <summary>
            连接超时
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionResultFlag.DECRYPT_REQUEST_FAIL">
            <summary>
            解密上送参数失败
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ActionResultFlag.OTHER">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultActionActivator">
            <summary>
            action激活器实现
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IActionActivator">
            <summary>
            action激活器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionActivator.Create(System.Type)">
            <summary>
            通过action类型，激活action
            </summary>
            <param name="actionType">IAction类型信息</param>
            <returns>Action对象实例</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionActivator.#ctor">
            <summary>
            为了不让写日志出错（属性注入是惰性注入，因此需要进行构造函数指定一个空的日志实现）
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionActivator.Create(System.Type)">
            <summary>
            创建指定类型的 Action 对象
            </summary>
            <param name="actionType">实现ActionBase的实现类类型</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultActionActivator.Logger">
            <summary>
            使用属性注入的方式注入日志组件
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultActionFactory">
            <summary>
            默认的接口激活器实现类，内部使用了缓存提高执行效率
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IActionFactory">
            <summary>
            接口创建器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionFactory.Create(Frxs.ServiceCenter.Api.Core.RequestContext,System.String,System.String)">
            <summary>
            根据指定接口名称创建一个调用接口
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionName">接口名称，实现类尽量实现大小写不敏感</param>
            <param name="version">接口版本，实现类里需要实现，如果未指定接口版本，那么就获取接口最新版本号</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionFactory.Create(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.ActionDescriptor)">
            <summary>
            创建一个接口实例
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionDescriptor">接口描述对象</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionFactory.ReleaseAction(Frxs.ServiceCenter.Api.Core.IAction)">
            <summary>
            释放action占用的资源，框架在执行完IAction.Execute()方法后，执行此方法
            </summary>
            <param name="action">action实例</param>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.DefaultActionFactory._actionActivator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionFactory.#ctor(Frxs.ServiceCenter.Api.Core.IActionSelector,Frxs.ServiceCenter.Api.Core.IActionActivator)">
            <summary>
            方便注入新的激活器
            </summary>
            <param name="actionSelector">合法的Action接口查找器</param>
            <param name="actionActivator">需要定义接口激活器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionFactory.Create(Frxs.ServiceCenter.Api.Core.RequestContext,System.String,System.String)">
            <summary>
            根据接口名称，创建对应的接口实例
            </summary>
            <param name="requestContext">当前请求上下文信息</param>
            <param name="actionName">大小写不敏感</param>
            <param name="version">接口版本</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionFactory.Create(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.ActionDescriptor)">
            <summary>
            接口描述对象
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionDescriptor">接口描述对象</param>
            <returns>返回一个接口实例</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionFactory.ReleaseAction(Frxs.ServiceCenter.Api.Core.IAction)">
            <summary>
            释放资源直接看action继承了IDisposable;如果继承了，直接调用IDisposable.Dispose()方法
            </summary>
            <param name="action">action实例</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultActionFactory.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultActionSelector">
            <summary>
            系统默认的Action查找器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IActionSelector">
            <summary>
            用于搜索所有合法的Action接口信息
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionSelector.GetActionDescriptors(System.Boolean)">
            <summary>
            获取全部实现的接口（实现里需要实现将有移除特性ObsoleteAttribute的Action过滤掉）
            </summary>
            <param name="skipSystemActions">是否需要跳过系统接口</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionSelector.GetActionDescriptors(System.String)">
            <summary>
            根据接口名称获取接口信息
            </summary>
            <param name="actionName">接口名称，具体实现里请实现接口名称大小写不敏感</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionSelector.GetActionDescriptor(System.String,System.String)">
            <summary>
            根据接口名称获取接口描述
            </summary>
            <param name="actionName">接口名称，具体实现里请实现接口名称大小写不敏感</param>
            <param name="version">接口版本,如果不指定版本号，请实现类里实现返回版本号最大的接口描述对象</param>
            <returns>返回接口描述，如果不存在则返回null</returns>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.DefaultActionSelector.CachedActionDescriptors">
            <summary>
            缓存所有的action接口，便于快速检索方法，提高接口检索速度;忽略大小写
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.DefaultActionSelector.CachedActionNames">
            <summary>
            用于保存对应的接口名称和版本，方便快速的判断接口是否存在
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.DefaultActionSelector._typeFinder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionSelector.#ctor(Frxs.ServiceCenter.Api.Core.ITypeFinder,Frxs.ServiceCenter.Api.Core.SystemOptions)">
            <summary>
            系统默认的Action查找器
            </summary>
            <param name="typeFinder">类型查找接口</param>
            <param name="systemOptions">系统框架参数</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionSelector.GetActionDescriptors(System.Boolean)">
            <summary>
            获取所有的合法接口
            </summary>
            <returns>返回所有合法的接口ActionDescriptor集合</returns>
            <param name="skipSystemActions">是否跳过系统框架接口</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionSelector.GetActionDescriptors(System.String)">
            <summary>
            根据接口名称获取接口信息
            </summary>
            <param name="actionName">接口名称，忽略大小写</param>
            <returns>返回指定接口名称下面的所有接口版本</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionSelector.GetActionDescriptor(System.String,System.String)">
            <summary>
            根据接口名称获取接口描述对象
            </summary>
            <param name="actionName">接口名称</param>
            <param name="version">接口版本，版本设置为空或者null，框架将会使用同名接口版本号最大的接口</param>
            <returns>如果未找到则返回null</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionSelector.GetHighestActionDescriptor(System.Collections.Generic.IEnumerable{Frxs.ServiceCenter.Api.Core.ActionDescriptor})">
            <summary>
            从接口描述集合里获取到最新版本
            </summary>
            <param name="actionDescriptors">接口描述对象集合</param>
            <returns>返回指定接口描述集合里版本最高的接口描述对象</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultActionSelector.Init">
            <summary>
            系统启动的时候，先预热下，加载下所有的接口
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultApiAccessRecorder">
            <summary>
            系统框架默认的访问记录器；默认为一个空实现
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IApiAccessRecorder">
            <summary>
            接口访问记录器，用于统计接口访问量和使用情况,外部实现可以将访问信息记录到数据库或者其他存储介质
            注意：此接口是多接口合作接口，即：注册的多个接口都会进行接口访问记录，不会进行覆盖操作；相当于发布/订阅模式
            另外，实现类里需要进行错误错误，对异常需要进行拦截处理，不能出现直接抛出异常的情况
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IApiAccessRecorder.Record(Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs)">
            <summary>
            记录接口访问
            </summary>
            <param name="args">接口参数</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IApiAccessRecorder.Priority">
            <summary>
            优先级，优先级越大，越先执行
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultApiAccessRecorder.Record(Frxs.ServiceCenter.Api.Core.ApiAccessRecorderArgs)">
            <summary>
            默认使用日志记录器
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultApiAccessRecorder.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultAuthentication">
            <summary>
            全局默认的身份校验器，默认使用MD5签名
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultAuthentication.Valid(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            默认返回true，全部通过，任何APPKEY都可以访问接口
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <returns>身份信息验证是否通过，通过返回：true，失败返回:false</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DefaultAuthentication.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultModelBinder">
            <summary>
            默认的对象绑定器； 针对简易对象(属性不包含复杂对象)
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IModelBinder">
            <summary>
            值绑定器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IModelBinder.Bind``1(Frxs.ServiceCenter.Api.Core.IValueProvidersManager)">
            <summary>
            根据值提供器，生成对象，并且对模板对象属性赋值
            </summary>
            <param name="valueProvidersManager">值提供器管理器</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultModelBinder.Bind``1(Frxs.ServiceCenter.Api.Core.IValueProvidersManager)">
            <summary>
            根据值提供其，绑定对象，自动给参数赋值，使用反射方式
            </summary>
            <param name="valueProvidersManager">值提供器管理器</param>
            <typeparam name="T">待绑定的类型必须要有无参构造函数</typeparam>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultMediaTypeFormatterFactory">
            <summary>
            默认的输出接口创建器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IMediaTypeFormatterFactory">
            <summary>
            序列化输出器激活器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IMediaTypeFormatterFactory.Create(Frxs.ServiceCenter.Api.Core.ResponseFormat)">
            <summary>
            根据格式化枚举类型，创建对应的输出器
            </summary>
            <param name="format">输出格式化枚举</param>
            <returns>根据指定格式返回指定格式对应的序列化器</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultMediaTypeFormatterFactory.Create(Frxs.ServiceCenter.Api.Core.ResponseFormat)">
            <summary>
            根据指定的格式化枚举，创建对应的格式化输出器
            </summary>
            <param name="format">格式化枚举</param>
            <returns>格式化输出器</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DependencyRegistar">
            <summary>
            注册系统默认实现的接口服务类
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IDependencyRegistar">
            <summary>
            该接口目的让框架自动搜索实现类，然后自动进行接口实现注册到系统
            除了此用法之外，还可以初始化系统是要使用的数据等；
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IDependencyRegistar.Register(Autofac.ContainerBuilder,Frxs.ServiceCenter.Api.Core.ITypeFinder,Frxs.ServiceCenter.Api.Core.SystemOptions)">
            <summary>
            此方法实现模块注册，系统框架会自动调用此方法就行注册
            </summary>
            <param name="containerBuilder">IOC容器</param>
            <param name="typeFinder">类型查找器</param>
            <param name="systemOptions">系统框架配置信息</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.IDependencyRegistar.Order">
            <summary>
            数字越小，越先注册，这样外部实现类就可以重写覆盖掉系统默认
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DependencyRegistar.Register(Autofac.ContainerBuilder,Frxs.ServiceCenter.Api.Core.ITypeFinder,Frxs.ServiceCenter.Api.Core.SystemOptions)">
            <summary>
            注册特定的类型到容器
            </summary>
            <param name="containerBuilder">注册容器</param>
            <param name="typeFinder">类型查找器</param>
            <param name="systemOptions">系统框架配置参数</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.DependencyRegistar.Order">
            <summary>
            优先级比较低，但是又不配置为最低，给外部有机会以最低的方式来注入(比如：DBContext的扩展项目等)
            方便外部程序重写框架里的实现，覆盖掉系统默认的实现
            最先注册下系统默认的实现；这样外部实现才能覆盖掉原始的实现
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Enum`1">
            <summary>
            <![CDATA[
            T为枚举类型；调用方式： t = new Enum<HttpMethod>();
            ]]>
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Enum`1.CachedEnumDescriptors">
            <summary>
            缓存下，防止下次再次反射调用描述(此缓存是一个公共大缓存，即将所有操作过的枚举都会安装枚举类型作为主键就行存储)
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Enum`1.#ctor">
            <summary>
            构造函数里会进行T数据类型校验,非枚举类型直接抛出异常
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Enum`1.CheckT">
            <summary>
            检测T类型是否是枚举类型
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Enum`1.GetItem(System.String,System.Func{`0})">
            <summary>
            不区分大小写
            </summary>
            <param name="enumStr">不区分大小写</param>
            <param name="defaultFun">当指定值，在枚举里不存在的时候，使用委托返回一个指定的枚举值</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Enum`1.GetItem(System.Int32,System.Func{`0})">
            <summary>
            根据值名称获取
            </summary>
            <param name="enumValue">枚举值</param>
            <param name="defaultFun">当指定值，在枚举里不存在的时候，使用委托返回一个指定的枚举值</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Enum`1.Contains(System.String)">
            <summary>
            是否包含指定枚举字符串，忽略大小写
            </summary>
            <param name="enumStr">枚举字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Enum`1.Contains(System.Int32)">
            <summary>
            是否包含指定的枚举值
            </summary>
            <param name="enumValue">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Enum`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Enum`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Enum`1.GetDescriptor">
            <summary>
            枚举值上面需要加DescriptionAttribute特性标签
            </summary>
            <returns>key:枚举值，value:枚举描述,未定义枚举描述，返回枚举字符串</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ErrorAction">
            <summary>
            错误action返回
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ErrorAction._exception">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ErrorAction.#ctor(System.Exception,Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            
            </summary>
            <param name="exception">异常信息</param>
            <param name="requestContext">当前请求上下文</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ErrorAction.Execute">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.FormValueProvider">
            <summary>
            基于web form input 的值提供其
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.FormValueProvider._valueDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.FormValueProvider.#ctor(System.Web.HttpContextBase)">
            <summary>
            Form表单值提供器
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.FormValueProvider.GetValueDictionary">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.FormValueProvider.Order">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ApiException">
            <summary>
            API系统框架定义的错误类，系统错误，尽量使用此类来抛出异常，
            便于框架捕捉框架错误消息
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiException.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="messageFormat"></param>
            <param name="args"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ApiException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.GlobalActionFiltersManager">
            <summary>
            全局拦截器管理器
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.GlobalActionFiltersManager.Instance">
            <summary>
            全局拦截器表
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.GlobalActionFiltersManager.Filters">
            <summary>
            返回全局拦截器配置表
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.HelpAction">
            <summary>
            系统内部使用的帮助接口，用于显示所有合法的Action几个信息
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Actions.HelpAction._actionSelector">
            <summary>
            Action筛选器
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.Actions.HelpAction._typeFinder">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.HelpAction.GetTypeName(System.Type)">
            <summary>
            获取类型名称，方便查看
            </summary>
            <param name="type">当前类型</param>
            <returns>返回指定类型的名称（重新实现）</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.HelpAction.#ctor">
            <summary>
            初始化帮助Action
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.HelpAction.#ctor(Frxs.ServiceCenter.Api.Core.IActionSelector,Frxs.ServiceCenter.Api.Core.ITypeFinder)">
            <summary>
            构造函数
            </summary>
            <param name="actionSelector">Action筛选器</param>
            <param name="typeFinder">类型查找器</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.Actions.HelpAction.Execute">
            <summary>
            返回所有合法的Action集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.Actions.HelpAction.HelpActionRequestDto">
            <summary>
            用于搜索
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.Actions.HelpAction.HelpActionRequestDto.KeyWord">
            <summary>
            关键词
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.HttpMethod">
            <summary>
            请求方式
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.HttpMethod.POST">
            <summary>
            Http-POST方式提交
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.HttpMethod.GET">
            <summary>
            Http-Get方式提交
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.HttpMethodAttribute">
            <summary>
            用于限定http提交方式，如果接口实现类添加了此特性，那么只有对应的http请求方式才能访问接口
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpMethodAttribute.#ctor(Frxs.ServiceCenter.Api.Core.HttpMethod)">
            <summary>
            现在接口的http请求方式:POST/GET
            </summary>
            <param name="httpMethod">GET/POST</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.HttpMethodAttribute.ValidForRequest(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            校验当前http提交方式是否有权限访问
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.HttpMethodAttribute.HttpMethod">
            <summary>
            GET/POST
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RequireHttpsAttribute">
            <summary>
            是否开启https连接，如果接口实现类加了此特性，那么只有https连接访问才能访问接口
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequireHttpsAttribute.#ctor(System.Boolean)">
            <summary>
            是否开启https连接
            </summary>
            <param name="requireHttps">默认true</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequireHttpsAttribute.ValidForRequest(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            校验是否需要安全连接进行访问https
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequireHttpsAttribute.RequireHttps">
            <summary>
            是否开启https连接；默认true
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IActionExtension">
            <summary>
            IACTION接口扩展
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IActionExtension.GetActionDescriptor(Frxs.ServiceCenter.Api.Core.IAction)">
            <summary>
            获取当前action的描述信息
            </summary>
            <param name="action">具体的IAction示例</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.AuthenticationResult">
            <summary>
            身份校验返回对象;全局校验，在接口类上，如果定义了AllowAnonymousAttribute特性类，全局验证将不起作用
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AuthenticationResult.#ctor(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="isValid">是否校验通过</param>
            <param name="message">错误或者成功返回的消息</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.AuthenticationResult.IsValid">
            <summary>
            是否校验通过
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.AuthenticationResult.Message">
            <summary>
            错误或者成功返回的消息
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IResponse">
            <summary>
            action执行结果输出器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IResponse.ResponseSerializedStringToClient(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.ResponseFormat,System.String)">
            <summary>
            格式化输出ActionResult对象到客户端
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="responseFormat">actionResultString格式化数据类型；XML/JSON</param>
            <param name="serializedActionResultString">执行结果对象</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IResponseDto">
            <summary>
            输出data数据对象需要继承此接口
            此接口仅仅是空接口，方便系统框架自动化处理
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.JsonMediaTypeFormatter">
            <summary>
            JSON格式化器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.JsonMediaTypeFormatter.SerializedActionResultToString(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.ActionResult)">
            <summary>
            JSON格式化器
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionResult">ActionResult对象</param>
            <returns>输出序列化后的字符串</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ResponseDtoBase">
            <summary>
            输出数据基类
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.SystemOptions">
            <summary>
            系统框架配置类
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.SystemOptions._customerParameters">
            <summary>
            构造一个默认的自定义数据记录容器(方便其他扩展存储全局数据)
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SystemOptions.#ctor">
            <summary>
            构造函数已经设置参数值
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SystemOptions.ServerName">
            <summary>
            服务器名称，使用分布式的时候，这个比较有用，设置服务器名称，便于调试发现那台服务器出现问题
            默认名称为：frxs-server-{0}后面格式化为1-100数字
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SystemOptions.EnableAccessRecorder">
            <summary>
            是否开启接口访问记录器，此开关为全局，不管是否实现了具体的接口访问记录器，如果此开关关闭，都将无法记录(系统框架默认开启true)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SystemOptions.LanguageResourcePath">
            <summary>
            接口使用的语言包地址，请使用绝对路径比如：g:\\web\app_data\r.xml
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SystemOptions.ActionDocResourcePaths">
            <summary>
            接口描述文档地址，请使用绝对地址，比如：g:\\web\app_data\xxx.xml
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SystemOptions.ValidUserIdAndUserNameFun">
            <summary>
            验证UserId和用户名称是否合法(因为框架系统无法判断当前接口系统的用户ID和用户名称如何判断才算合法的，所以需要外部来指定一个委托判断)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SystemOptions.SdkNamespace">
            <summary>
            输出SDK命名空间
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SystemOptions.AdditionDatas">
            <summary>
            用于保存其他全局数据，比如扩展插件保存数据等（全局）
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SystemOptions.HttpHost">
            <summary>
            当前接口站点服务器地址比如：www.domain.com，不带http和任何/字符。
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SystemOptions.DefaultActionVersionFailToHighestActionVersion">
            <summary>
            此属性指示：当指定接口后，未找到对应的接口是否再次搜索最高的同名接口版本;系统框架默认为false
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder">
            <summary>
            应用程序域所有程序集类型查找
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ITypeFinder">
            <summary>
            类型查找器类型查找器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITypeFinder.GetAssemblies">
            <summary>
            获取所有程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITypeFinder.FindClassesOfType(System.Type,System.Boolean)">
            <summary>
            根据类型查找所有的实现类
            </summary>
            <param name="assignTypeFrom"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITypeFinder.FindClassesOfType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            根据类型和指定程序集查找所有实现类
            </summary>
            <param name="assignTypeFrom"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITypeFinder.FindClassesOfType``1(System.Boolean)">
            <summary>
            根据类型模板查找所有实现类
            </summary>
            <typeparam name="T"></typeparam>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ITypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            根据类型模板在指定的程序集里查找所有实现类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.FindClassesOfType``1(System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.FindClassesOfType(System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="assignTypeFrom"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.FindClassesOfType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            
            </summary>
            <param name="assignTypeFrom"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.GetAssemblies">
            <summary>
            Gets the assemblies related to the current implementation.
            </summary>
            <returns>
            A list of assemblies that should be loaded by the factory.
            </returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.AddAssembliesInAppDomain(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            Iterates all assemblies in the AppDomain and if it's name matches the configured patterns add it to our list.
            </summary>
            <param name="addedAssemblyNames"></param>
            <param name="assemblies"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.AddConfiguredAssemblies(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            Adds specificly configured assemblies.
            </summary>
            <param name="addedAssemblyNames"></param>
            <param name="assemblies"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.Matches(System.String)">
            <summary>
            Check if a dll is one of the shipped dlls that we know don't need to be investigated.
            </summary>
            <param name="assemblyFullName">
            The name of the assembly to check.
            </param>
            <returns>
            True if the assembly should be loaded into Nop.
            </returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.Matches(System.String,System.String)">
            <summary>
            Check if a dll is one of the shipped dlls that we know don't need to be investigated.
            </summary>
            <param name="assemblyFullName">
            The assembly name to match.
            </param>
            <param name="pattern">
            The regular expression pattern to match against the assembly name.
            </param>
            <returns>
            True if the pattern matches the assembly name.
            </returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.LoadMatchingAssemblies(System.String)">
            <summary>
            Makes sure matching assemblies in the supplied folder are loaded in the app domain.
            </summary>
            <param name="directoryPath">
            The physical path to a directory containing dlls to load in the app domain.
            </param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.DoesTypeImplementOpenGeneric(System.Type,System.Type)">
            <summary>
            Does type implement generic?
            </summary>
            <param name="type"></param>
            <param name="openGeneric"></param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.App">
            <summary>
            获取当前应用程序域信息
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.LoadAppDomainAssemblies">
            <summary>
            
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.AssemblyNames">
            <summary>
            Gets or sets assemblies loaded a startup in addition to those loaded in the AppDomain.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.AssemblySkipLoadingPattern">
            <summary>
            Gets the pattern for dlls that we know don't need to be investigated.
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.AppDomainTypeFinder.AssemblyRestrictToLoadingPattern">
            <summary>
            Gets or sets the pattern for dll that will be investigated. For ease of use this defaults to match all but to increase performance you might want to configure a pattern that includes assemblies and your own.
            </summary>
            <remarks>
            If you change this so that assemblies arn't investigated (e.g. by not including something like "^EasyCMS|..." you may break core functionality.
            </remarks>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.StringExtension">
            <summary>
            字符类型扩展类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.ToIntArray(System.String,System.Char)">
            <summary>
            根据切分字符成int数组类型；不会返回失败信息，转型错误的直接忽略掉
            </summary>
            <param name="value">待拆分的字符串</param>
            <param name="splitStr">拆分字符</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.ToIntArray(System.String)">
            <summary>
            默认,切分
            </summary>
            <param name="value">待切分的字符串，使用,分开</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.IsNumericArray(System.String[])">
            <summary>
            判断一个字符串数组是否可以转型成数字数组（如果可以转型成double类型即代表可以转型成功）
            </summary>
            <param name="strArr">字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.ToStringArray(System.String,System.Char[])">
            <summary>
            将字符串按照指定的字符进行切分
            </summary>
            <param name="value"></param>
            <param name="splitStr">指定切分字符</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.ToStringArray(System.String)">
            <summary>
            将字符串按照指定的字符进行切分，默认,切分
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.Replicate(System.String,System.Int32)">
            <summary>
            将当前字符串重复count次
            </summary>
            <param name="value"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.Join(System.String,System.String,System.String)">
            <summary>
            连接字符串
            </summary>
            <param name="value"></param>
            <param name="separator">连接符号</param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.UrlEncode(System.String)">
            <summary>
            对字符串进行UrlEncode编码
            </summary>
            <param name="value">待编码字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.HtmlEncode(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.ToDateTime(System.String)">
            <summary>
            转型成DateTime，失败返回null
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.ToInt(System.String)">
            <summary>
            转型成int，失败返回null
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.ToLong(System.String)">
            <summary>
            转型成long，失败返回null
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.ToDecimal(System.String)">
            <summary>
            转型成ToDecimal，失败返回null
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.With(System.String,System.Object[])">
            <summary>
            对个需要格式化的字符串格式化
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.Append(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="appendString"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.CutString(System.String,System.Int32,System.String)">
            <summary>
            裁剪字符串
            </summary>
            <param name="value"></param>
            <param name="length">裁剪长度</param>
            <param name="ellipsis">裁剪后的字符代替字符</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.CutString(System.String,System.Int32)">
            <summary>
            裁剪字符
            </summary>
            <param name="value"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.IsNullOrEmpty(System.String)">
            <summary>
            当前字符串是否为空或者为null
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.IsNull(System.String)">
            <summary>
            当前字符串是否为null
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.IsNullOrEmptyForDefault``1(System.String,System.Func{``0},System.Func{System.String,``0})">
            <summary>
            判断当前字符串是否为空，来返回实际对象
            </summary>
            <typeparam name="T">返回对象</typeparam>
            <param name="value">当前字符串</param>
            <param name="valueEmptyFun">当前字符串为空的时候，返回默认对象</param>
            <param name="valueNotEmptyFun">当前字符串不为空的时候，返回对象，输入字符串为当前字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.AsInt(System.String)">
            <summary>
            转型成int
            </summary>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.AsInt(System.String,System.Int32)">
            <summary>
            转型成int，失败则使用默认值
            </summary>
            <param name="value">待转型的字符串</param>
            <param name="defaultValue">转型失败，返回此默认值</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.AsDecimal(System.String)">
            <summary>
            转型成Decimal;转型失败则返回：0m
            </summary>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.AsDecimal(System.String,System.Decimal)">
            <summary>
            转型成Decimal;转型失败则返回指定的默认值
            </summary>
            <param name="value">待转型的字符串</param>
            <param name="defaultValue">转型失败，返回此默认值</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.AsFloat(System.String)">
            <summary>
            转换成Float;失败默认返回0
            </summary>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.AsFloat(System.String,System.Single)">
            <summary>
            转换成Float;失败默认返回指定的默认值
            </summary>
            <param name="value">待转型的字符串</param>
            <param name="defaultValue">转型失败，返回此默认值</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.AsDateTime(System.String)">
            <summary>
            转型成DateTime，转型失败默认返回：default(DateTime)=0001/1/1 0:00:00
            </summary>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.AsDateTime(System.String,System.DateTime)">
            <summary>
            转型成DateTime
            </summary>
            <param name="value">待转型的字符串</param>
            <param name="defaultValue">转型失败，返回此默认值</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.As``1(System.String)">
            <summary>
            将字符串转型成指定的基元类型
            </summary>
            <typeparam name="TValue">指定数据类型</typeparam>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.As``1(System.String,``0)">
            <summary>
            字符串与指定的类型是否可以相互转换
            </summary>
            <typeparam name="TValue">指定的基元类型</typeparam>
            <param name="value">待转型的字符串</param>
            <param name="defaultValue">无法转型，就默认使用默认指定值</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.AsBool(System.String)">
            <summary>
            转型成bool，转型失败默认返回：false
            </summary>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.AsBool(System.String,System.Boolean)">
            <summary>
            转型成bool,转型失败则返回默认值
            </summary>
            <param name="value">待转型的字符串</param>
            <param name="defaultValue">转型失败，返回此默认值</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.IsBool(System.String)">
            <summary>
            字符串是否能转型成bool类型
            </summary>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.IsInt(System.String)">
            <summary>
            字符串是否能转出int类型
            </summary>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.IsDecimal(System.String)">
            <summary>
            字符串是否能转型成Decimal类型
            </summary>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.IsFloat(System.String)">
            <summary>
            字符串是否能转型成Float类型
            </summary>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.IsDateTime(System.String)">
            <summary>
            字符串是否能转型成DateTime类型
            </summary>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.Is``1(System.String)">
            <summary>
            字符串是否可以转型成指定的类型
            </summary>
            <typeparam name="TValue">指定的基元类型</typeparam>
            <param name="value">待转型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.DeserializeJsonStringToObject``1(System.String)">
            <summary>
            将JSON字符串转换成实体对象
            注意：如果字符串不是合法的JSON字符串；无法反序列化出指定对象，则返回null，因此外部程序需要判断返回值
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="jsonValue">JSON字符串</param>
            <returns>返回指定的T对象</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.StringExtension.DeserializeJsonStringToObject(System.String,System.Type)">
            <summary>
            将JSON字符串转换成实体对象
            </summary>
            <param name="jsonValue">JSON字符串</param>
            <param name="type">待转换的实体类型</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RouteDataValueProvider">
            <summary>
            路由数据字典值提供器
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.RouteDataValueProvider._valueDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RouteDataValueProvider.#ctor(System.Web.HttpContextBase)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RouteDataValueProvider.GetValueDictionary">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RouteDataValueProvider.Order">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine">
            <summary>
            接口框架视图引擎；使用webform语法
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine._language">
            <summary>
            编译源码的语言
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine._systemDlls">
            <summary>
            编译源文件需要的系统框架dll
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine.CacheAssemblys">
            <summary>
            缓存视图文件便于后的程序集，提高执行性能
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine.#ctor">
            <summary>
            默认使用C#语言编译器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine.#ctor(Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.Language)">
            <summary>
            指定VIEW视图使用的语言，C#或者VB
            </summary>
            <param name="language">编译器语言</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine.RemoveEmptyLine(System.IO.TextReader)">
            <summary>
            除掉空行
            </summary>
            <param name="streamReader"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine.CompileByViewSource(System.String,System.String[],System.String[],Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection,System.IO.StreamWriter)">
            <summary>
            根据视图文件原始文件内容，编译视图文件到程序集
            </summary>
            <param name="viewSource">视图文件源码</param>
            <param name="assemblies">引用的程序集集合</param>
            <param name="namespaces">需要添加的命名空间集合</param>
            <param name="parameters">视图定义的需要输入的参数集合</param>
            <param name="response">将执行后的视图保存到数据流</param>
            <returns>the comiled assembly</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine.CompileByViewPath(System.String,System.String[],System.String[],Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection,System.IO.StreamWriter)">
            <summary>
            根据提供的视图文件路径，编译视图文件到程序集
            </summary>
            <param name="viewPath">视图文件路径，请输入绝对路径比如：g:\\temp\t.aspx</param>
            <param name="assemblies">视图引用类型需要用到的程序集</param>
            <param name="namespaces">视图引用类型需要用到的命名空间（如果类全部是完整的输入，不需要命名空间，但是需要引用所属的程序集）</param>
            <param name="parameters">视图对外公开的参数（即输入模型对象）</param>
            <param name="response">将视图执行结果输出到流</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine.CompileByViewPath(System.String,Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection,System.Text.Encoding)">
            <summary>
            编译视图文件并执行视图
            </summary>
            <param name="viewPath">视图文件路径，请输入绝对路径比如：g:\\temp\t.aspx</param>
            <param name="parameters">视图定义的参数集合</param>
            <param name="encode">视图文件文件编码</param>
            <returns>返回视图执行结果字符串</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine.CompileByViewSource(System.String,Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection,System.Text.Encoding)">
            <summary>
            编译视图文件并执行视图
            </summary>
            <param name="viewSource">视图文件源码</param>
            <param name="parameters">视图定义的参数集合</param>
            <param name="encode">视图文件文件编码</param>
            <returns>编译视图源代码，并将视图执行结果返回</returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine.Assemblies">
            <summary>
            编译视图也需要引入的第三方dll程序集
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine.Namespaces">
            <summary>
            编译视图需要引入的命名空间
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ApiViewEngine.SupportedExtension">
            <summary>
            支持的后缀
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.DirectiveValues">
            <summary>
            代码块对象
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.DirectiveValues.Directive">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.DirectiveValues.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="directive"></param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.IncludeParser">
            <summary>
            <![CDATA[
            表示 #Include 命令解释器。
            格式：<!--#include file="include/header_css_js.html"-->
            支持： ../../x/x.html， /x/x.html ， x/x.html
            ]]>
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.IncludeParser._nestedCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.IncludeParser.Parse(System.String,System.String)">
            <summary>
            处置包含文档。
            </summary>
            <param name="viewSourceString">包含模板代码的字符串。</param>
            <param name="viewPath">处置包含命令时要使用的基准路径（为空的话，将不会处理视图里的包含文件）</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.IncludeParser._ProcessSSIElement(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="viewSourceString"></param>
            <param name="viewPath"></param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.Language">
            <summary>
            模板语法
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.Language.CSharp">
            <summary>
            CS
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.Language.VisualBasic">
            <summary>
            VB
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.Section">
            <summary>
            源代码代码块对象；比如代码块，文档常量，视图参数接口对象，命名空间
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.Section.#ctor(System.Int32,System.String,Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionType)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="text"></param>
            <param name="type"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.Section.#ctor(System.Int32,System.String,Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionType,Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.DirectiveValues)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="text"></param>
            <param name="type"></param>
            <param name="values"></param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.Section.Index">
            <summary>
            代码块索引
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.Section.Text">
            <summary>
            代码块源码
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.Section.Type">
            <summary>
            代码块类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.Section.Values">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionCollection">
            <summary>
            根据视图文件分析器获取到所有的代码块，文本常量进行源代码生成
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionCollection._newLine">
            <summary>
            换行符
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionCollection.ExtractSource(System.String[])">
            <summary>
            生成源代码
            </summary>
            <param name="namespaces">需要用到的命名空间</param>
            <returns>返回视图文件格式化后的类源文件</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionCollection.Process(System.Reflection.Assembly,Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection,System.IO.StreamWriter)">
            <summary>
            编译执行源代码
            </summary>
            <param name="assembly">编译完成的源代码所属的程序集</param>
            <param name="parameters">视图参数的输入(可以为null)</param>
            <param name="response">将视图执行结果写到流</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionType.Directive">
            <summary>
            represents a ASP.Net page Directive
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionType.Declaration">
            <summary>
            represents an ASP.NET function declaration section
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionType.Code">
            <summary>
            代码片段
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionType.Text">
            <summary>
            文本常量片段
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameter">
            <summary>
            模板页面参数对象
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameter.#ctor(System.String)">
            <summary>
            添加视图页面参数；参数值为null
            </summary>
            <param name="paramName">参数名称</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameter.#ctor(System.String,System.Object)">
            <summary>
            设置模板参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="paramValue">参数值</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameter.Type">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameter.Name">
            <summary>
            View页面的参数名称
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection">
            <summary>
            视图暴露出来的属性集合（外部注入值）
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection.Add(System.String)">
            <summary>
            添加一个视图属性对象
            </summary>
            <param name="paramName">属性类型</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection.Add(System.String,System.Object)">
            <summary>
            添加一个视图属性对象
            </summary>
            <param name="paramName">属性名称</param>
            <param name="paramValue">属性值</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ViewEngine.ViewParameterCollection.Item(System.String)">
            <summary>
            根据属性名称获取视图属性对象
            </summary>
            <param name="name">属性名称</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ViewParser">
            <summary>
            the Parser class parses the aspx page and converts it into compilable code
            currently the parser supports the following Page Directives:
            @Page - defines the type of page (cs or vb code)
            @Assembly - used to include (external) assemblies
            @Import - used to include namespaces
            note that currently added script declarations must be written in the 
            same language as the page (no mixed vb and cs allowed)
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ViewParser.ParsePage(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <param name="viewPath"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ViewParser.StripQuotes(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ViewParser.ParseDirectives(Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionCollection,System.String)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ViewParser.ParseDeclarations(Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionCollection,System.String)">
            <summary>
            <![CDATA[
            <script charset="UTF-8" runat="server">*</script>
            ]]>
            </summary>
            <param name="list"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ViewParser.ParseText0(System.String)">
            <summary>
            处理属性，方法，代码块
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.ViewParser.ParseText(Frxs.ServiceCenter.Api.Core.ViewEngine.Impl.SectionCollection,System.String)">
            <summary>
            <![CDATA[
            处理<%%>代码块
            ]]>
            </summary>
            <param name="list"></param>
            <param name="page"></param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.LocalFileViewResourceFinder">
            <summary>
            本地文件视图查找器
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.LocalFileViewResourceFinder.ViewDirectory">
            <summary>
            视图文件保存的本地文件夹
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.LocalFileViewResourceFinder.CachedeLocalResourceNames">
            <summary>
            用于缓存所有系统框架的文本资源
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.LocalFileViewResourceFinder.#ctor(System.Web.HttpContextBase,Frxs.ServiceCenter.Api.Core.ICacheManager)">
            <summary>
            本地文件资源查找器
            </summary>
            <param name="httpContext">当前http请求上下文</param>
            <param name="cacheManager">缓存接口</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.LocalFileViewResourceFinder.GetResources">
            <summary>
            获取所有查找器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.LocalFileViewResourceFinder.Frxs#ServiceCenter#Api#Core#IStartUp#Init">
            <summary>
            预热下，系统启动时候执行一次
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.LocalFileViewResourceFinder.Order">
            <summary>
            优先级(重写下是为了系统自定义文件夹配置高于程序集)
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.WebAppTypeFinder">
            <summary>
            WEB应用程序集类型查找器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.WebAppTypeFinder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.WebAppTypeFinder.GetBinDirectory">
            <summary>
            Gets a physical disk path of \Bin directory
            </summary>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.WebAppTypeFinder.GetAssemblies">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.WebAppTypeFinder.EnsureBinFolderAssembliesLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.NullRequestDto">
            <summary>
            系统默认的请求JSON反序列化对象;在无须上送DTO参数的时候，可以使用此类
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.NullResponseDto">
            <summary>
            默认输出的ActionResult对象属性Data待序列化对象
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.QueryStringValueProvider">
            <summary>
            基于URL查询字符串的值提供其
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.QueryStringValueProvider._valueDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.QueryStringValueProvider.#ctor(System.Web.HttpContextBase)">
            <summary>
            URL参数值提供器
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.QueryStringValueProvider.GetValueDictionary">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.QueryStringValueProvider.Order">
            <summary>
            
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.RequestContext">
            <summary>
            用户保存一次请求上下文信息
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.RequestContext._customerAdditionDatas">
            <summary>
            构造一个默认的自定义数据记录容器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequestContext.#ctor(System.Web.HttpContextBase,Frxs.ServiceCenter.Api.Core.SystemOptions)">
            <summary>
            一次API接口访问请求上下文信息，用于在后续的流转处理中保存数据
            </summary>
            <param name="httpContext">http请求上下文</param>
            <param name="systemOptions">系统设置对象</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequestContext.#ctor(System.Web.HttpContextBase,Frxs.ServiceCenter.Api.Core.SystemOptions,System.Object,Frxs.ServiceCenter.Api.Core.IActionDescriptor,Frxs.ServiceCenter.Api.Core.RequestParams,Frxs.ServiceCenter.Api.Core.RequestParams)">
            <summary>
            
            </summary>
            <param name="httpContext">http请求上下文</param>
            <param name="systemOptions">系统设置对象</param>
            <param name="requestDto">请求参数data对象</param>
            <param name="actionDescriptor">当前请求接口描述</param>
            <param name="rawRequestParams">当前上送参数原始对象</param>
            <param name="decryptedRequestParams">当前上送参数解密后对象</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequestContext.GetRequestCacheKey(System.String)">
            <summary>
            获取当前请求获取缓存键信息，方便重写实现类里直接使用
            只要接口名称+序列化格式+提交的数据包不变，生成的那么缓存键就不会变化，因此实现针对不同接口和不同请求数据包进行缓存
            由于是针对字符串进行缓存，因此在提交不同预期序列化返回（XML,JSON）会保存2份不同的缓存
            注意：这里的缓存键仅仅是针对同一接口同一参数的缓存键，不是针对这个应用的全局缓存键
            </summary>
            <param name="subCacheKey">同一操作上下文，有可能需要不同的子缓存键；可以增加子缓存键，防止冲突</param>
            <returns>返回本次请求缓存键</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.RequestContext.GetCurrentUserIdentity(System.Func{Frxs.ServiceCenter.Api.Core.UserIdentity})">
            <summary>
            此方法仅仅用户获取上送接口操作用户UserId和UserName对象；
            </summary>
            <param name="default">如果设置了默认的返回委托，在获取用户失败的情况下（null），会返回委托返回值</param>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestContext.HttpContext">
            <summary>
            HttpContextBase
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestContext.SysOptions">
            <summary>
            系统配置信息
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestContext.RawRequestParams">
            <summary>
            原始上送请求参数对象(一般校验签名等需要原始数据的请使用此参数对象)
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestContext.DecryptedRequestParams">
            <summary>
            解密后的上送参数对象
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestContext.RequestDto">
            <summary>
            此对象是上送的数据对象，此数据其实是实现了IRequestDto的请求上送参数类
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestContext.ActionDescriptor">
            <summary>
            当前请求上下文接口描述信息
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestContext.AdditionDatas">
            <summary>
            自定义的数据，方便从上到下传递数据;仅限于当前上下文传递数据
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.RequestContext.ServicesContainer">
            <summary>
            获取系统框架服务容器
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultResponse">
            <summary>
            字符串输出器默认实现
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultResponse.AddCustomerResponseHeaders(Frxs.ServiceCenter.Api.Core.RequestContext)">
            <summary>
            自定义一些输出头信息，实现类无需了解
            </summary>
            <param name="requestContext">当前请求上下文</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultResponse.ResponseSerializedStringToClient(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.ResponseFormat,System.String)">
            <summary>
            输出格式化数据到客户端
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="responseFormat">输出格式化类型</param>
            <param name="serializedActionResultString">格式化了的ActionResult对象字符串</param>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ResponseFormat">
            <summary>
            接口输出模式
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ResponseFormat.XML">
            <summary>
            序列化成XML格式
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ResponseFormat.JSON">
            <summary>
            序列化成JSON格式
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ResponseFormat.VIEW">
            <summary>
            使用视图模板显示
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ServerVariablesValueProvider">
            <summary>
            服务器环境变量值提供器，定义的实体请将-去掉
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ServerVariablesValueProvider._valueDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServerVariablesValueProvider.#ctor(System.Web.HttpContextBase)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServerVariablesValueProvider.GetValueDictionary">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ServerVariablesValueProvider.Order">
            <summary>
            注册的所有只提供都找不到对应的键值，就获取服务器环境变量
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ServicesContainer">
            <summary>
            see AutoFac link to:http://docs.autofac.org
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ServicesContainer.Locker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServicesContainer.#ctor">
            <summary>
            系统框架服务注册类
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServicesContainer.Initialize(Frxs.ServiceCenter.Api.Core.SystemOptions)">
            <summary>
            IOC容器初始化，系统框架初始化等
            </summary>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServicesContainer.Resolver``1(Autofac.ILifetimeScope)">
            <summary>
            根据类型创建出对象实例
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="lifetimeScope">生命周期作用域</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServicesContainer.ResolverAll``1(System.String,Autofac.ILifetimeScope)">
            <summary>
            根据类型创建出所有注册的实现类型
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="namedServices"></param>
            <param name="lifetimeScope">生命周期作用域</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServicesContainer.Resolver(System.Type,Autofac.ILifetimeScope)">
            <summary>
            根据类型创建对象
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="lifetimeScope">生命周期作用域</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServicesContainer.TryResolver(System.Type,Autofac.ILifetimeScope,System.Object@)">
            <summary>
            尝试创建指定类型，不会抛出异常
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="instance">返回的实例</param>
            <param name="lifetimeScope">生命周期作用域，可以为null</param>
            <returns>创建是否成功true/false</returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServicesContainer.ResolverUnregistered(System.Type,Autofac.ILifetimeScope)">
            <summary>
            创建未注册的类型（类型没有在容器里注册过）；但是创建的类型有可能会引用容器里注册的类型
            </summary>
            <param name="type">待创建服务类型</param>
            <param name="lifetimeScope">生命周期作用域，可为null</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServicesContainer.IsRegistered(System.Type,Autofac.ILifetimeScope)">
            <summary>
            判断一个类型是否注册
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="lifetimeScope">生命周期作用域</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServicesContainer.ResolveOptional(System.Type,Autofac.ILifetimeScope)">
            <summary>
            如果反转不成功，则返回null
            </summary>
            <param name="serviceType"></param>
            <param name="lifetimeScope">生命周期作用域</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ServicesContainer.Scope">
            <summary>
            获取当前请求生命周期
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ServicesContainer.Current">
            <summary>
            获取当前服务容器
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.ServicesContainer.Container">
            <summary>
            对外公开的IOC容器访问接口
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.SignParamsDictionary`2">
            <summary>
            数据签名字典类；内部使用排序字段，方便安装参数名称排序
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.SignParamsDictionary`2._dit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SignParamsDictionary`2.#ctor">
            <summary>
            数据签名字典类；内部使用排序字段，方便安装参数名称排序
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SignParamsDictionary`2.Append(`0,`1)">
            <summary>
            方便链式调用，添加一个键值对
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.SignParamsDictionary`2.GetAllKeys">
            <summary>
            获取所有的键信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SignParamsDictionary`2.Item(`0)">
            <summary>
            根据键获取值信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.SignParamsDictionary`2.Values">
            <summary>
            获取所有的键值信息
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ActionTypeExtensions">
            <summary>
            类型检查
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionTypeExtensions.IsAssignableToActionBase(System.Type)">
            <summary>
            类型是否继承了ActionBase
            </summary>
            <param name="type">当前类型</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionTypeExtensions.IsAssignableToIRequestDto(System.Type)">
            <summary>
            类型是否继承自IRequestDto
            </summary>
            <param name="type">当前类型</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionTypeExtensions.IsAssignableToIResponseDto(System.Type)">
            <summary>
            类型是否继承自IResponseDto
            </summary>
            <param name="type">当前类型</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.ActionTypeExtensions.GetPropertiesInfo(System.Type)">
            <summary>
            获取所有实例属性，默认参数：
            System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance
            </summary>
            <param name="type">当前类型</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.VersionAttribute">
            <summary>
            版本特性用于指定版本，便于客户端直接指定版本，框架自动使用指定版本接口
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.VersionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            指示接口的版本信息
            </summary>
            <param name="major">主版本</param>
            <param name="minor">次版本</param>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.VersionAttribute.Version">
            <summary>
            接口版本号
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.DefaultXmlSerializer">
            <summary>
            从程序集里的内切XML文件资源反序列化
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultXmlSerializer.XmlDeserializeFromAssemblyStaticFile``1(System.String)">
            <summary>
            程序集内切文件路径，多文件夹请使用.隔开如：Frxs.ServiceCenter.Api.Core.ActionsDesFile.Actions.XML
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblyStaticFile">程序集内嵌资源文件名称；请注意大小写</param>
            <returns></returns>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.DefaultXmlSerializer.XmlDeserializeFromFile``1(System.String)">
            <summary>
            从文件读取，并反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlFile">文件路径</param>
            <returns></returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.XmlMediaTypeFormatter">
            <summary>
            XML格式化器
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.XmlMediaTypeFormatter.SerializedActionResultToString(Frxs.ServiceCenter.Api.Core.RequestContext,Frxs.ServiceCenter.Api.Core.ActionResult)">
            <summary>
            XML格式化器
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="actionResult">ActionResult对象</param>
            <returns>输出序列化后的字符串</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.IRequestDtoExtensions">
            <summary>
            将DTO转化成T类型
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.IRequestDtoExtensions.MapTo``1(Frxs.ServiceCenter.Api.Core.IRequestDto,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            注意：T类型和dto类型的映射，只是简单的属性映射，不会涉及复杂对象映射，比如：集合
            T类型必须包含无参构造函数
            </summary>
            <typeparam name="T">需要映射属性值的对象，必须包含无参构造函数</typeparam>
            <param name="dto">当前dto对象</param>
            <param name="ignoreCase">是否忽略属性大小写，默认true</param>
            <param name="isAutoSetTime">是否自动将T对象有datetime类型的属性值，自动赋值成  DateTime.Now</param>
            <param name="isTrim">是否将字符串类型前后空格删除</param>
            <returns>返回指定T类型对象实例</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.ResourceType">
            <summary>
            资源类型
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ResourceType.Text">
            <summary>
            文本类型
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.ResourceType.Image">
            <summary>
            图片类型
            </summary>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.WhiteIpCollection">
            <summary>
            白名单系统配置表
            </summary>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.WhiteIpCollection.Add(System.String[])">
            <summary>
            添加一批白名单
            </summary>
            <param name="ips">白名单</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.WhiteIpCollection.Remove(System.String[])">
            <summary>
            删除一批白名单
            </summary>
            <param name="ips">白名单</param>
        </member>
        <member name="M:Frxs.ServiceCenter.Api.Core.WhiteIpCollection.IsValid(System.String)">
            <summary>
            检测指定IP是否有权限访问接口系统
            </summary>
            <param name="ip">待检测IP地址</param>
            <returns>IP地址是否在白名单里</returns>
        </member>
        <member name="T:Frxs.ServiceCenter.Api.Core.WhiteIpManager">
            <summary>
            白名单集合；一旦定义了白名单，那么只能在白名单里面的IP地址才能访问，如果未定义，那么全部IP都可以访问
            一般配置在Global.asax文件里，应用程序启动的时候就加载，在运行时，最好不要添加白名单，可能会涉及到并发问题
            </summary>
        </member>
        <member name="F:Frxs.ServiceCenter.Api.Core.WhiteIpManager.Instance">
            <summary>
            将白名单保存在静态全局缓存里
            </summary>
        </member>
        <member name="P:Frxs.ServiceCenter.Api.Core.WhiteIpManager.Ips">
            <summary>
            返回接口配置表
            </summary>
        </member>
    </members>
</doc>
