/* ***************************************************************************
 * <auto-generated>
 *     This code was generated by a tool.
 *     .NET CLR Runtime Version:4.0.30319.42000
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 * ***************************************************************************
 * FRXS(ISC) zhangliang4629@163.com 2016/07/27 11:15:24.080
 * **************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Frxs.ServiceCenter.DataSync.Message.PublisherClient
{
    /// <summary>
    /// 消息发布扩展 (共【30】个发布事件)
    /// </summary>
    public static class MessagePublisherClientExtension
    {
        
        #region Base - Events: 30
        
        /// <summary>
        /// 商品规格创建(Created)事件
        /// 备注：在规格（Attribute）中的使用
        /// 使用范围：规格（Attribute）新增操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="attributeId">商品规格编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Attribute.01</remarks>
        public static PublishResult AttributeCreated(this MessagePublisherClient client, int attributeId)
        {
            return client.Publish(new { WID = client.WID, Topic = "AttributeCreated", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { AttributeId = attributeId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 商品规格变更(Changed)事件
        /// 备注：在规格（Attribute）、规格值（AttributeValue）中的使用
        /// 使用范围：规格（Attribute）编辑,规格值（AttributeValue）增删改 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="attributeId">商品规格编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Attribute.02</remarks>
        public static PublishResult AttributeChanged(this MessagePublisherClient client, int attributeId)
        {
            return client.Publish(new { WID = client.WID, Topic = "AttributeChanged", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { AttributeId = attributeId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 商品规格移除(Remove)事件
        /// 备注：在 规格（Attribute）中的使用
        /// 使用范围：规格（Attribute）移除操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="attributeId">商品规格编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Attribute.03</remarks>
        public static PublishResult AttributeRemoved(this MessagePublisherClient client, int attributeId)
        {
            return client.Publish(new { WID = client.WID, Topic = "AttributeRemoved", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { AttributeId = attributeId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 品牌创建(Created)事件
        /// 备注：在 品牌（BrandCategory）中的使用
        /// 使用范围：品牌（BrandCategory）创建 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="brandId">品牌编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.BrandCategory.01</remarks>
        public static PublishResult BrandCategoryCreated(this MessagePublisherClient client, int brandId)
        {
            return client.Publish(new { WID = client.WID, Topic = "BrandCategoryCreated", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { BrandId = brandId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 品牌变更(Changed)事件
        /// 备注：在 品牌（BrandCategory）中的使用
        /// 使用范围：品牌（BrandCategory）编辑 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="brandId">品牌编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.BrandCategory.02</remarks>
        public static PublishResult BrandCategoryChanged(this MessagePublisherClient client, int brandId)
        {
            return client.Publish(new { WID = client.WID, Topic = "BrandCategoryChanged", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { BrandId = brandId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 品牌移除(Remove)事件
        /// 备注：在 品牌（BrandCategory）中的使用
        /// 使用范围：品牌（BrandCategory）移除 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="brandId">品牌编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.BrandCategory.03</remarks>
        public static PublishResult BrandCategoryRemoved(this MessagePublisherClient client, int brandId)
        {
            return client.Publish(new { WID = client.WID, Topic = "BrandCategoryRemoved", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { BrandId = brandId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 基本分类创建(Created)事件
        /// 备注：当基本分类在创建的时候，需要发布此事件
        /// 使用范围：基本分类（Category）创建 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="categoryId">基本分类编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：High，排序模式：Base.Category.01</remarks>
        public static PublishResult CategoryCreated(this MessagePublisherClient client, int categoryId)
        {
            return client.Publish(new { WID = client.WID, Topic = "CategoryCreated", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { CategoryId = categoryId })}, EventDegree.High);
        }
        
        /// <summary>
        /// 基本分类变更(Changed)事件
        /// 备注：在 基本分类（Category）中的使用
        /// 使用范围：基本分类（Category）编辑 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="categoryId">基本分类编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Category.02</remarks>
        public static PublishResult CategoryChanged(this MessagePublisherClient client, int categoryId)
        {
            return client.Publish(new { WID = client.WID, Topic = "CategoryChanged", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { CategoryId = categoryId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 基本分类移除(Remove)事件
        /// 备注：在 基本分类（Category）中的使用
        /// 使用范围：基本分类（Category）移除 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="categoryId">基本分类编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Category.03</remarks>
        public static PublishResult CategoryRemoved(this MessagePublisherClient client, int categoryId)
        {
            return client.Publish(new { WID = client.WID, Topic = "CategoryRemoved", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { CategoryId = categoryId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 商品创建(Created)事件
        /// 备注：商品创建会同时将其关联的母商品（BaseProduct）、商品规格属性关系列表（ProductAttribute）、商品规格图片（ProductAttributesPicture）、
        /// 商品条码列表（ProductBarCodes）、母商品文字详情（ProductDescription）、母商品图片详情列表（ProductDescriptionPicture）
        /// 商品主图列表（ProductPictureDetail）、商品供应商关系列表（ProductsVendor）、商品单位列表（ProductUnit） 同步过来
        /// 使用范围：商品创建 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="productId">商品编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Product.01</remarks>
        public static PublishResult ProductCreated(this MessagePublisherClient client, int productId)
        {
            return client.Publish(new { WID = client.WID, Topic = "ProductCreated", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { ProductId = productId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 商品变更(Changed)事件
        /// 备注：在母商品（BaseProduct）、商品规格属性关系（ProductAttribute）、商品规格属性图片（ProductAttributesPicture）、
        /// 商品条码（ProductBarCodes）、母商品图文详情（ProductDescription、ProductDescriptionPicture）、
        /// 商品主图（ProductPictureDetail）、商品供应商关系（ProductsVendor）、商品单位（ProductUnit）中的使用
        /// 使用范围：商品更改、母商品增删改,商品规格属性关系列表增删改、商品规格属性图片增删改、商品条码列表增删改、母商品图文详情增删改、
        /// 商品主图增删改、商品供应商关系列表增删改、商品单位列表增删改 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="productId">商品编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Product.02</remarks>
        public static PublishResult ProductChanged(this MessagePublisherClient client, int productId)
        {
            return client.Publish(new { WID = client.WID, Topic = "ProductChanged", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { ProductId = productId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 商品移除(Remove)事件
        /// 备注： 只同步商品（Product）中的数据（更改状态）过来
        /// 使用范围：商品移除 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="productId">商品编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Product.03</remarks>
        public static PublishResult ProductRemoved(this MessagePublisherClient client, int productId)
        {
            return client.Publish(new { WID = client.WID, Topic = "ProductRemoved", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { ProductId = productId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 门店创建(Created)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="shopID">门店编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Shop.01</remarks>
        public static PublishResult ShopCreated(this MessagePublisherClient client, int shopID)
        {
            return client.Publish(new { WID = client.WID, Topic = "ShopCreated", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { ShopID = shopID })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 门店变更(Changed)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="shopID">门店编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Shop.02</remarks>
        public static PublishResult ShopChanged(this MessagePublisherClient client, int shopID)
        {
            return client.Publish(new { WID = client.WID, Topic = "ShopChanged", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { ShopID = shopID })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 门店移除(Remove)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="shopID">门店编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Shop.03</remarks>
        public static PublishResult ShopRemoved(this MessagePublisherClient client, int shopID)
        {
            return client.Publish(new { WID = client.WID, Topic = "ShopRemoved", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { ShopID = shopID })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 运营分类变更(Changed)事件
        /// 备注：在  运营分类（ShopCategory）中的使用
        /// 使用范围：运营分类（ShopCategory）编辑 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="categoryId">运营分类编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.ShopCategory.01</remarks>
        public static PublishResult ShopCategoryChanged(this MessagePublisherClient client, int categoryId)
        {
            return client.Publish(new { WID = client.WID, Topic = "ShopCategoryChanged", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { CategoryId = categoryId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 运营分类创建(Created)事件
        /// 备注：在  运营分类（ShopCategory）中的使用
        /// 使用范围：运营分类（ShopCategory）创建 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="categoryId">运营分类编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.ShopCategory.01</remarks>
        public static PublishResult ShopCategoryCreated(this MessagePublisherClient client, int categoryId)
        {
            return client.Publish(new { WID = client.WID, Topic = "ShopCategoryCreated", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { CategoryId = categoryId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 运营分类移除(Remove)事件
        /// 备注：在  运营分类（ShopCategory）中的使用
        /// 使用范围：运营分类（ShopCategory）移除 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="categoryId">运营分类编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.ShopCategory.03</remarks>
        public static PublishResult ShopCategoryRemoved(this MessagePublisherClient client, int categoryId)
        {
            return client.Publish(new { WID = client.WID, Topic = "ShopCategoryRemoved", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { CategoryId = categoryId })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 数据字典创建(Created)事件
        /// 备注：在数据字典主表（SysDict）中的使用，同时同步 相关数据字典明细（SysDictDetail）列表数据
        /// 使用范围：数据字典（SysDict）创建 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="dictCode">数据字典编码</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.SysDict.01</remarks>
        public static PublishResult SysDictCreated(this MessagePublisherClient client, string dictCode)
        {
            return client.Publish(new { WID = client.WID, Topic = "SysDictCreated", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { DictCode = dictCode })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 数据字典 变更(Changed)事件
        /// 备注：在数据字典主表（SysDict）、数据字典明细表（SysDictDetail）中的使用
        /// 使用范围：数据字典（SysDict）编辑,数据字典明细表（SysDictDetail）增删改 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="dictCode">数据字典编码</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.SysDict.02</remarks>
        public static PublishResult SysDictChanged(this MessagePublisherClient client, string dictCode)
        {
            return client.Publish(new { WID = client.WID, Topic = "SysDictChanged", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { DictCode = dictCode })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 数据字典移除(Remove)事件
        /// 备注：在数据字典主表（SysDict）移除 数据的 同时 移除 相关数据字典明细（SysDictDetail）列表数据
        /// 使用范围：数据字典（SysDict）移除 操作中使用
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="dictCode">数据字典编码</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.SysDict.03</remarks>
        public static PublishResult SysDictRemoved(this MessagePublisherClient client, string dictCode)
        {
            return client.Publish(new { WID = client.WID, Topic = "SysDictRemoved", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { DictCode = dictCode })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 供应商创建(Created)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="vendorID">供应商编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Vendor.01</remarks>
        public static PublishResult VendorCreated(this MessagePublisherClient client, int vendorID)
        {
            return client.Publish(new { WID = client.WID, Topic = "VendorCreated", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { VendorID = vendorID })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 供应商变更(Changed)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="vendorID">供应商编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Vendor.02</remarks>
        public static PublishResult VendorChanged(this MessagePublisherClient client, int vendorID)
        {
            return client.Publish(new { WID = client.WID, Topic = "VendorChanged", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { VendorID = vendorID })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 供应商移除(Remove)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="vendorID">供应商编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Vendor.03</remarks>
        public static PublishResult VendorRemoved(this MessagePublisherClient client, int vendorID)
        {
            return client.Publish(new { WID = client.WID, Topic = "VendorRemoved", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { VendorID = vendorID })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 供应商类型创建(Created)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="vendorTypeID">供应商类型编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.VendorType.01</remarks>
        public static PublishResult VendorTypeCreated(this MessagePublisherClient client, int vendorTypeID)
        {
            return client.Publish(new { WID = client.WID, Topic = "VendorTypeCreated", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { VendorTypeID = vendorTypeID })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 供应商类型变更(Changed)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="vendorTypeID">供应商类型编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.VendorType.02</remarks>
        public static PublishResult VendorTypeChanged(this MessagePublisherClient client, int vendorTypeID)
        {
            return client.Publish(new { WID = client.WID, Topic = "VendorTypeChanged", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { VendorTypeID = vendorTypeID })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 供应商类型移除(Remove)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="vendorTypeID">供应商类型编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.VendorType.03</remarks>
        public static PublishResult VendorTypeRemoved(this MessagePublisherClient client, int vendorTypeID)
        {
            return client.Publish(new { WID = client.WID, Topic = "VendorTypeRemoved", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { VendorTypeID = vendorTypeID })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 仓库创建(Created)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="wid">仓库编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Warehouse.01</remarks>
        public static PublishResult WarehouseCreated(this MessagePublisherClient client, int wid)
        {
            return client.Publish(new { WID = client.WID, Topic = "WarehouseCreated", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { WID = wid })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 仓库改变(Changed)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="wid">仓库编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Warehouse.02</remarks>
        public static PublishResult WarehouseChanged(this MessagePublisherClient client, int wid)
        {
            return client.Publish(new { WID = client.WID, Topic = "WarehouseChanged", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { WID = wid })}, EventDegree.Normal);
        }
        
        /// <summary>
        /// 仓库移除(Removed)事件
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>
        /// <param name="wid">仓库编号</param>
        /// <returns>PublishResult</returns>
        /// <remarks>重要度：Normal，排序模式：Base.Warehouse.03</remarks>
        public static PublishResult WarehouseRemoved(this MessagePublisherClient client, int wid)
        {
            return client.Publish(new { WID = client.WID, Topic = "WarehouseRemoved", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { WID = wid })}, EventDegree.Normal);
        }
        
        #endregion
    }
}
