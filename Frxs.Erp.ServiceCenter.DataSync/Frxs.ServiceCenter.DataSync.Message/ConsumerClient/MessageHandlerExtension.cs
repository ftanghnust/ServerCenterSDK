/* ***************************************************************************
 * <auto-generated>
 *     This code was generated by a tool.
 *     .NET CLR Runtime Version:4.0.30319.42000
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 * ***************************************************************************
 * FRXS(ISC) zhangliang4629@163.com 2016/07/27 10:41:14.223
 * **************************************************************************/
using System;
using System.Collections.Generic;
using Frxs.ServiceCenter.DataSync.Message.ConsumerClient.EventArgs;

namespace Frxs.ServiceCenter.DataSync.Message.ConsumerClient
{
    /// <summary>
    /// 消息消费客户端(共【30】个触发事件)
    /// </summary>
    public partial class MessageHandler
    {
        
        #region Base - Events: 30
        
        /// <summary>
        /// 商品规格创建(Created)事件
        /// 备注：在规格（Attribute）中的使用
        /// 使用范围：规格（Attribute）新增操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">AttributeCreatedEventAgrs</param>
        /// <see cref="AttributeCreatedEventAgrs"/>
        protected virtual void OnAttributeCreated(object sender, AttributeCreatedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 商品规格变更(Changed)事件
        /// 备注：在规格（Attribute）、规格值（AttributeValue）中的使用
        /// 使用范围：规格（Attribute）编辑,规格值（AttributeValue）增删改 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">AttributeChangedEventAgrs</param>
        /// <see cref="AttributeChangedEventAgrs"/>
        protected virtual void OnAttributeChanged(object sender, AttributeChangedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 商品规格移除(Remove)事件
        /// 备注：在 规格（Attribute）中的使用
        /// 使用范围：规格（Attribute）移除操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">AttributeRemovedEventAgrs</param>
        /// <see cref="AttributeRemovedEventAgrs"/>
        protected virtual void OnAttributeRemoved(object sender, AttributeRemovedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 品牌创建(Created)事件
        /// 备注：在 品牌（BrandCategory）中的使用
        /// 使用范围：品牌（BrandCategory）创建 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">BrandCategoryCreatedEventAgrs</param>
        /// <see cref="BrandCategoryCreatedEventAgrs"/>
        protected virtual void OnBrandCategoryCreated(object sender, BrandCategoryCreatedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 品牌变更(Changed)事件
        /// 备注：在 品牌（BrandCategory）中的使用
        /// 使用范围：品牌（BrandCategory）编辑 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">BrandCategoryChangedEventAgrs</param>
        /// <see cref="BrandCategoryChangedEventAgrs"/>
        protected virtual void OnBrandCategoryChanged(object sender, BrandCategoryChangedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 品牌移除(Remove)事件
        /// 备注：在 品牌（BrandCategory）中的使用
        /// 使用范围：品牌（BrandCategory）移除 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">BrandCategoryRemovedEventAgrs</param>
        /// <see cref="BrandCategoryRemovedEventAgrs"/>
        protected virtual void OnBrandCategoryRemoved(object sender, BrandCategoryRemovedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 基本分类创建(Created)事件
        /// 备注：当基本分类在创建的时候，需要发布此事件
        /// 使用范围：基本分类（Category）创建 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">CategoryCreatedEventAgrs</param>
        /// <see cref="CategoryCreatedEventAgrs"/>
        protected virtual void OnCategoryCreated(object sender, CategoryCreatedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 基本分类变更(Changed)事件
        /// 备注：在 基本分类（Category）中的使用
        /// 使用范围：基本分类（Category）编辑 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">CategoryChangedEventAgrs</param>
        /// <see cref="CategoryChangedEventAgrs"/>
        protected virtual void OnCategoryChanged(object sender, CategoryChangedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 基本分类移除(Remove)事件
        /// 备注：在 基本分类（Category）中的使用
        /// 使用范围：基本分类（Category）移除 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">CategoryRemovedEventAgrs</param>
        /// <see cref="CategoryRemovedEventAgrs"/>
        protected virtual void OnCategoryRemoved(object sender, CategoryRemovedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 商品创建(Created)事件
        /// 备注：商品创建会同时将其关联的母商品（BaseProduct）、商品规格属性关系列表（ProductAttribute）、商品规格图片（ProductAttributesPicture）、
        /// 商品条码列表（ProductBarCodes）、母商品文字详情（ProductDescription）、母商品图片详情列表（ProductDescriptionPicture）
        /// 商品主图列表（ProductPictureDetail）、商品供应商关系列表（ProductsVendor）、商品单位列表（ProductUnit） 同步过来
        /// 使用范围：商品创建 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">ProductCreatedEventAgrs</param>
        /// <see cref="ProductCreatedEventAgrs"/>
        protected virtual void OnProductCreated(object sender, ProductCreatedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 商品变更(Changed)事件
        /// 备注：在母商品（BaseProduct）、商品规格属性关系（ProductAttribute）、商品规格属性图片（ProductAttributesPicture）、
        /// 商品条码（ProductBarCodes）、母商品图文详情（ProductDescription、ProductDescriptionPicture）、
        /// 商品主图（ProductPictureDetail）、商品供应商关系（ProductsVendor）、商品单位（ProductUnit）中的使用
        /// 使用范围：商品更改、母商品增删改,商品规格属性关系列表增删改、商品规格属性图片增删改、商品条码列表增删改、母商品图文详情增删改、
        /// 商品主图增删改、商品供应商关系列表增删改、商品单位列表增删改 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">ProductChangedEventAgrs</param>
        /// <see cref="ProductChangedEventAgrs"/>
        protected virtual void OnProductChanged(object sender, ProductChangedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 商品移除(Remove)事件
        /// 备注： 只同步商品（Product）中的数据（更改状态）过来
        /// 使用范围：商品移除 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">ProductRemovedEventAgrs</param>
        /// <see cref="ProductRemovedEventAgrs"/>
        protected virtual void OnProductRemoved(object sender, ProductRemovedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 门店创建(Created)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">ShopCreatedEventAgrs</param>
        /// <see cref="ShopCreatedEventAgrs"/>
        protected virtual void OnShopCreated(object sender, ShopCreatedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 门店变更(Changed)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">ShopChangedEventAgrs</param>
        /// <see cref="ShopChangedEventAgrs"/>
        protected virtual void OnShopChanged(object sender, ShopChangedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 门店移除(Remove)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">ShopRemovedEventAgrs</param>
        /// <see cref="ShopRemovedEventAgrs"/>
        protected virtual void OnShopRemoved(object sender, ShopRemovedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 运营分类变更(Changed)事件
        /// 备注：在  运营分类（ShopCategory）中的使用
        /// 使用范围：运营分类（ShopCategory）编辑 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">ShopCategoryChangedEventAgrs</param>
        /// <see cref="ShopCategoryChangedEventAgrs"/>
        protected virtual void OnShopCategoryChanged(object sender, ShopCategoryChangedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 运营分类创建(Created)事件
        /// 备注：在  运营分类（ShopCategory）中的使用
        /// 使用范围：运营分类（ShopCategory）创建 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">ShopCategoryCreatedEventAgrs</param>
        /// <see cref="ShopCategoryCreatedEventAgrs"/>
        protected virtual void OnShopCategoryCreated(object sender, ShopCategoryCreatedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 运营分类移除(Remove)事件
        /// 备注：在  运营分类（ShopCategory）中的使用
        /// 使用范围：运营分类（ShopCategory）移除 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">ShopCategoryRemovedEventAgrs</param>
        /// <see cref="ShopCategoryRemovedEventAgrs"/>
        protected virtual void OnShopCategoryRemoved(object sender, ShopCategoryRemovedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 数据字典创建(Created)事件
        /// 备注：在数据字典主表（SysDict）中的使用，同时同步 相关数据字典明细（SysDictDetail）列表数据
        /// 使用范围：数据字典（SysDict）创建 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">SysDictCreatedEventAgrs</param>
        /// <see cref="SysDictCreatedEventAgrs"/>
        protected virtual void OnSysDictCreated(object sender, SysDictCreatedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 数据字典 变更(Changed)事件
        /// 备注：在数据字典主表（SysDict）、数据字典明细表（SysDictDetail）中的使用
        /// 使用范围：数据字典（SysDict）编辑,数据字典明细表（SysDictDetail）增删改 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">SysDictChangedEventAgrs</param>
        /// <see cref="SysDictChangedEventAgrs"/>
        protected virtual void OnSysDictChanged(object sender, SysDictChangedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 数据字典移除(Remove)事件
        /// 备注：在数据字典主表（SysDict）移除 数据的 同时 移除 相关数据字典明细（SysDictDetail）列表数据
        /// 使用范围：数据字典（SysDict）移除 操作中使用
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">SysDictRemovedEventAgrs</param>
        /// <see cref="SysDictRemovedEventAgrs"/>
        protected virtual void OnSysDictRemoved(object sender, SysDictRemovedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 供应商创建(Created)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">VendorCreatedEventAgrs</param>
        /// <see cref="VendorCreatedEventAgrs"/>
        protected virtual void OnVendorCreated(object sender, VendorCreatedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 供应商变更(Changed)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">VendorChangedEventAgrs</param>
        /// <see cref="VendorChangedEventAgrs"/>
        protected virtual void OnVendorChanged(object sender, VendorChangedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 供应商移除(Remove)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">VendorRemovedEventAgrs</param>
        /// <see cref="VendorRemovedEventAgrs"/>
        protected virtual void OnVendorRemoved(object sender, VendorRemovedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 供应商类型创建(Created)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">VendorTypeCreatedEventAgrs</param>
        /// <see cref="VendorTypeCreatedEventAgrs"/>
        protected virtual void OnVendorTypeCreated(object sender, VendorTypeCreatedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 供应商类型变更(Changed)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">VendorTypeChangedEventAgrs</param>
        /// <see cref="VendorTypeChangedEventAgrs"/>
        protected virtual void OnVendorTypeChanged(object sender, VendorTypeChangedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 供应商类型移除(Remove)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">VendorTypeRemovedEventAgrs</param>
        /// <see cref="VendorTypeRemovedEventAgrs"/>
        protected virtual void OnVendorTypeRemoved(object sender, VendorTypeRemovedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 仓库创建(Created)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">WarehouseCreatedEventAgrs</param>
        /// <see cref="WarehouseCreatedEventAgrs"/>
        protected virtual void OnWarehouseCreated(object sender, WarehouseCreatedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 仓库改变(Changed)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">WarehouseChangedEventAgrs</param>
        /// <see cref="WarehouseChangedEventAgrs"/>
        protected virtual void OnWarehouseChanged(object sender, WarehouseChangedEventAgrs e)
        {
        }
        
        /// <summary>
        /// 仓库移除(Removed)事件
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">WarehouseRemovedEventAgrs</param>
        /// <see cref="WarehouseRemovedEventAgrs"/>
        protected virtual void OnWarehouseRemoved(object sender, WarehouseRemovedEventAgrs e)
        {
        }
        
        #endregion
        
        /// <summary>
        /// 消费消息
        /// </summary>
        /// <param name="messages">消息集合</param>
        internal void Start(IEnumerable<Message<dynamic>> messages)
        {
            //串行化消费消息
            foreach (var item in messages)
            {
                //初始化重试次数
                int currentRetry = this.MaxRetries;
                
                #region Base - Events: 30
                
                // 商品规格变更(Changed)事件
                // 备注：在规格（Attribute）、规格值（AttributeValue）中的使用
                // 使用范围：规格（Attribute）编辑,规格值（AttributeValue）增删改 操作中使用
                if (item.Topic.Equals("AttributeChanged"))
                {
                    var eventArgs = this.ConvertToEventArgs<AttributeChangedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnAttributeChanged(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 商品规格创建(Created)事件
                // 备注：在规格（Attribute）中的使用
                // 使用范围：规格（Attribute）新增操作中使用
                if (item.Topic.Equals("AttributeCreated"))
                {
                    var eventArgs = this.ConvertToEventArgs<AttributeCreatedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnAttributeCreated(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 商品规格移除(Remove)事件
                // 备注：在 规格（Attribute）中的使用
                // 使用范围：规格（Attribute）移除操作中使用
                if (item.Topic.Equals("AttributeRemoved"))
                {
                    var eventArgs = this.ConvertToEventArgs<AttributeRemovedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnAttributeRemoved(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 品牌变更(Changed)事件
                // 备注：在 品牌（BrandCategory）中的使用
                // 使用范围：品牌（BrandCategory）编辑 操作中使用
                if (item.Topic.Equals("BrandCategoryChanged"))
                {
                    var eventArgs = this.ConvertToEventArgs<BrandCategoryChangedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnBrandCategoryChanged(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 品牌创建(Created)事件
                // 备注：在 品牌（BrandCategory）中的使用
                // 使用范围：品牌（BrandCategory）创建 操作中使用
                if (item.Topic.Equals("BrandCategoryCreated"))
                {
                    var eventArgs = this.ConvertToEventArgs<BrandCategoryCreatedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnBrandCategoryCreated(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 品牌移除(Remove)事件
                // 备注：在 品牌（BrandCategory）中的使用
                // 使用范围：品牌（BrandCategory）移除 操作中使用
                if (item.Topic.Equals("BrandCategoryRemoved"))
                {
                    var eventArgs = this.ConvertToEventArgs<BrandCategoryRemovedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnBrandCategoryRemoved(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 基本分类变更(Changed)事件
                // 备注：在 基本分类（Category）中的使用
                // 使用范围：基本分类（Category）编辑 操作中使用
                if (item.Topic.Equals("CategoryChanged"))
                {
                    var eventArgs = this.ConvertToEventArgs<CategoryChangedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnCategoryChanged(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 基本分类创建(Created)事件
                // 备注：当基本分类在创建的时候，需要发布此事件
                // 使用范围：基本分类（Category）创建 操作中使用
                if (item.Topic.Equals("CategoryCreated"))
                {
                    var eventArgs = this.ConvertToEventArgs<CategoryCreatedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnCategoryCreated(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 基本分类移除(Remove)事件
                // 备注：在 基本分类（Category）中的使用
                // 使用范围：基本分类（Category）移除 操作中使用
                if (item.Topic.Equals("CategoryRemoved"))
                {
                    var eventArgs = this.ConvertToEventArgs<CategoryRemovedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnCategoryRemoved(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 商品变更(Changed)事件
                // 备注：在母商品（BaseProduct）、商品规格属性关系（ProductAttribute）、商品规格属性图片（ProductAttributesPicture）、
                // 商品条码（ProductBarCodes）、母商品图文详情（ProductDescription、ProductDescriptionPicture）、
                // 商品主图（ProductPictureDetail）、商品供应商关系（ProductsVendor）、商品单位（ProductUnit）中的使用
                // 使用范围：商品更改、母商品增删改,商品规格属性关系列表增删改、商品规格属性图片增删改、商品条码列表增删改、母商品图文详情增删改、
                // 商品主图增删改、商品供应商关系列表增删改、商品单位列表增删改 操作中使用
                if (item.Topic.Equals("ProductChanged"))
                {
                    var eventArgs = this.ConvertToEventArgs<ProductChangedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnProductChanged(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 商品创建(Created)事件
                // 备注：商品创建会同时将其关联的母商品（BaseProduct）、商品规格属性关系列表（ProductAttribute）、商品规格图片（ProductAttributesPicture）、
                // 商品条码列表（ProductBarCodes）、母商品文字详情（ProductDescription）、母商品图片详情列表（ProductDescriptionPicture）
                // 商品主图列表（ProductPictureDetail）、商品供应商关系列表（ProductsVendor）、商品单位列表（ProductUnit） 同步过来
                // 使用范围：商品创建 操作中使用
                if (item.Topic.Equals("ProductCreated"))
                {
                    var eventArgs = this.ConvertToEventArgs<ProductCreatedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnProductCreated(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 商品移除(Remove)事件
                // 备注： 只同步商品（Product）中的数据（更改状态）过来
                // 使用范围：商品移除 操作中使用
                if (item.Topic.Equals("ProductRemoved"))
                {
                    var eventArgs = this.ConvertToEventArgs<ProductRemovedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnProductRemoved(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 运营分类变更(Changed)事件
                // 备注：在  运营分类（ShopCategory）中的使用
                // 使用范围：运营分类（ShopCategory）编辑 操作中使用
                if (item.Topic.Equals("ShopCategoryChanged"))
                {
                    var eventArgs = this.ConvertToEventArgs<ShopCategoryChangedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnShopCategoryChanged(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 运营分类创建(Created)事件
                // 备注：在  运营分类（ShopCategory）中的使用
                // 使用范围：运营分类（ShopCategory）创建 操作中使用
                if (item.Topic.Equals("ShopCategoryCreated"))
                {
                    var eventArgs = this.ConvertToEventArgs<ShopCategoryCreatedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnShopCategoryCreated(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 运营分类移除(Remove)事件
                // 备注：在  运营分类（ShopCategory）中的使用
                // 使用范围：运营分类（ShopCategory）移除 操作中使用
                if (item.Topic.Equals("ShopCategoryRemoved"))
                {
                    var eventArgs = this.ConvertToEventArgs<ShopCategoryRemovedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnShopCategoryRemoved(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 门店变更(Changed)事件
                if (item.Topic.Equals("ShopChanged"))
                {
                    var eventArgs = this.ConvertToEventArgs<ShopChangedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnShopChanged(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 门店创建(Created)事件
                if (item.Topic.Equals("ShopCreated"))
                {
                    var eventArgs = this.ConvertToEventArgs<ShopCreatedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnShopCreated(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 门店移除(Remove)事件
                if (item.Topic.Equals("ShopRemoved"))
                {
                    var eventArgs = this.ConvertToEventArgs<ShopRemovedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnShopRemoved(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 数据字典 变更(Changed)事件
                // 备注：在数据字典主表（SysDict）、数据字典明细表（SysDictDetail）中的使用
                // 使用范围：数据字典（SysDict）编辑,数据字典明细表（SysDictDetail）增删改 操作中使用
                if (item.Topic.Equals("SysDictChanged"))
                {
                    var eventArgs = this.ConvertToEventArgs<SysDictChangedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnSysDictChanged(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 数据字典创建(Created)事件
                // 备注：在数据字典主表（SysDict）中的使用，同时同步 相关数据字典明细（SysDictDetail）列表数据
                // 使用范围：数据字典（SysDict）创建 操作中使用
                if (item.Topic.Equals("SysDictCreated"))
                {
                    var eventArgs = this.ConvertToEventArgs<SysDictCreatedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnSysDictCreated(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 数据字典移除(Remove)事件
                // 备注：在数据字典主表（SysDict）移除 数据的 同时 移除 相关数据字典明细（SysDictDetail）列表数据
                // 使用范围：数据字典（SysDict）移除 操作中使用
                if (item.Topic.Equals("SysDictRemoved"))
                {
                    var eventArgs = this.ConvertToEventArgs<SysDictRemovedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnSysDictRemoved(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 供应商变更(Changed)事件
                if (item.Topic.Equals("VendorChanged"))
                {
                    var eventArgs = this.ConvertToEventArgs<VendorChangedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnVendorChanged(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 供应商创建(Created)事件
                if (item.Topic.Equals("VendorCreated"))
                {
                    var eventArgs = this.ConvertToEventArgs<VendorCreatedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnVendorCreated(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 供应商移除(Remove)事件
                if (item.Topic.Equals("VendorRemoved"))
                {
                    var eventArgs = this.ConvertToEventArgs<VendorRemovedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnVendorRemoved(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 供应商类型变更(Changed)事件
                if (item.Topic.Equals("VendorTypeChanged"))
                {
                    var eventArgs = this.ConvertToEventArgs<VendorTypeChangedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnVendorTypeChanged(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 供应商类型创建(Created)事件
                if (item.Topic.Equals("VendorTypeCreated"))
                {
                    var eventArgs = this.ConvertToEventArgs<VendorTypeCreatedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnVendorTypeCreated(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 供应商类型移除(Remove)事件
                if (item.Topic.Equals("VendorTypeRemoved"))
                {
                    var eventArgs = this.ConvertToEventArgs<VendorTypeRemovedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnVendorTypeRemoved(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 仓库改变(Changed)事件
                if (item.Topic.Equals("WarehouseChanged"))
                {
                    var eventArgs = this.ConvertToEventArgs<WarehouseChangedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnWarehouseChanged(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 仓库创建(Created)事件
                if (item.Topic.Equals("WarehouseCreated"))
                {
                    var eventArgs = this.ConvertToEventArgs<WarehouseCreatedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnWarehouseCreated(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                // 仓库移除(Removed)事件
                if (item.Topic.Equals("WarehouseRemoved"))
                {
                    var eventArgs = this.ConvertToEventArgs<WarehouseRemovedEventAgrs>(item);
                    while (currentRetry > 0)
                    {
                        try
                        {
                            this.OnWarehouseRemoved(this, eventArgs);
                            if (this.OnMessageExecutedSuccess != null)
                                this.OnMessageExecutedSuccess(this, eventArgs);
                            break;
                        }
                        catch (Exception exc)
                        {
                            currentRetry--;
                            if (this.OnMessageExecutedException != null)
                                this.OnMessageExecutedException(this, eventArgs, exc);
                        }
                    }
                    continue;
                }
                
                #endregion
            }
        }
    }
}
