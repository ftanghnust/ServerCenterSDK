<%@ Page Language="C#" %>
<%@ Assembly Name="System.Xml" %>
<%@ Assembly Name="System.Xml.Linq" %>
<%@ Assembly Name="Frxs.ServiceCenter.Api.Core" %>
<%@ Assembly Name="Frxs.ServiceCenter.DataSync.Message.Server" %>
<%@ Import Namespace="Frxs.ServiceCenter.Api.Core" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Reflection" %>
<%@ Import Namespace="System.Web" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.Xml.Linq" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Frxs.ServiceCenter.DataSync.Message.Server.Actions" %>

<script runat="server">
    public RequestContext RequestContext;
    public ActionResult ActionResult;
</script>

<%
    var responseDto = this.ActionResult.Data as Frxs.ServiceCenter.DataSync.Message.Server.IEvenSelector;

    //文档路径
    var docPath = "~/bin/{0}.xml".With(this.RequestContext.ActionDescriptor.ActionType.Assembly.GetName().Name);
    XmlDocument xmlDoc = new XmlDocument();
    xmlDoc.Load(this.RequestContext.HttpContext.Server.MapPath(docPath));
%>

/* ***************************************************************************
 * <auto-generated>
 *     This code was generated by a tool.
 *     .NET CLR Runtime Version:<%:Environment.Version.Major %>.<%:Environment.Version.Minor %>.<%:Environment.Version.Build %>.<%:Environment.Version.Revision %>
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 * ***************************************************************************
 * FRXS(ISC) zhangliang4629@163.com <%:DateTime.Now.ToString("yyyy\\/MM\\/dd HH:mm:ss.fff") %>
 * **************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

<!--NewLine-->

namespace Frxs.ServiceCenter.DataSync.Message.PublisherClient
{
    /// <summary>
    /// 消息发布扩展 (共【<%:responseDto.GetEventDescriptors().Count() %>】个发布事件)
    /// </summary>
    public static class MessagePublisherClientExtension
    {

<%foreach (var x in responseDto.GetEventDescriptors().GroupBy(o => o.GroupName))
    {
 %>

        <!--NewLine-->
        #region <%:x.Key %> - Events: <%:x.Count() %>

<%
        foreach (var item in x.OrderBy(o=>o.GroupName).ThenBy(o=>o.SubGroupName))
        {

            //获取所有的摘要属性
            var propertys = item.MessageBodyType.GetProperties(BindingFlags.Instance | BindingFlags.Public);

            IList<string> methodParams = new List<string>();
            IList<string> postJsonParams = new List<string>();
            Dictionary<string, string> sums = new Dictionary<string, string>();

            foreach (var p in propertys)
            {
                //将首字母小写
                var name = p.Name[0].ToString().ToLower() + p.Name.Substring(1, p.Name.Length - 1);
                name = name == "iD" ? "id" : name;
                name = name == "wID" ? "wid" : name;

                //参数类型
                var propertyName = p.PropertyType.Name;

                switch (propertyName)
                {
                    case "Int32":
                        propertyName = "int";
                        break;
                    case "Int64":
                        propertyName = "long";
                        break;
                    case "String":
                        propertyName = "string";
                        break;
                    default:
                        propertyName = p.PropertyType.Name;
                        break;
                }

                //方法参数
                methodParams.Add(string.Format("{0} {1}", propertyName, name));
                //上送的消息摘要
                postJsonParams.Add(string.Format("{0} = {1}", p.Name, name));

                //注释信息
                var psummary = xmlDoc.SelectSingleNode("doc/members/member[@name='P:{0}.{1}']".With(p.DeclaringType.FullName, p.Name));
                if (psummary != null)
                {
                    sums.Add(name, psummary.InnerText.Trim());
                }
                else
                {
                    sums.Add(name, "");
                }
            }

            //注释说明
            var summary = xmlDoc.SelectSingleNode("doc/members/member[@name='T:{0}']".With(item.MessageBodyType.FullName));
            var summaryTexts = (summary.IsNull() ? "" : summary.InnerText.Trim()).Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);

 %>

        <!--NewLine-->
        /// <summary>
        <%foreach (var text in summaryTexts)
            { %>
        /// <%: text.Trim()%>
        <%} %>
        /// </summary>
        /// <param name="client">MessagePublisherClient</param>

        <%foreach (var ps in sums)
            { %>
        /// <param name="<%:ps.Key %>"><%:ps.Value %></param>
        <%} %>

        /// <returns>PublishResult</returns>

        /// <remarks>重要度：<%:item.EventDegree %>，排序模式：<%:item.GroupName %>.<%:item.SubGroupName %></remarks>

        public static PublishResult <%:item.EventName %>(this MessagePublisherClient client, <%=string.Join(", ", methodParams.ToArray()) %>)
        {
            return client.Publish(new { WID = client.WID, Topic = "<%:item.EventName %>", Created = DateTime.Now,
                Body = client.JosnSerializer.Serialize(new { <%:string.Join(", ", postJsonParams.ToArray()) %> })}, EventDegree.<%:item.EventDegree %>);
        }

<%}%>

        <!--NewLine-->
        #endregion

<%    } %>

    }
}
