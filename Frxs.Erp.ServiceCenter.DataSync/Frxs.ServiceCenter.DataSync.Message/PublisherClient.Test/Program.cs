/* ***************************************************************************
 * <auto-generated>
 *     This code was generated by a tool.
 *     .NET CLR Runtime Version:4.0.30319.42000
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 * ***************************************************************************
 * FRXS(ISC) zhangliang4629@163.com 2016/07/21 15:41:38.117
 * **************************************************************************/
using Frxs.ServiceCenter.DataSync.Message.PublisherClient;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    /// <summary>
    /// 发布端测试事件
    /// </summary>
    class Program
    {
        /// <summary>
        /// 默认的序列化反序列化实现(Newtonsoft.Json)
        /// </summary>
        public class DefaultJosnSerializer : IJosnSerializer
        {
            /// <summary>
            /// 反序列化
            /// </summary>
            /// <typeparam name="T">需要反序列化的类型</typeparam>
            /// <param name="value">输入的JSON字符串</param>
            /// <returns></returns>
            public T Deserialize<T>(string value)
            {
                return JsonConvert.DeserializeObject<T>(value);
            }

            /// <summary>
            /// 序列化
            /// </summary>
            /// <param name="value">待序列化的对象</param>
            /// <returns>返回序列化后的JSON字符串</returns>
            public string Serialize(object value)
            {
                return JsonConvert.SerializeObject(value);
            }
        }

        /// <summary>
        /// 消息发布扩展 (共【27】个发布事件)
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {
            //初始化消息发布者客户端
            var publisherClient = new MessagePublisherClient("http://m.api.com/Api",
                //客户端自己实现的序列化与反序列化对象
                new DefaultJosnSerializer(),
                //获取仓库编号委托，需要客户端自己实现具体的获取方式
                () => 0) { 
                Enabled = true 
            };

            //测试循环触发领域事件，发布消息
            Parallel.For(0, 1, i =>
            {
                Console.WriteLine(i);
                PublishResult r = null;

                #region Base - Events: 27

                 //商品规格创建(Created)事件
                 //备注：在规格（Attribute）中的使用
                 //使用范围：规格（Attribute）新增操作中使用
                 //<param name="attributeId">商品规格编号</param>

                r = publisherClient.AttributeCreated(1);
                FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     AttributeCreated");

                //r = publisherClient.AttributeCreated(4);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     AttributeCreated");

                //r = publisherClient.AttributeCreated(2);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     AttributeCreated");

                //// 商品规格变更(Changed)事件
                //// 备注：在规格（Attribute）、规格值（AttributeValue）中的使用
                //// 使用范围：规格（Attribute）编辑,规格值（AttributeValue）增删改 操作中使用
                //// <param name="attributeId">商品规格编号</param>
                //r = publisherClient.AttributeChanged(2);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     AttributeChanged");

                //// 商品规格移除(Remove)事件
                //// 备注：在 规格（Attribute）中的使用
                //// 使用范围：规格（Attribute）移除操作中使用
                //// <param name="attributeId">商品规格编号</param>
                //r = publisherClient.AttributeRemoved(2);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     AttributeRemoved");

                //// 品牌创建(Created)事件
                //// 备注：在 品牌（BrandCategory）中的使用
                //// 使用范围：品牌（BrandCategory）创建 操作中使用
                //// <param name="brandId">品牌编号</param>
                //r = publisherClient.BrandCategoryCreated(3);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     BrandCategoryCreated");

                //// 品牌变更(Changed)事件
                //// 备注：在 品牌（BrandCategory）中的使用
                //// 使用范围：品牌（BrandCategory）编辑 操作中使用
                //// <param name="brandId">品牌编号</param>
                //r = publisherClient.BrandCategoryChanged(3);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     BrandCategoryChanged");

                //// 品牌移除(Remove)事件
                //// 备注：在 品牌（BrandCategory）中的使用
                //// 使用范围：品牌（BrandCategory）移除 操作中使用
                //// <param name="brandId">品牌编号</param>
                //r = publisherClient.BrandCategoryRemoved(3);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     BrandCategoryRemoved");

                // //基本分类创建(Created)事件
                // //备注：当基本分类在创建的时候，需要发布此事件
                // //使用范围：基本分类（Category）创建 操作中使用
                // //<param name="categoryId">基本分类编号</param>
                //r = publisherClient.CategoryCreated(1);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     CategoryCreated");

                //// 基本分类变更(Changed)事件
                //// 备注：在 基本分类（Category）中的使用
                //// 使用范围：基本分类（Category）编辑 操作中使用
                //// <param name="categoryId">基本分类编号</param>
                //r = publisherClient.CategoryChanged(1);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     CategoryChanged");

                //// 基本分类移除(Remove)事件
                //// 备注：在 基本分类（Category）中的使用
                //// 使用范围：基本分类（Category）移除 操作中使用
                //// <param name="categoryId">基本分类编号</param>
                //r = publisherClient.CategoryRemoved(1);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     CategoryRemoved");

                // //商品创建(Created)事件
                // //备注：商品创建会同时将其关联的母商品（BaseProduct）、商品规格属性关系列表（ProductAttribute）、商品规格图片（ProductAttributesPicture）、
                // //商品条码列表（ProductBarCodes）、母商品文字详情（ProductDescription）、母商品图片详情列表（ProductDescriptionPicture）
                // //商品主图列表（ProductPictureDetail）、商品供应商关系列表（ProductsVendor）、商品单位列表（ProductUnit） 同步过来
                // //使用范围：商品创建 操作中使用
                // //<param name="productId">商品编号</param>
                //r = publisherClient.ProductCreated(70014);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     ProductCreated");

                //// 商品变更(Changed)事件
                //// 备注：在母商品（BaseProduct）、商品规格属性关系（ProductAttribute）、商品规格属性图片（ProductAttributesPicture）、
                //// 商品条码（ProductBarCodes）、母商品图文详情（ProductDescription、ProductDescriptionPicture）、
                //// 商品主图（ProductPictureDetail）、商品供应商关系（ProductsVendor）、商品单位（ProductUnit）中的使用
                //// 使用范围：商品更改、母商品增删改,商品规格属性关系列表增删改、商品规格属性图片增删改、商品条码列表增删改、母商品图文详情增删改、
                //// 商品主图增删改、商品供应商关系列表增删改、商品单位列表增删改 操作中使用
                //// <param name="productId">商品编号</param>
                r = publisherClient.ProductChanged(70014);
                FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     ProductChanged");

                //// 商品移除(Remove)事件
                //// 备注： 只同步商品（Product）中的数据（更改状态）过来
                //// 使用范围：商品移除 操作中使用
                //// <param name="productId">商品编号</param>
                //r = publisherClient.ProductRemoved(70014);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     ProductRemoved");

                //// 门店创建(Created)事件
                //// <param name="shopID">门店编号</param>
                //r = publisherClient.ShopCreated(10);
                ////r = publisherClient.ShopCreated(6);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     ShopCreated");

                //// 门店变更(Changed)事件
                //// <param name="shopID">门店编号</param>
                //r = publisherClient.ShopChanged(10);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     ShopChanged");

                //// 门店移除(Remove)事件
                //// <param name="shopID">门店编号</param>
                //r = publisherClient.ShopRemoved(10);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     ShopRemoved");

                //// 运营分类变更(Changed)事件
                //// 备注：在  运营分类（ShopCategory）中的使用
                //// 使用范围：运营分类（ShopCategory）编辑 操作中使用
                //// <param name="categoryId">运营分类编号</param>
                //r = publisherClient.ShopCategoryChanged(1);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     ShopCategoryChanged");

                //// 运营分类创建(Created)事件
                //// 备注：在  运营分类（ShopCategory）中的使用
                //// 使用范围：运营分类（ShopCategory）创建 操作中使用
                //// <param name="categoryId">运营分类编号</param>
                //r = publisherClient.ShopCategoryCreated(1);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     ShopCategoryCreated");

                //// 运营分类移除(Remove)事件
                //// 备注：在  运营分类（ShopCategory）中的使用
                //// 使用范围：运营分类（ShopCategory）移除 操作中使用
                //// <param name="categoryId">运营分类编号</param>
                //r = publisherClient.ShopCategoryRemoved(1);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     ShopCategoryRemoved");


                // 数据字典创建(Created)事件
                // 备注：在数据字典主表（SysDict）中的使用，同时同步 相关数据字典明细（SysDictDetail）列表数据
                // 使用范围：数据字典（SysDict）创建 操作中使用
                // <param name="dictCode">数据字典编码</param>
                r = publisherClient.SysDictCreated("SaleFeeCode");
                FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     SysDictCreated");

                // 数据字典 变更(Changed)事件
                // 备注：在数据字典主表（SysDict）、数据字典明细表（SysDictDetail）中的使用
                // 使用范围：数据字典（SysDict）编辑,数据字典明细表（SysDictDetail）增删改 操作中使用
                // <param name="dictCode">数据字典编码</param>
                r = publisherClient.SysDictChanged("SaleFeeCode");
                FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     SysDictChanged");

                //// 数据字典移除(Remove)事件
                //// 备注：在数据字典主表（SysDict）移除 数据的 同时 移除 相关数据字典明细（SysDictDetail）列表数据
                //// 使用范围：数据字典（SysDict）移除 操作中使用
                //// <param name="dictCode">数据字典编码</param>
                //r = publisherClient.SysDictRemoved("SaleFeeCode");
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     SysDictRemoved");

                //// 供应商创建(Created)事件
                //// <param name="vendorID">供应商编号</param>
                //r = publisherClient.VendorCreated(7);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     VendorCreated");

                //// 供应商变更(Changed)事件
                //// <param name="vendorID">供应商编号</param>
                //r = publisherClient.VendorChanged(7);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     VendorChanged");

                //// 供应商移除(Remove)事件
                //// <param name="vendorID">供应商编号</param>
                //r = publisherClient.VendorRemoved(7);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     VendorRemoved");

                //// 供应商类型创建(Created)事件
                //// <param name="vendorTypeID">供应商类型编号</param>
                //r = publisherClient.VendorTypeCreated(14);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     VendorTypeCreated");

                //// 供应商类型变更(Changed)事件
                //// <param name="vendorTypeID">供应商类型编号</param>
                //r = publisherClient.VendorTypeChanged(14);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     VendorTypeChanged");

                //// 供应商类型移除(Remove)事件
                //// <param name="vendorTypeID">供应商类型编号</param>
                //r = publisherClient.VendorTypeRemoved(14);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     VendorTypeRemoved");

                //// 仓库创建(Created)事件
                //// <param name="wid">仓库编号</param>
                //r = publisherClient.WarehouseCreated(202);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     WarehouseCreated");

                //// 仓库改变(Changed)事件
                //// <param name="wid">仓库编号</param>
                //r = publisherClient.WarehouseChanged(202);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     WarehouseChanged");

                //// 仓库移除(Removed)事件
                //// <param name="wid">仓库编号</param>
                //r = publisherClient.WarehouseRemoved(202);
                //FluentConsole.Green.Line(r.IsSuccess + "    " + r.MessageId + "     WarehouseRemoved");

                #endregion
            });

            Console.ReadLine();
        }
    }
}
