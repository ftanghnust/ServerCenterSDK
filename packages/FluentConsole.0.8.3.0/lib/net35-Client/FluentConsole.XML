<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentConsole</name>
    </assembly>
    <members>
        <member name="T:FluentConsole">
            <summary>
            Provides fluent API over console methods (mostly color-related).
            </summary>
        </member>
        <member name="M:FluentConsole.Text(System.Object)">
            <summary>
            Writes an object to the console (same as <see cref="M:System.Console.Write(System.Object)"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.Text(System.String)">
            <summary>
            Writes a string to the console (same as <see cref="M:System.Console.Write(System.String)"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.Text(System.String,System.Object[])">
            <summary>
            Writes a formatted string to the console (same as <see cref="M:System.Console.Write(System.String,System.Object[])"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.Line(System.Object)">
            <summary>
            Writes an object to the console (same as <see cref="M:System.Console.WriteLine(System.Object)"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.Line(System.String)">
            <summary>
            Writes a string to the console (same as <see cref="M:System.Console.WriteLine(System.String)"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.Line(System.String,System.Object[])">
            <summary>
            Writes a formatted string to the console (same as <see cref="M:System.Console.WriteLine(System.String,System.Object[])"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.NewLine">
            <summary>
            Writes a new line to the console (same as <see cref="M:System.Console.WriteLine"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.Color(System.ConsoleColor)">
            <summary>
            Sets the foreground color for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="M:FluentConsole.With``1(System.Func{FluentConsole.IMainSyntax,``0})">
            <summary>
            Applies <paramref name="transform"/> to <see cref="P:FluentConsole.Instance"/> and returns its result.
            May be useful to set the color conditionally, for example.
            </summary>
        </member>
        <member name="P:FluentConsole.Black">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Black"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.DarkBlue">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkBlue"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.DarkGreen">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkGreen"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.DarkCyan">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkCyan"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.DarkRed">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkRed"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.DarkMagenta">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkMagenta"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.DarkYellow">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkYellow"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.Gray">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Gray"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.DarkGray">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkGray"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.Blue">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Blue"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.Green">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Green"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.Cyan">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Cyan"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.Red">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Red"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.Magenta">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Magenta"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.Yellow">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Yellow"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.White">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.White"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.Instance">
            <summary>
            Returns an instance of the FluentConsole syntax.
            Always returns the same instance. Rarely needed.
            </summary>
        </member>
        <member name="T:FluentConsole.IMainSyntax">
            <summary>
            Main fluent interface.
            </summary>
        </member>
        <member name="T:FluentConsole.ITextSyntax">
            <summary>
            Fluent interface used to write text on the console.
            </summary>
        </member>
        <member name="M:FluentConsole.ITextSyntax.Text(System.Object)">
            <summary>
            Writes an object to the console (same as <see cref="M:System.Console.Write(System.Object)"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.ITextSyntax.Text(System.String)">
            <summary>
            Writes a string to the console (same as <see cref="M:System.Console.Write(System.String)"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.ITextSyntax.Text(System.String,System.Object[])">
            <summary>
            Writes a formatted string to the console (same as <see cref="M:System.Console.Write(System.String,System.Object[])"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.ITextSyntax.Line(System.Object)">
            <summary>
            Writes an object to the console (same as <see cref="M:System.Console.WriteLine(System.Object)"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.ITextSyntax.Line(System.String)">
            <summary>
            Writes a string to the console (same as <see cref="M:System.Console.WriteLine(System.String)"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.ITextSyntax.Line(System.String,System.Object[])">
            <summary>
            Writes a formatted string to the console (same as <see cref="M:System.Console.WriteLine(System.String,System.Object[])"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.IMainSyntax.NewLine">
            <summary>
            Writes a new line to the console (same as <see cref="M:System.Console.WriteLine"/>).
            </summary>
        </member>
        <member name="M:FluentConsole.IMainSyntax.Color(System.ConsoleColor)">
            <summary>
            Sets the foreground color for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="M:FluentConsole.IMainSyntax.With``1(System.Func{FluentConsole.IMainSyntax,``0})">
            <summary>
            Applies <paramref name="transform" /> to the current instance and returns its result.
            May be useful to set the color conditionally, for example.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.Black">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Black"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.DarkBlue">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkBlue"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.DarkGreen">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkGreen"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.DarkCyan">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkCyan"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.DarkRed">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkRed"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.DarkMagenta">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkMagenta"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.DarkYellow">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkYellow"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.Gray">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Gray"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.DarkGray">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.DarkGray"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.Blue">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Blue"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.Green">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Green"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.Cyan">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Cyan"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.Red">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Red"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.Magenta">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Magenta"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.Yellow">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.Yellow"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="P:FluentConsole.IMainSyntax.White">
            <summary>
            Sets foreground color to <see cref="F:System.ConsoleColor.White"/> for future calls to <see cref="T:FluentConsole.ITextSyntax"/>.Text and <see cref="T:FluentConsole.ITextSyntax"/>.Line.
            Only applies to calls made on instance it returns.
            </summary>
        </member>
        <member name="T:FluentConsole.IAfterColorSyntax">
            <summary>
            Fluent interface with only methods available after <see cref="M:FluentConsole.IMainSyntax.Color(System.ConsoleColor)"/> call.
            </summary>
        </member>
        <member name="P:FluentConsole.IAfterColorSyntax.Background">
            <summary>
            Applies current color selection to the background instead of the foreground.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
            <example>
            <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args)
            {
              //Do something
            }
            public void Foo()
            {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters
            of the caller function.
            For example, ReSharper annotates the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example>
            <code>
            public void Foo(string param)
            {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes, 
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
            <code>
            [CanBeNull]
            public object Test()
            {
              return null;
            }
            
            public void UseTest()
            {
              var p = Test(); 
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException' 
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
            <code>
            [NotNull]
            public object Foo()
            {
              return null; // Warning: Possible 'null' assignment
            } 
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output means that the methos doesn't return normally. <br/>
            <c>canbenull</c> annotation is only applicable for output parameters. <br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute with rows separated by semicolon. <br/>
            </syntax>
            <examples>
            <list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // Regular Assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
             <summary>
             Indicates that a method does not make any observable state changes.
             The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
             </summary>
             <example>
             <code>
             [Pure]
             private int Multiply(int x, int y)
             {
               return x*y;
             }
            
             public void Foo()
             {
               const int a=2, b=2;
               Multiply(a, b); // Waring: Return value of pure method is not used
             }
             </code>
             </example>
        </member>
    </members>
</doc>
